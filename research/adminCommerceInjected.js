function openHelpWindow() {
    bmCreatePopup('/admin/help/functions/script_quickref_help.jsp', 'BigMachinesHelp');
}

function openMenuHelpWindow() {
    openWindow('edit_rule_help.jsp', 'BigMachinesHelp', 'toolbar=no,scrollbars=yes,resizable=yes,width=800,height=600');
}
//Method to add text at current cursor location in the text area.
function insertText(field, text) {
    if (areBothEqual(text, '-1')) {
        alert("Nothing to add.");
        return;
    }
    editAreaLoader.setSelectedText('bm_script_id', text);
}

//Method to display the help text for the selected function.
function displayFunctionHelp(functionList) {
    var currentText = functionList.options[functionList.selectedIndex].text;
    if (areBothEqual(currentText, 'find')) {
        document.getElementById("_function_description").innerHTML = "The&#32;function&#32;find&#32;returns&#32;the&#32;position&#32;of&#32;a&#32;text&#32;inside&#32;another&#32;text."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer find(String str, String substr, [Integer start], [Integer end])</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive. \<br\/\>\<br\/\> 2. start (begin index) and end (end index) are optional.\<br\/\>\<br\/\>3. If not specified, start is 0 and end is length(Str).\<br\/\>\<br\/\>4. find(\"\", \"\") returns 0.\<br\/\>\<br\/\>5. find(\"\", \"\", num) where num \> 0 returns 0.\<br\/\>\<br\/\>6. find (\"str\", \"substring\", num), where num \> length(str) returns -1.</br>"
    }
    if (areBothEqual(currentText, 'substring')) {
        document.getElementById("_function_description").innerHTML = "The&#32;function&#32;substring&#32;returns&#32;a&#32;part&#32;of&#32;the&#32;text&#32;from&#32;a&#32;larger&#32;text."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String substring(String str, Integer start, [Integer end])</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive. \<br\/\>\<br\/\> 2. end is optional, is Length(str) if not specified.\<br\/\>\<br\/\>3. start can be negative index value, for example, if start = -5, it is same as Length(str)-5. For example, substring(\"aabbcc\", -5) returns \"abbcc\".\<br\/\>\<br\/\>4.end can also be negative value, in which case it is treated similar to start. For example, substring (\"abcdef\", -4, -2) returns \"cd\" </br>"
    }
    if (areBothEqual(currentText, 'split')) {
        document.getElementById("_function_description").innerHTML = "The&#32;function&#32;splits&#32;a&#32;String&#32;with&#32;respect&#32;to&#32;the&#32;specified&#32;separator."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String[] split(String str, String separator)</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive. \<br\/\>\<br\/\> 2. If str is empty string then function returns empty array of size 1.\<br\/\>\<br\/\>3. If both str and separator is empty, then function returns empty array of size 1.\<br\/\>\<br\/\>4. If separator is empty, then then every character in the passed string str is split.\<br\/\>\<br\/\>Example:  strArray = split(\"a.b.c\", \"\");  will return an array with every character split, that is sa will be [\"a\",\".\", \"b\", \".\", \"c\"] with size 5.</br>"
    }
    if (areBothEqual(currentText, 'join')) {
        document.getElementById("_function_description").innerHTML = "The&#32;function&#32;concatenates&#32;a&#32;String&#32;Array&#32;into&#32;a&#32;String&#32;with&#32;a&#32;specified&#32;delimiter."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String join(String[] str_array, String delimiter)</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive. \<br\/\>\<br\/\> 2. If str array is empty, then function returns empty string.\<br\/\>\<br\/\>3. If both str and delimiter are empty, then function returns empty string.\<br\/\>\<br\/\>4. If delimiter is empty, then function returns all the array entries concatenated.\<br\/\>\<br\/\>Example: strArr1 = string[]{\"1\", \"2\", \"3\"};    strArr2 = join(strArr1, \"\"); will set the value of strArr2 to \"123\".</br>"
    }
    if (areBothEqual(currentText, 'lower')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;all&#32;of&#32;the&#32;characters&#32;in&#32;the&#32;text&#32;to&#32;lower&#32;case."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String lower(String str)</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive. \<br\/\>\<br\/\> 2. If str is empty, then function returns empty string.</br>"
    }
    if (areBothEqual(currentText, 'upper')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;all&#32;of&#32;the&#32;characters&#32;in&#32;the&#32;text&#32;to&#32;upper&#32;case."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String upper(String str)</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive. \<br\/\>\<br\/\> 2. If str is empty, then function returns empty string.</br>"
    }
    if (areBothEqual(currentText, 'trim')) {
        document.getElementById("_function_description").innerHTML = "Trims&#32;a&#32;text&#32;for&#32;whitespaces&#32;on&#32;both&#32;edges."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String trim(String str)</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive. \<br\/\>\<br\/\> 2. If str is empty, then function returns empty string.</br>"
    }
    if (areBothEqual(currentText, 'string')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;a&#32;float,&#32;integer&#32;or&#32;boolean&#32;value&#32;into&#32;text."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String string(Float(or Integer(or Boolean)) x)</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive. \<br\/\> \<br\/\>2. This function will throw a compile time error if a string is passed in as a parameter \<br\/\> \<br\/\>Example: string(4) will return \"4\" </br>"
    }
    if (areBothEqual(currentText, 'len')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;length&#32;of&#32;a&#32;String."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer len(String str)</br><br/><b>Behavior/Example</b>:<br>1. If str is an empty string, then function returns 0. \<br\/\> \<br\/\>2. If a string with spaces is passed as an input, then the spaces are counted in the length of the string.  For example, len (\"The cat in the hat\") returns 18 </br>"
    }
    if (areBothEqual(currentText, 'isnumber')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;true&#32;when&#32;the&#32;argument&#32;is&#32;a&#32;number."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean isnumber(String str)</br><br/><b>Behavior/Example</b>:<br>1. If str is an empty string, then function returns false. \<br\/\>\<br\/\>2.  If no string is passed to the function, then a compile time error is thrown</br>"
    }
    if (areBothEqual(currentText, 'replace')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;copy&#32;of&#32;the&#32;string&#32;str&#32;with&#32;all&#32;occurrences&#32;of&#32;substring&#32;old&#32;replaced&#32;by&#32;new.&#32;If&#32;the&#32;optional&#32;integer&#32;argument&#32;n&#32;is&#32;given,&#32;only&#32;the&#32;first&#32;n&#32;occurrences&#32;are&#32;replaced."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String replace(String str, String old, String new, [Integer n])</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive.  \<br\/\> \<br\/\> 2. replace(\"\", \"\", \"\") throws an exception.\<br\/\>\<br\/\>3. replace(\"abc\", \"\", \"\") throws an exception.\<br\/\>\<br\/\>4. replace(\"abc\", \"\", \"1\") throws an exception.</br>"
    }
    if (areBothEqual(currentText, 'atof')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;text&#32;that&#32;represents&#32;a&#32;number&#32;into&#32;a&#32;float&#32;number"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float atof(String str)</br><br/><b>Behavior/Example</b>:<br>1. atof(\"\") throws an exception.</br>"
    }
    if (areBothEqual(currentText, 'atoi')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;text&#32;that&#32;represents&#32;a&#32;number&#32;into&#32;an&#32;integer&#32;number"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer atoi(String str)</br><br/><b>Behavior/Example</b>:<br>1. atoi(\"\") throws an exception.</br>"
    }
    if (areBothEqual(currentText, 'startswith')) {
        document.getElementById("_function_description").innerHTML = "Checks&#32;whether&#32;a&#32;string&#32;starts&#32;with&#32;a&#32;provided&#32;substring"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean startswith(String str, String substring)</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive.  \<br\/\> \<br\/\>2. If string starts with provided substring, the function returns true, false if not</br>"
    }
    if (areBothEqual(currentText, 'endswith')) {
        document.getElementById("_function_description").innerHTML = "Checks&#32;whether&#32;a&#32;string&#32;ends&#32;with&#32;a&#32;provided&#32;substring"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean endswith(String str, String substring)</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive.  \<br\/\> \<br\/\>2. If string ends with provided substring, the function returns true, false if not</br>"
    }
    if (areBothEqual(currentText, 'formatascurrency')) {
        document.getElementById("_function_description").innerHTML = "Takes&#32;a&#32;number&#32;and&#32;returns&#32;it&#32;as&#32;a&#32;formatted&#32;currency&#32;string."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String formatascurrency(Float x, [String currencyCode])</br><br/><b>Behavior/Example</b>:<br>1. This function takes the first parameter and formats that number to the transaction\'s currency if used within a commerce transaction or the current user\'s currency otherwise.\<br\>2. The second parameter can be included to format the value to a different currency if desired.\<br\>\<br\>Example: formatascurrency(32.15, \"EUR\"); will return the string \"&euro;32,15\".</br>"
    }
    if (areBothEqual(currentText, 'getcurrencyvalue')) {
        document.getElementById("_function_description").innerHTML = "Takes&#32;a&#32;formatted&#32;currency&#32;string&#32;and&#32;returns&#32;the&#32;strings&#32;numeric&#32;value."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float getcurrencyvalue(String value, [String currencyCode])</br><br/><b>Behavior/Example</b>:<br>1. This function parses the first parameter using the currency format specified by the currency code passed in the second parameter and returns the float value.\<br\>2. When the second parameter is omitted, this function uses the transaction\'s currency if used within a commerce transaction. When used elsewhere, the current user\'s currency preference is used.\<br\>\<br\>Example: getcurrencyvalue(\"&euro;32,15\", \"EUR\"); will return the Float 32.15.</br>"
    }
    if (areBothEqual(currentText, 'encodebase64')) {
        document.getElementById("_function_description").innerHTML = "Takes&#32;a&#32;string&#32;and&#32;returns&#32;it&#32;as&#32;a&#32;Base64&#32;encoded&#32;string."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String encodebase64(String str)</br><br/><b>Behavior/Example</b>:<br>1. This function parses the string parameter and converts it into its Base64 equivalent.\<br\>\<br\>Example: encodebase64(\"abc\"); will return the Base64 format of String \"abc\".</br>"
    }
    if (areBothEqual(currentText, 'decodebase64')) {
        document.getElementById("_function_description").innerHTML = "Takes&#32;an&#32;encoded&#32;Base64&#32;string&#32;and&#32;returns&#32;it&#32;as&#32;a&#32;plain&#32;text&#32;string."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String decodebase64(String str)</br><br/><b>Behavior/Example</b>:<br>1. This function parses the string parameter which has been encoded into a Base64 format and decodes it into plain text string.\<br\>\<br\>Example: decodebase64(\"YWJj\"); will return the plain text format of String \"abc\".</br>"
    }
    if (areBothEqual(currentText, 'round')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;rounded&#32;value&#32;of&#32;number&#32;up&#32;to&#32;a&#32;specific&#32;decimal&#32;point."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float round(Float x, Integer y)</br><br/><b>Behavior/Example</b>:<br>1. round(num, NaN) returns NaN.</br>"
    }
    if (areBothEqual(currentText, 'ceil')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;a&#32;number&#32;with&#32;fraction&#32;to&#32;a&#32;next&#32;whole&#32;number."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float ceil(Float x)</br><br/><b>Behavior/Example</b>:<br>1. ceil(NaN) returns -999999.0 since the value for NaN is -999999.0\<br\/\>\<br\/\>\<br\/\>2. ceil(num), if num is less than zero but greater than -1.0, then the result is negative zero.</br>"
    }
    if (areBothEqual(currentText, 'acos')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;arc&#32;cosine&#32;of&#32;the&#32;number/angle,&#32;in&#32;the&#32;range&#32;of&#32;0.0&#32;through&#32;pi."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float acos(Float x)</br><br/><b>Behavior/Example</b>:<br>1. acos(num) where num \> 1 or num = NaN, returns NaN.</br>"
    }
    if (areBothEqual(currentText, 'asin')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;arc&#32;sine&#32;of&#32;the&#32;number/angle,&#32;in&#32;the&#32;range&#32;of&#32;-pi/2&#32;through&#32;pi/2."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float asin(Float x)</br><br/><b>Behavior/Example</b>:<br>1. asin(num) where num \> 1 or num = NaN, returns NaN.</br>"
    }
    if (areBothEqual(currentText, 'atan')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;arc&#32;tangent&#32;of&#32;the&#32;number/angle,&#32;in&#32;the&#32;range&#32;of&#32;-pi/2&#32;through&#32;pi/2."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float atan(Float x)</br><br/><b>Behavior/Example</b>:<br>1. atan(NaN) returns -1.5707953267938966 since value for NaN is -999999.0)</br>"
    }
    if (areBothEqual(currentText, 'cos')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;trigonometric&#32;cosine&#32;of&#32;the&#32;number/angle."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float cos(Float x)</br><br/><b>Behavior/Example</b>:<br>1. cos(NaN) returns 0.21161995758460128, since value of NaN is -999999.0</br>"
    }
    if (areBothEqual(currentText, 'cosh')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;hyperbolic&#32;cosine."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float cosh(Float x)</br><br/><b>Behavior/Example</b>:<br>1. cosh(NaN) returns infinity.</br>"
    }
    if (areBothEqual(currentText, 'exp')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;Euler&#39;s&#32;number&#32;e&#32;raised&#32;to&#32;the&#32;power&#32;of&#32;the&#32;number&#32;passed."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float exp(Float x)</br><br/><b>Behavior/Example</b>:<br>1. exp(NaN) returns 0.0 \<br\/\> \<br\/\>Example: exp (1) returns 2.7182818284590455, which is Euler\'s number e </br>"
    }
    if (areBothEqual(currentText, 'fabs')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;absolute&#32;value."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float fabs(Float x)</br><br/><b>Behavior/Example</b>:<br>1. fabs(NaN) returns 999999.0</br>"
    }
    if (areBothEqual(currentText, 'fmod')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;remainder&#32;after&#32;division."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float fmod(Float x, Float y)</br><br/><b>Behavior/Example</b>:<br>1. fmod(0,0) returns NaN\<br\/\>\<br\/\>2. fmod(NaN, 0) returns NaN\<br\/\>\<br\/\>3. fmod(0, NaN) returns 0.0</br>"
    }
    if (areBothEqual(currentText, 'hypot')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;sqrt(x2&#32;+y2)&#32;without&#32;intermediate&#32;overflow&#32;or&#32;underflow."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float hypot(Float x, Float y)</br><br/><b>Behavior/Example</b>:<br> 1. hypot (jNAN, jNAN) returns NaN.\<br\/\>\<br\/\>2. hypot (NAN, NAN) returns 1414212.1481595326 \<br\/\>\<br\/\>3. Negative numbers can be passed as parameters to this function. For example, hypot (-3, -4) returns 5.0 </br>"
    }
    if (areBothEqual(currentText, 'ln')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;natural&#32;logarithm&#32;(base&#32;e)&#32;of&#32;the&#32;number."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float ln(Float x)</br><br/><b>Behavior/Example</b>:<br>1. ln(NaN) returns NaN.\<br\/\>\<br\/\>2. ln(0) or ln(-0) is Negative infinity.\<br\/\>\<br\/\>3. ln(infinity) is infinity.</br>"
    }
    if (areBothEqual(currentText, 'log')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;base&#32;10&#32;logarithm&#32;of&#32;the&#32;number."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float log(Float x)</br><br/><b>Behavior/Example</b>:<br>1. log(NaN) returns NaN in 8.0.0.\<br\/\>\<br\/\>2. log(0) or log(-0) is Negative infinity.\<br\/\>\<br\/\>3. log(infinity) is infinity.</br>"
    }
    if (areBothEqual(currentText, 'pow')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;value&#32;of&#32;the&#32;first&#32;argument&#32;raised&#32;to&#32;the&#32;power&#32;of&#32;the&#32;second&#32;argument."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float pow(Float x, Float y)</br><br/><b>Behavior/Example</b>:<br>1. pow(0,NaN) is infinity.</br>"
    }
    if (areBothEqual(currentText, 'sin')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;trigonometric&#32;sine&#32;of&#32;the&#32;number/angle"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float sin(Float x)</br><br/><b>Behavior/Example</b>:<br>1. sin (NAN) returns 0.9773520315382229\<br\/\>\<br\/\>2. sin (jNAN) returns NAN \<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'sinh')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;hyperbolic&#32;sine&#32;of&#32;the&#32;number."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float sinh(Float x)</br><br/><b>Behavior/Example</b>:<br>1. sinh(NaN) returns -Infinity. \<br\/\> \<br\/\> 2. sinh (jNAN) returns NAN </br>"
    }
    if (areBothEqual(currentText, 'sqrt')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;correctly&#32;rounded&#32;positive&#32;square&#32;root&#32;of&#32;the&#32;number."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float sqrt(Float x)</br><br/><b>Behavior/Example</b>:<br>1. sqrt(num) where num \< 0 (negative) and sqrt(NaN) returns NaN.</br>"
    }
    if (areBothEqual(currentText, 'tan')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;trigonometric&#32;tangent&#32;of&#32;the&#32;number/angle."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float tan(Float x)</br><br/><b>Behavior/Example</b>:<br>1. tan (NAN) returns 4.618430334707433\<br\/\>\<br\/\>2. tan(jNAN) returns NAN \<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'tanh')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;hyperbolic&#32;tangent&#32;of&#32;the&#32;number."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float tanh(Float x)</br><br/><b>Behavior/Example</b>:<br> 1. tanh(NaN) returns -1.0</br>"
    }
    if (areBothEqual(currentText, 'integer')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;integer&#32;part&#32;of&#32;the&#32;number."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer integer(Float x)</br><br/><b>Behavior/Example</b>:<br>1. integer (NAN) returns -999999\<br\/\>\<br\/\>integer (jNAN) returns 0 \<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'NaN')) {
        document.getElementById("_function_description").innerHTML = "Legacy&#32;Constant&#32;for&#32;Not&#32;a&#32;Number.&#32;This&#32;constant&#32;is&#32;deprecated&#32;as&#32;it&#32;is&#32;not&#32;consistent&#32;with&#32;java&#32;behavior."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>NaN</br><br/><b>Behavior/Example</b>:<br>This is a constant value.  It is recommended that jNAN be used instead of NAN.</br>"
    }
    if (areBothEqual(currentText, 'jNaN')) {
        document.getElementById("_function_description").innerHTML = "Java&#32;Constant&#32;for&#32;Not&#32;a&#32;Number.&#32;This&#32;constant&#32;is&#32;recommended&#32;instead&#32;of&#32;NaN."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>jNaN</br><br/><b>Behavior/Example</b>:<br>jNAN is a constant that stands for Not a Number</br>"
    }
    if (areBothEqual(currentText, 'adddays')) {
        document.getElementById("_function_description").innerHTML = "Adds&#32;number&#32;of&#32;days&#32;to&#32;the&#32;date."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Date adddays(Date date, Integer num_of_days)</br><br/><b>Behavior/Example</b>:<br>1. adddays(dt, -99999) or adddays(dt, 99999) returns a valid result.</br>"
    }
    if (areBothEqual(currentText, 'datetostr')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;date&#32;to&#32;text.&#32;If&#32;no&#32;format&#32;is&#32;provided&#32;the&#32;format&#32;of&#32;the&#32;return&#32;text&#32;is&#32;MM/dd/yyyy&#32;HH:mm:ss.&#32;&#32;This&#32;method&#32;expects&#32;the&#32;optional&#32;dateFormat&#32;to&#32;be&#32;in&#32;the&#32;same&#32;format&#32;as&#32;used&#32;in&#32;strtojavadate()."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String datetostr(Date date [, String dateFormat [, String timeZone]])</br><br/><b>Behavior/Example</b>:<br>Example: \<br\/\>&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;datetostr (getdate()) will return today\'s date in the format MM\/dd\/yyyy HH:mm:ss if no format is supplied\<br\/\>\<br\/\>&nbsp;&nbsp;2.&nbsp;&nbsp;&nbsp;&nbsp;testDate = strtojavadate(\"02\/03\/2010 03-22-55\", \"MM\/dd\/yyyy HH-mm-ss\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dateStr = datetostr(testDate, \"yyyy-MM-dd HH:mm:ss\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dateStr now holds the string \"2010-02-03 03:22:55\"\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The date & time was stored in the server\'s time zone by default (For this example, assume GMT-8).\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To retrieve the data in another time zone, include the third parameters as string. See the editor\'s help page for valid time zone inputs.\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;datestr = datetostr(testDate, \"yyyy-MM-dd HH:mm:ss\", \"GMT-6\")\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;datestr will return \"2010-02-03 01:22:55\"\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;twelvehour = datetostr(testDate, \"yyyy-MM-dd hh:mm:ss a\", \"GMT+4\")\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;twelvehour will return \"2010-02-03 03:22:55 PM\"\<br\/\>\<br\/\>&nbsp;&nbsp;3. The components that can be used to make up a valid date format string are:\<BR\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yyyy - Year in long form specifying all digits.\<br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM - Month in numeric format\<br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dd - The day of the month in numeric form e.g 24\<br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HH - The hour as a number in 24 hour form\<br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hh - The hour as a number in 12 hour form\<br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm - Minutes\<br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ss - Seconds\<br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a  - AM\/PM\<br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z  - General Time Zone\<br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Z  - RFC 822 Time Zone\<br\>\<br\></br><br/><table><tr><td class='list-field'><b>Output&#32;Date&#32;Format</b></td></tr><tr><td class='list-field'>MM/dd/yyyy HH:mm:ss</td></tr></table>"
    }
    if (areBothEqual(currentText, 'strtodate')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;String&#32;to&#32;Date.&#32;Deprecated"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Date strtodate(String str, String format [, String timeZone])</br><br/><b>Behavior/Example</b>:<br>1. If the str value is empty string then strtodate returns ERROR_DATE which in 01\/01\/0001 (MM\/DD\/YYYY).\<br\/\>\<br\/\>2. If there is a parsing error due to mismatch of str value and the format string passed to strtodate function then the same ERROR_DATE is returned.\<br\/\>\<br\/\>3. The components that can be used to make up a valid date format string are:\<br\>&nbsp;&nbsp;&nbsp;&nbsp;%Y - Year in long form specifying all digits.\<br\>&nbsp;&nbsp;&nbsp;&nbsp;%m - Month in numeric format\<br\>&nbsp;&nbsp;&nbsp;&nbsp;%d - The day of the month in numeric form e.g 24\<br\>&nbsp;&nbsp;&nbsp;&nbsp;%H - The hour as a number in 24 hour form\<br\>&nbsp;&nbsp;&nbsp;&nbsp;%M - Minutes\<br\>&nbsp;&nbsp;&nbsp;&nbsp;%S - Seconds\<br\>&nbsp;&nbsp;&nbsp;&nbsp;%T - Time.  This is a shorter way of writing a time component in the form %H:%M:%S\<br\/\>\<br\/\> Example: strtodate(\"10\/10\/2008\", \"%m\/%d\/%Y\") returns a date object representing October 10, 2010.\<br\/\>4. By default, the date will save to the server\'s time zone. The Date can be created with a predefined time zone, provided that the correct time zone id is entered.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;See the editor\'s help page for valid time zone inputs.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example: \<br\>\<br\>&nbsp;&nbsp;&nbsp;&nbsp;To Convert to US Format:\<br\>&nbsp;&nbsp;&nbsp;&nbsp;strtodate(\"02\/12\/2010\", \"%m\/%d\/%Y\") returns a date object representing February 12th, 2010.\<br\>\<br\>&nbsp;&nbsp;&nbsp;&nbsp;To Convert to European Format:\<br\>&nbsp;&nbsp;&nbsp;&nbsp;strtodate(\"01\/02\/2010\", \"%d\/%m\/%Y\") returns a date object representing February 1st, 2010.\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;To Convert to European Format w\/ Paris, France time zone\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;parisdate = strtodate(\"01\/02\/2010 16:30:40\", \"%d\/%m\/%Y %H:%M:%S\", \"Europe\/Paris\") returns a date object representing February 1st, 2010 with a time zone in Paris France.\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;When the datetostr method is used, another time zone can be specified and will render with the appropriate time difference.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;datetostr(parisdate, \"dd\/MM\/yyyy %H:%M:%S\", \"America\/Chicago\") will display \"01\/02\/2010 09:30:40\"\<br\/\>\<br\/\></br><br/><table><tr><td class='list-field'><b>Valid&#32;Date&#32;Format</b></td></tr><tr><td class='list-field'>Day</td><td>%d</td></tr><tr><td class='list-field'>Month</td><td>%m</td></tr><tr><td class='list-field'>Year</td><td>%y</td></tr><tr><td class='list-field'>Hour in Day(0-23)</td><td>%H</td></tr><tr><td class='list-field'>Minute</td><td>%M</td></tr><tr><td class='list-field'>Second</td><td>%S</td></tr></table>"
    }
    if (areBothEqual(currentText, 'strtojavadate')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;String&#32;to&#32;Date.&#32;This&#32;is&#32;the&#32;preferred&#32;format&#32;for&#32;converting&#32;Strings&#32;to&#32;Date&#32;objects."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Date strtojavadate(String str, String format [, String timeZone])</br><br/><b>Behavior/Example</b>:<br>1. If str is empty string or any string which cannot be parsed using given format, then this method throws an exception, unlike strtodate method.\<br\/\>\<br\/\>2. The format strings supported are different from the ones supported by strtodate function.\<br\/\>\<br\/\>3. The components that can be used to make up a valid date format string are:\<BR\>&nbsp;&nbsp;&nbsp;&nbsp;yyyy - Year in long form specifying all digits.\<br\>&nbsp;&nbsp;&nbsp;&nbsp;MM - Month in numeric format\<br\>&nbsp;&nbsp;&nbsp;&nbsp;dd - The day of the month in numeric form e.g 24\<br\>&nbsp;&nbsp;&nbsp;&nbsp;HH - The hour as a number in 24 hour form\<br\>&nbsp;&nbsp;&nbsp;&nbsp;hh - The hour as a number in 12 hour form\<br\>&nbsp;&nbsp;&nbsp;&nbsp;mm - Minutes\<br\>&nbsp;&nbsp;&nbsp;&nbsp;ss - Seconds\<br\>&nbsp;&nbsp;&nbsp;&nbsp;a  - AM\/PM\<br\>\<br\>4. By default, the date will save to the server\'s time zone. The Date can be created with a predefined time zone, provided that the correct time zone id is entered.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;See the editor\'s help page for valid time zone inputs.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example: \<br\>\<br\>&nbsp;&nbsp;&nbsp;&nbsp;To Convert to US Format:\<br\>&nbsp;&nbsp;&nbsp;&nbsp;strtojavadate(\"02\/12\/2010\", \"MM\/dd\/yyyy\") returns a date object representing February 12th, 2010.\<br\>\<br\>&nbsp;&nbsp;&nbsp;&nbsp;To Convert to European Format:\<br\>&nbsp;&nbsp;&nbsp;&nbsp;strtojavadate(\"01\/02\/2010\", \"dd\/MM\/yyyy\") returns a date object representing February 1st, 2010.\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp; To Convert to European Format w\/ Paris, France time zone\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;parisdate = strtojavadate(\"01\/02\/2010 16:30:40\", \"dd\/MM\/yyyy HH:mm:ss\", \"Europe\/Paris\") returns a date object representing February 1st, 2010 with a time zone in Paris France.\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;When the datetostr method is used, another time zone can be specified and will render with the appropriate time difference.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;datetostr(parisdate, \"dd\/MM\/yyyy HH:mm:ss\", \"America\/Chicago\") will display \"01\/02\/2010 09:30:40\"\<br\/\>\<br\/\></br><br/><table><tr><td class='list-field'><b>Valid&#32;Date&#32;Format</b></td></tr><tr><td class='list-field'>Day</td><td>dd</td></tr><tr><td class='list-field'>Month</td><td>MM</td></tr><tr><td class='list-field'>Year</td><td>yyyy</td></tr><tr><td class='list-field'>Hour in Day(0-23)</td><td>HH</td></tr><tr><td class='list-field'>Hour in Day(1-24)</td><td>kk</td></tr><tr><td class='list-field'>Hour in am/pm(0-11)</td><td>KK</td></tr><tr><td class='list-field'>Hour in am/pm(1-12)</td><td>hh</td></tr><tr><td class='list-field'>Am/pm marker</td><td>a</td></tr><tr><td class='list-field'>Minute</td><td>mm</td></tr><tr><td class='list-field'>Second</td><td>ss</td></tr></table>"
    }
    if (areBothEqual(currentText, 'getdate')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;current&#32;date."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Date getdate([boolean includeTime])</br><br/><b>Behavior/Example</b>:<br>1. This function will return the current system date \<br\>2. The parameter includeTime is optional.  If it is not included it will be set to true by default.</br>"
    }
    if (areBothEqual(currentText, 'getstrdate')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;string&#32;representation&#32;of&#32;current&#32;date."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String getstrdate()</br><br/><b>Behavior/Example</b>:<br>1. This function will return the current system date string.</br>"
    }
    if (areBothEqual(currentText, 'getdiffindays')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;difference&#32;of&#32;two&#32;dates&#32;in&#32;days."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Number getdiffindays(Date date1, Date date2)</br><br/><b>Behavior/Example</b>:<br>1. getdiffindays (date1, date2) returns the same integer value as getdiffindays (date2, date1)</br>"
    }
    if (areBothEqual(currentText, 'minusdays')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;date&#32;before&#32;the&#32;number&#32;of&#32;days."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Date minusdays(Date date, Integer num_of_days)</br><br/><b>Behavior/Example</b>:<br>1. minusdays(dt, -99999) or minusdays(dt, 99999) returns a valid result.</br>"
    }
    if (areBothEqual(currentText, 'isweekend')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;true&#32;when&#32;the&#32;date&#32;falls&#32;within&#32;weekends."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean isweekend(Date date)</br><br/><b>Behavior/Example</b>:<br>Returns false if the day is not a weekend and returns true if the day is a weekend.</br>"
    }
    if (areBothEqual(currentText, 'isleap')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;true&#32;when&#32;the&#32;date&#32;falls&#32;within&#32;a&#32;leap&#32;year."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean isleap(Integer year_num)</br><br/><b>Behavior/Example</b>:<br>1. The year should be any number between 999 and 9999. \<br\/\> \<br\/\>2. This function returns false if the year is not a leap year and true if it is a leap year.</br>"
    }
    if (areBothEqual(currentText, 'comparedates')) {
        document.getElementById("_function_description").innerHTML = "Used&#32;to&#32;compare&#32;two&#32;dates&#32;based&#32;on&#32;date&#32;and&#32;time.&#32;Returns&#32;0&#32;if&#32;two&#32;dates&#32;are&#32;equal.&#32;Returns&#32;-1&#32;if&#32;first&#32;date-time&#32;is&#32;before&#32;second&#32;date-time.&#32;Returns&#32;1&#32;if&#32;first&#32;date-time&#32;is&#32;after&#32;second&#32;date-time."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer comparedates(Date date1, Date date2)</br><br/><b>Behavior/Example</b>:<br>1. Returns 0 if both dates are equal.\<br\/\>2. Returns -1 if first date is before second date.\<br\/\>3. Returns 1 if first date is after second date.\<br\/\>4. Also considers time for a given date. For \"11\/04\/2009 00:02:00\" and \"11\/04\/2009 00:01:00\", the method returns 1.</br>"
    }
    if (areBothEqual(currentText, 'getcurrenttimeinmillis')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;current&#32;time&#32;in&#32;milliseconds."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer getcurrenttimeinmillis()</br><br/><b>Behavior/Example</b>:<br>Returns current time in millisecond.</br>"
    }
    if (areBothEqual(currentText, 'gettabledata')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;2-D&#32;array&#32;of&#32;String&#32;containing&#32;data&#32;table&#32;data&#32;matching&#32;the&#32;condition&#32;specified."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String[][] gettabledata(String tableName, String[] selectColumns, [String[] whereClauseColumns, String[] whereClauseValues, [String[] whereClauseComps, [boolean whereClauseUseORs]]])</br><br/><b>Behavior/Example</b>:<br>\<b\>Deprecated\<\/b\>: This function is vulnerable to SQL injection and its usage is discouraged.  Use \<tt\>BMQL()\<\/tt\> instead. \<i\>Please refer to the site documentation for further details.\<\/i\>\<br\/\>\<br\/\>1. Following comparators are supported by the gettabledata BML function:\<br\/\>\"=\", \"\<\>\", \"\<\", \"\>\", \"\<=\", \"\>=\", and \"like\".\<br\/\>\<br\/\>2.The gettabledata function allows direct access to the data tables. This is similar to a SQL SELECT command. See example below.\<br\/\>3. The tablename and selectColumns parameters are mandatory.  All other parameters are optional. \<br\/\> When the whereClauseComps parameter is not specified, it is assumed to the \"=\"\<br\/\>4. whereClauseUseORs:  When this is false (default) all the conditions are logically AND\'ed i.e. they form (condition1 AND condition2 AND condition3...).  When this parameter is true then the conditions are logically OR\'ed i.e. they form (condition1 OR condition2 OR condition3...)\<br\/\>\<br\/\>Example:\<br\/\>Assume you have a data table with four columns: color, shape, length and area. To get data from this table, frame your query as follows \<br\/\>selectColumns = string[]{\"color\",\"shape\"};\<br\/\>whereClauseColumns = string[]{\"length\", \"area\"};\<br\/\>whereClauseValues = integer[]{10, 300};\<br\/\>whereClauseComps = string[]{\"\>\", \"\<\"};\<br\/\>doubleArr = gettabledata(\"my_table\", selectColumns, whereClauseColumns, whereClauseValues, whereClauseComps); \<br\/\>This will return a 2-D array with the color and the shape columns when length \> 10 and area \< 300 </br>"
    }
    if (areBothEqual(currentText, 'getpartsdata')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;2-D&#32;array&#32;of&#32;String&#32;containing&#32;Parts&#32;data&#32;for&#32;valid&#32;PartNumbers&#32;passed&#32;in."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String[][] getpartsdata(String[] userSelectFields, String[] partNumbers, String currencyCode, [String priceBookVarName])</br><br/><b>Behavior/Example</b>:<br>\<b\>Deprecated\<\/b\>: This function is vulnerable to SQL injection and its usage is discouraged.  Use \<tt\>BMQL()\<\/tt\> instead. \<i\>Please refer to the site documentation for further details.\<\/i\>\<br\/\>\<br\/\>1. If a partNumber that does not exist is passed as a parameter to this function, then the 2-D array returned will not contain a row with the invalid partNumber \<br\/\>2. If the same partNumber is included multiple times in the partNumbers input array, then only 1 row with the partNumber and the related information is returned. \<br\/\>For Example, result = getpartsdata (string [] {\"part_custom_field1\"}, string [] {\"part1, part1\"}, \"USD\", \"pb1\"). Here, result is a 2-D array with 1 row and contains the partNumber and the part_custom_field1 information\<br\/\>3. The mandatory parameters are userSelectFields and partNumbers.Example:\<br\/\>Assume the fields you are attempting to retrieve are part_number and part_custom_field_1 and your query is based on specific part numbers, currency code and a price book.\<br\/\>userSelectFields = string[]{\"part_custom_field_1\",\"part_number\"};\<br\/\>partNumbers = string[]{\"pno1\", \"pno2\"};\<br\/\>currencyCode = \"USD\";\<br\/\>priceBookVarName = \"pb1\";\<br\/\>doubleArr = getpartsdata(userSelectFields, partNumbers, currencyCode, priceBookVarName);\<br\/\>Note that the first field for every row in the 2-D array returned by this function will be the part number followed by the specified user select fields.\<br\/\> \<br\/\></br><table><tr><td class='list-field'><b>Valid&#32;Parts&#32;Column</b></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field1');\" >_part_custom_field1</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field2');\" >_part_custom_field2</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field3');\" >_part_custom_field3</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field4');\" >_part_custom_field4</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field5');\" >_part_custom_field5</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field6');\" >_part_custom_field6</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field7');\" >_part_custom_field7</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field8');\" >_part_custom_field8</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field9');\" >_part_custom_field9</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field10');\" >_part_custom_field10</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field11');\" >_part_custom_field11</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field12');\" >_part_custom_field12</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field13');\" >_part_custom_field13</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field14');\" >_part_custom_field14</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field15');\" >_part_custom_field15</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field16');\" >_part_custom_field16</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field17');\" >_part_custom_field17</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field18');\" >_part_custom_field18</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field19');\" >_part_custom_field19</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field20');\" >_part_custom_field20</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field21');\" >_part_custom_field21</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field22');\" >_part_custom_field22</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field23');\" >_part_custom_field23</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field24');\" >_part_custom_field24</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field25');\" >_part_custom_field25</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field26');\" >_part_custom_field26</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field27');\" >_part_custom_field27</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field28');\" >_part_custom_field28</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field29');\" >_part_custom_field29</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, '_part_custom_field30');\" >_part_custom_field30</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, 'part_number');\" >part_number</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, 'description');\" >description</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, 'lead_time');\" >lead_time</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, 'price');\" >price</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, 'direct_buy');\" >direct_buy</a></td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, 'units');\" >units</a></td></tr><tr><td class='list-field'><b>Supported&#32;Currencies</b><td></tr><tr><td class='list-field'><a class='general-text' href=\"javascript:insertText(document.bmForm.bm_script, 'USD');\" >USD</a></td></tr></table>"
    }
    if (areBothEqual(currentText, 'bmql')) {
        document.getElementById("_function_description").innerHTML = "Queries&#32;a&#32;data&#32;table&#32;to&#32;retrieve&#32;records,&#32;insert&#32;new&#32;rows,&#32;change&#32;existing&#32;rows&#32;or&#32;delete&#32;rows."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>RecordSet bmql(String sqlQuery [, String Dictionary contextOverride, String Dictionary fieldMap])</br><br/><b>Behavior/Example</b>:<br>Usage (Select Example):\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"select part_number from _parts where part_number = \'part%\'\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;for result in results {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partno = get(result, \"part_number\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;}\<br\/\>\<br\/\>For SELECT statements, \'results\' is returned by bmql which contains the list of data that matched the query.\<br\/\>for loop can be used on \'results\' to go through all the rows of data returned.\<br\/\>\'get\' function can be used to get the specific column from each row we iterate.\<br\/\>\<br\/\>\<br\/\>Usage (Insert Example):\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"insert into table1 (column1, column2) values (\'value1\', 11),(\'value2\', 22)\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;for result in results {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insert_count_integer = get(result, \"records_inserted\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;records_error_string = get(result, \"records_error\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;}\<br\/\>\<br\/\>For INSERT statements, \'results\' is a record set with one integer entry that indicates the number of rows added.  This is usually the same as the number of records in the VALUES part of the BMQL statement, but sometimes a row may fail due to duplicate natural key entries.\<br\/\>When this occurs, a \'records_error\' key will be added, showing the first record that blocks the insertion, as a JSON string.\<br\/\>\<br\/\>\<br\/\>Usage (Delete Example):\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"delete from table1 where column1 = \'value2\'\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;for result in results {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deletion_count_integer = get(result, \"records_deleted\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;}\<br\/\>\<br\/\>For DELETE statements, \'results\' is a record set with one integer entry that indicates the number of rows deleted.\<br\/\>Executing a DELETE statement without a WHERE clause will clear all of the data in the table.\<br\/\>\<br\/\>\<br\/\>Usage (Update Example):\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"update table1 set colum1 = \'new_value1\', column2 = \'new_value2\' where column1 = \'old_value1\'\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;for result in results {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;update_count_integer = get(result, \"records_updated\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;records_error_string = get(result, \"records_error\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;}\<br\/\>\<br\/\>Results will be a record set with one integer entry, showing the number of rows modified.\<br\/\>A \'records_error\' entry also appears when the query is valid, but table state blocks the update.\<br\/\>Executing an UPDATE statement without a WHERE clause will update all of the rows in the table.\<br\/\>\<br\/\>\<br\/\>Usage (Modify Example):\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"modify table1 set colum1 = \'new_value1\', column2 = \'new_value2\' where column1 = \'old_value1\'\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;for result in results {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insert_count_integer = get(result, \"records_inserted\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;update_count_integer = get(result, \"records_updated\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;records_error_string = get(result, \"records_error\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;}\<br\/\>\<br\/\>Results will be a record set with two integer entries, one with the number of rows modified and one with the number of rows added.\<br\/\>A \'records_error\' entry also appears when the query is valid, but table state blocks the modification.\<br\/\>The above query will change all records matching the WHERE condition; if no rows match the condition, it will instead add a new row.\<br\/\>Executing a MODIFY statement without a WHERE clause will update all of the rows in the table.\<br\/\>\<br\/\>Variables in Query:\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;BML variables can be used in the WHERE clause conditions.  \<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;pno = \"part123\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;lead = int[] { 3, 4, 5 };\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"select part_number from _parts where part_number = \<b\>$pno\<\/b\> and lead_time in \<b\>$lead\<\/b\>\");\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;1. \'$\' symbol has to be prepended to the variable name when used in the query string.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;2. The datatypes of the variables should be string, integer or float.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;3. For IN condition the datatypes of the variables should be string[], integer[] or float[].\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;4. Line item variables cannot be used in the query.\<br\/\>\<br\/\>Select Query:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;SELECT [DISTINCT] field1[, field2, ..., fieldn]\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;FROM dataBaseObject\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;[WHERE condition]\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;[ORDER BY field1 [ASC|DESC],[ field2 [ASC|DESC], ..., fieldn [ASC|DESC]]]\<br\/\>\<br\/\>Insert Query:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;INSERT INTO dataBaseObject (column1 [, column2, ..., columnn])\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;VALUES (record1_column1 [, record1_column2, ..., record1_columnN])[, (record2_column1 [, record2_column2, ..., record2_columnN)]])\n\<br\/\>\<br\/\>Delete Query:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;DELETE FROM dataBaseObject\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;[WHERE condition]\<br\/\>\<br\/\>UPDATE Query:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;UPDATE dataBaseObject\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;SET field1 = value1 [, field2 = value2, ..., fieldn = valuen]\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;[WHERE condition]\<br\/\>\<br\/\>MODIFY Query:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;MODIFY dataBaseObject\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;SET field1 = value1 [, field2 = value2, ..., fieldn = valuen]\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;[WHERE condition]\<br\/\>\<br\/\>SELECT, INSERT, DELETE, UPDATE and MODIFY keywords indicate the type of query to be executed.\<br\/\>\<br\/\>DISTINCT keyword can be used in the SELECT clause to return distinct values.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;select distinct custom_field1 from _parts\<br\/\>\<br\/\>FROM dataBaseObject:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Which object to retrieve the data from.  See link below for a list of available objects.\<br\/\>\<br\/\>SET condition is used to change field values.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;The format is the name of the column followed by the \"=\" operator and then the value to set it to.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;string1 = \'ABC-112A\'\<br\/\>\<br\/\>WHERE condition:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Condition is field operator &lt;field | value\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;part_number = \'BL-5C\'\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Logical operators can be used to group the conditions\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example: field1 \< 500 AND field2 = \'USD\' OR field2 = \'EUR\'\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Parenthesis can be used to change the precedence\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;field1 \< 500 AND (field2 = \'USD\' OR field2 = \'EUR\')\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Conditional evaluation - a boolean value can be used with the AND to conditionally evaluate the predicate in the WHERE clause.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Syntax: $eval AND field = value\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;where \'eval\' is a boolean variable in the script\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;When \'eval\' is true the predicate \'field = value\' is used in the criteria\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;When \'eval\' is false the prediacate is ignored\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;e1 = true;\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;e2 = false;\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;rs = bmql(\"select... where $e1 AND f1 = v1 OR $e2 AND f2 = v2\");\<br\/\>\<br\/\>Operators: \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Relational operators:  =, \<\>, \<, \>, \<=, \>=, LIKE, NOT LIKE, IN, NOT IN, IS NULL, IS NOT NULL\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Logical operators: AND, OR\<br\/\>\<br\/\>ORDER BY clause is used to sort the data returned on the fields provided.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;select part_number from _parts order by part_number\<br\/\>\<br\/\>DESC keyword can be used to reverse the sort order to descending.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;select part_number from _parts order by part_number desc\<br\/\>\<br\/\>ASC can be used, optionally, to mean ascending sort order.\<br\/\>\<br\/\>INTO is followed by a data table and then a list of columns (in parentheses and without quotes).\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;These are the columns which the later values statement will populate.\<br \/\>\<br \/\>VALUES prefixes a list of records to be inserted.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Each record is bracketed by parentheses and contains a list of values to be inserted; the values must be given in the same order as the columns.\<br \/\>&nbsp;&nbsp;&nbsp;&nbsp;String values must be single quoted.\<br \/\>\<br \/\>&nbsp;&nbsp;&nbsp;&nbsp;contextOverride (optional second parameter):\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;This dictionary can be populated with the language context variable as a key and an\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;overriding language as the value. When pulling data from the _parts table, this will\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;substitute this language in, rather than the user\'s preferred language.\<\/br\>\<br\/\>Supported Language Codes:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Please see the product documentation for a complete list of supported languages and their corresponding codes.\<\/br\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;If the value for the requested language is blank, the site base language will be used instead. Additionally,\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;if the requested language is not enabled or not found, the context variable will be ignored.\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<\/br\>&nbsp;&nbsp;&nbsp;&nbsp;bmqlReturn = \"nothing\";\<\/br\>&nbsp;&nbsp;&nbsp;&nbsp;Lang = dict(\"string\");\<\/br\>&nbsp;&nbsp;&nbsp;&nbsp;x_var = \"de\";\<\/br\>&nbsp;&nbsp;&nbsp;&nbsp;put(Lang, \"language\", x_var);\<\/br\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"select description from _parts where part_number = \'Translations\'\", Lang);\<\/br\>&nbsp;&nbsp;&nbsp;&nbsp;for result in results {\<\/br\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bmqlReturn = get(result, \"description\");\<\/br\>&nbsp;&nbsp;&nbsp;&nbsp;}\<\/br\>&nbsp;&nbsp;&nbsp;&nbsp;return bmqlReturn;\<\/br\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;This will return the German description of the part Translations.\<\/br\>\<br\/\>fieldMap (optional third parameter)\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;This dictionary is a required field if variables are used within a where clause that is also a variable. Any variable used within a where clause that is a variable must also be defined in this parameter and referenced by the variable\'s key within the where clause.\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;lang = dict(\"string\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;fields = dict(\"string\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;x_var = \"6.08\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;put(fields, \"$field1\", x_var);\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;where = \"float1 = $field1\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"select columnName from tableName where $where\", lang, fields);\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Note: If the third parameter is used, the second parameter must also be defined.\<br\/\>\<br\/\>Dynamic BMQL:\<\/br\>&nbsp;&nbsp;&nbsp;&nbsp;You can use variables in the SELECT, FROM, VALUES and WHERE clause using $var syntax.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Alternatively the entire WHERE clause can be a variable, as can the list of columns to be updated in an INTO statement.  It must be a string.\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;If there are variables in the WHERE clause variable, you must define these variables in a string Dictionary and pass them as a third parameter.  In this case, you must also define a second parameter.\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;Example:\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;In this example, everything that can be dynamic is dynamic.\<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;bmqlReturn = \"nothing\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;select = \"string1,int1\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;from = \"uploadXMLtable\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;lang = dict(\"string\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;fields = dict(\"string\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;x_var = \"6.08\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;y_var = \"2.03\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;a_var = 2;\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;b_var = 1;\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;put(fields, \"$field1\", x_var);\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;set1 = \"string1 = \'Platypus\'\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;set2 = \"string1 = \'Platypodes\'\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;where = \"float1 = $field1\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;where_delete = \"string1 = $field1\";\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"insert into $from ($select) values ($x_var, $a_var),($y_var, $b_var)\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"delete from $from where $where_delete\", lang, fields);\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"update $from set $set1 where $where\", lang, fields);\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"modify $from set $set2 where $where\", lang, fields);\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;results = bmql(\"select $select from $from where $where\", lang, fields);\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;for result in results {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bmqlReturn = get(result, \"string1\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;}\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;return bmqlReturn;\<br\/\>\<br\/\>\<a href=\"\/admin\/help\/functions\/select_data_help.jsp\" onclick=\"javascript:window.open(this.href,\'helpWindow\',\'height=550,width=550,left=200,top=200,resizable=yes,scrollbars=yes\');return false;\"\>Click here\<\/a\> to see table names and associated column details.\<br\/\>Note that INSERT, DELETE, UPDATE and MODIFY queries will only work on live data tables.\<br\/\>\<br\/\>NOTE: BMQL does not support a parts query that retrieves more than 500 parts from a non-default pricebook.</br>"
    }
    if (areBothEqual(currentText, 'haserror')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;true&#32;if&#32;fetching&#32;the&#32;given&#32;RecordSet&#32;failed&#32;and&#32;has&#32;errors&#32;with&#32;query&#32;execution;&#32;false&#32;otherwise."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean haserror(RecordSet recordSet)</br><br/><b>Behavior/Example</b>:<br>1. Returns true if the query execution failed and the RecordSet has errors.\<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>rows = bmql(\"select col... \");\<br\/\>if(haserror(rows)) {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp; ... ; \/\/ comes in here if the query execution failed\<br\/\>}</br>"
    }
    if (areBothEqual(currentText, 'getmessage')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;error&#32;message&#32;in&#32;the&#32;given&#32;RecordSet&#32;if&#32;it&#32;has&#32;errors&#32;with&#32;query&#32;execution;&#32;empty&#32;otherwise."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String getmessage(RecordSet recordSet)</br><br/><b>Behavior/Example</b>:<br>1. Returns the error message if the query execution failed and the RecordSet has errors.\<br\/\>2. Returns empty string if there are no errors.\<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>rows = bmql(\"select col... \");\<br\/\>if(haserror(rows)) {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp; msg = getmessage(rows); \/\/ msg has the error message why the query failed\<br\/\>}</br>"
    }
    if (areBothEqual(currentText, 'getint')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;integer&#32;value&#32;in&#32;the&#32;Record&#32;for&#32;the&#32;provided&#32;field&#32;name."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer getint(Record record, String fieldName)</br><br/><b>Behavior/Example</b>:<br>1. Returns the integer value in the Record given the field name\<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>rows = bmql(\"select intcol... \");\<br\/\>for row in rows {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;val = getint(row, \"intcol\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;val2 = val + 10; \/\/ can do integer operations\<br\/\>}</br>"
    }
    if (areBothEqual(currentText, 'getfloat')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;float&#32;value&#32;in&#32;the&#32;Record&#32;for&#32;the&#32;provided&#32;field&#32;name."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float getfloat(Record record, String fieldName)</br><br/><b>Behavior/Example</b>:<br>1. Returns the float value in the Record given the field name\<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>rows = bmql(\"select intcol... \");\<br\/\>for row in rows {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;val = getfloat(row, \"intcol\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;val2 = val * 0.1; \/\/ can do float operations\<br\/\>}</br>"
    }
    if (areBothEqual(currentText, 'getboolean')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;boolean&#32;value&#32;in&#32;the&#32;Record&#32;for&#32;the&#32;provided&#32;field&#32;name."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean getboolean(Record record, String fieldName)</br><br/><b>Behavior/Example</b>:<br>1. Returns the boolean value in the Record given the field name\<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>rows = bmql(\"select intcol... \");\<br\/\>for row in rows {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;val = getboolean(row, \"intcol\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;if(val); \/\/ can do boolean operations.Useful in if conditions\<br\/\>}</br>"
    }
    if (areBothEqual(currentText, 'getdate (for bmql)')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;date&#32;value&#32;in&#32;the&#32;Record&#32;for&#32;the&#32;provided&#32;field&#32;name."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Date getdate(Record record, String fieldName)</br><br/><b>Behavior/Example</b>:<br>1. Returns the date value in the Record given the field name\<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>rows = bmql(\"select datecol... \");\<br\/\>for row in rows {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;val = getdate(row, \"datecol\");\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;isweekend(val); \/\/ can do date operations.Date functions can be applied\<br\/\>}</br>"
    }
    if (areBothEqual(currentText, 'recordset')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;new&#32;RecordSet."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>RecordSet recordset()</br><br/><b>Behavior/Example</b>:<br>1. Returns a new RecordSet to be used for later assignments.\<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>rs = recordset();\<br\/\>if(...) {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;rs = bmql(query1);\<br\/\>} else {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;rs = bmql(query2);\<br\/\>}</br>"
    }
    if (areBothEqual(currentText, 'gettransaction')) {
        document.getElementById("_function_description").innerHTML = "Retrieves,&#32;as&#32;a&#32;string,&#32;the&#32;transaction&#32;XML&#32;for&#32;a&#32;given&#32;transaction&#32;Id."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String gettransaction(Long bsId)</br><br/><b>Behavior/Example</b>:<br>1. If transaction with given Id doesn\'t exist, it throws an exception.\<br\/\>\<br\/\>2. Transaction XML will be contained in &lt;transaction&gt; node. The result string will look like,\<br\/\>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\<br\/\>&lt;transaction&gt;&lt;category&gt;bm_cm_bs_data&lt;\/category&gt;...&lt;num_transitions&gt;5&lt;\/num_transitions&gt;&lt;\/transaction&gt;\<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>transactionXML = gettransaction(12345); \/\/ 12345 is a transaction id (bs id) </br>"
    }
    if (areBothEqual(currentText, 'if...')) {
        document.getElementById("_function_description").innerHTML = "Simple&#32;conditional&#32;statement&#32;with&#32;one&#32;condition."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>if (&lt;conditional expression&gt;) {&lt;statement(s)&gt;}</br><br/><b>Behavior/Example</b>:<br>1. Example:\<br\/\>if(attr1 \> 100){\<br\/\>&nbsp;&nbsp; return true;}</br>"
    }
    if (areBothEqual(currentText, 'if...else')) {
        document.getElementById("_function_description").innerHTML = "Conditional&#32;statement&#32;with&#32;two&#32;conditions."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>[else {&lt;statement(s)&gt;}]</br><br/><b>Behavior/Example</b>:<br>1. Example:\<br\/\>if(attr1 == 100){\<br\/\>&nbsp;&nbsp; return true;} else {\<br\/\>\<br\/\>&nbsp;&nbsp; return false;}</br>"
    }
    if (areBothEqual(currentText, 'if...else...if')) {
        document.getElementById("_function_description").innerHTML = "Conditional&#32;statement&#32;with&#32;two&#32;or&#32;more&#32;conditions."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>[elif (&lt;conditional expression&gt;) {&lt;statement(s)&gt;}]</br><br/><b>Behavior/Example</b>:<br>1. Example:\<br\/\>if(attr1 == 100){\<br\/\>&nbsp;&nbsp; return true;} elif (attr1 == 200){\<br\/\>&nbsp;&nbsp; return false;}</br>"
    }
    if (areBothEqual(currentText, 'for...loop')) {
        document.getElementById("_function_description").innerHTML = "Loop&#32;statements."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>for (&lt;variable&gt;) in (&lt;system_array&gt;) {&lt;statement(s)&gt;}</br><br/><b>Behavior/Example</b>:<br>Example to loop through a 1-D array:\<br\/\>\<br\/\>arr = string[]{\"aaa\", \"bbb\", \"ccc\"};\<br\/\>for arrElement in arr {\<br\/\>&nbsp;&nbsp;print(arrElement);\<br\/\>} \<br\/\> \<br\/\>Example to loop through a 2-D array:\<br\/\>\<br\/\>int2DArr = Integer [] [] { {1,2}, {2,3}};\<br\/\>for row in int2DArr {\<br\/\>&nbsp;for element in row {\<br\/\>&nbsp;&nbsp;print(element);\<br\/\>&nbsp;}\<br\/\>}</br>"
    }
    if (areBothEqual(currentText, 'break')) {
        document.getElementById("_function_description").innerHTML = "Used&#32;to&#32;stop&#32;the&#32;execution&#32;of&#32;the&#32;loop&#32;statement&#32;and&#32;break&#32;out&#32;of&#32;the&#32;loop."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>for (&lt;variable&gt;) in (&lt;system_array&gt;) {&lt;statement(s)&gt;}</br><br/><b>Behavior/Example</b>:<br>Example to use break in a loop:\<br\/\>\<br\/\>arr = string[]{\"aaa\", \"bbb\", \"ccc\"};\<br\/\>for arrElement in arr {\<br\/\>&nbsp;&nbsp;if (arrElement == \"bbb\") {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;break;\<br\/\>&nbsp;&nbsp;} else {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;print(arrElement);\<br\/\>&nbsp;&nbsp;}}\<br\/\>\<br\/\>The above will print \"aaa\"</br>"
    }
    if (areBothEqual(currentText, 'continue')) {
        document.getElementById("_function_description").innerHTML = "Used&#32;to&#32;skip&#32;the&#32;current&#32;iteration."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>for (&lt;variable&gt;) in (&lt;system_array&gt;) {&lt;statement(s)&gt;}</br><br/><b>Behavior/Example</b>:<br>Example to use continue in a loop:\<br\/\>\<br\/\>arr = string[]{\"aaa\", \"bbb\", \"ccc\"};\<br\/\>for arrElement in arr {\<br\/\>&nbsp;&nbsp;if (arrElement == \"bbb\") {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;continue;\<br\/\>&nbsp;&nbsp;} else {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;print(arrElement);\<br\/\>&nbsp;&nbsp;}\<br\/\>}\<br\/\>\<br\/\>The above will print \"aaa\" and \"ccc\"</br>"
    }
    if (areBothEqual(currentText, 'makeurlparam')) {
        document.getElementById("_function_description").innerHTML = "Constructs&#32;url&#32;param&#32;which&#32;is&#32;used&#32;by&#32;other&#32;url&#32;access&#32;functions."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String makeurlparam({'name':value1, 'name2':value2})</br><br/><b>Behavior/Example</b>:<br>Example: makeurlparam({\'name1\':value1, \'name2\':value2}) returns a string \"name1=value1&name2=value2\"</br>"
    }
    if (areBothEqual(currentText, 'urldata')) {
        document.getElementById("_function_description").innerHTML = "Retrieves&#32;data&#32;from&#32;a&#32;URL&#32;using&#32;HTTP&#32;GET&#32;or&#32;POST&#32;or&#32;PUT&#32;or&#32;PATCH&#32;depending&#32;on&#32;the&#32;parameter.&#32;&#32;Deletes&#32;data&#32;from&#32;URL&#32;by&#32;invoking&#32;a&#32;service&#32;using&#32;DELETE&#32;depending&#32;on&#32;the&#32;parameter&#32;(see&#32;the&#32;makeurlparam&#32;function&#32;for&#32;formatting).&#32;&#32;Note:&#32;If&#32;invocation&#32;of&#32;service&#32;is&#32;from&#32;the&#32;same&#32;site&#32;then&#32;Authorization&#32;is&#32;optional."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Dictionary urldata(String url, String httpMethod, [Dictionary headers, [String parameters, [Integer timeout]]])</br><br/><b>Behavior/Example</b>:<br>On success, returns a Dictionary representation of an Http Response. The keys of the dictionary are response properties, like so:\<br\/\>&nbsp;&nbsp;Key: \"Status-Code\", Value: \"200 OK\"\<br\/\>&nbsp;&nbsp;Key(Header): \"Content-Type\", Value: \"application\/json\"\<br\/\>&nbsp;&nbsp;Key(Header): \"Content-Length\", Value: \"2\"\<br\/\>&nbsp;&nbsp;Key(Body): \"{}\"\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;An example of response handling.\<br\/\>&nbsp;&nbsp;response = urldata(url, method, headers);\<br\/\>&nbsp;&nbsp;print(get(response, \"Status-Code\")); \/\/ print the status code\<br\/\>&nbsp;&nbsp;print(get(response, httpHeaderName)); \/\/ print the value of the header named httpHeaderName\<br\/\>&nbsp;&nbsp;print(get(response, \"Message-Body\")); \/\/ print the message body\<br\/\>&nbsp;&nbsp;\<br\/\>1. These are simple examples of how to create a request.\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;&nbsp;Example: Send a GET request without a header\<br\/\>&nbsp;&nbsp;response=urldata(\"http:\/\/&lt;hostname&gt;\/&lt;path&gt;\",\"GET\");\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;&nbsp;Example: Send a PUT request without authentication and JSON as payload\<br\/\>&nbsp;&nbsp;headers=dict(\"string\");\<br\/\>&nbsp;&nbsp;put(headers, \"Content-Type\", \"application\/json\");\<br\/\>&nbsp;&nbsp;response=urldata(\"http:\/\/&lt;hostname&gt;\/&lt;path&gt;\",\"PUT\",headers,{jsonBody});\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;&nbsp;Example: Send a DELETE request with authentication and plain text payload\<br\/\>&nbsp;&nbsp;headers=dict(\"string\");\<br\/\>&nbsp;&nbsp;encodecredential = encodebase64(\"&lt;username&gt;:&lt;password&gt;\"); \/\/ for Authentication\<br\/\>&nbsp;&nbsp;authstring=\"Basic \" + encodecredential;\<br\/\>&nbsp;&nbsp;put(headers, \"Authorization\", authstring); \/\/optional if service is from the same site\<br\/\>&nbsp;&nbsp;put(headers, \"Content-Type\", \"text\/plain\");\<br\/\>&nbsp;&nbsp;response=urldata(\"http:\/\/&lt;hostname&gt;\/&lt;path&gt;\",\"DELETE\",headers,\"request payload\");\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;&nbsp;Example: Send a PATCH request with authentication\<br\/\>&nbsp;&nbsp;headers=dict(\"string\");\<br\/\>&nbsp;&nbsp;encodecredential = encodebase64(\"&lt;username&gt;:&lt;password&gt;\"); \/\/ for Authentication\<br\/\>&nbsp;&nbsp;authstring=\"Basic \" + encodecredential;\<br\/\>&nbsp;&nbsp;put(headers, \"Authorization\", authstring); \/\/optional if service is from the same site\<br\/\>&nbsp;&nbsp;response=urldata(\"http:\/\/&lt;hostname&gt;\/&lt;path&gt;\",\"PATCH\",headers,{jsonBody});\<br\/\>&nbsp;&nbsp;\<br\/\>2. An optional timeout parameter can be set on the urldata method. The timeout is in milliseconds. This overrides the General Site Option \'BML URL Function Timeout\'.\<br\/\>&nbsp;&nbsp;If there is a timeout, urldata() returns a dictionary representation of the error response, with Status-Code and Error-Message as keys.\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;&nbsp;Example: Make a GET request with a timeout.\<br\/\>&nbsp;&nbsp;headers=dict(\"string\");\<br\/\>&nbsp;&nbsp;put(headers, \"content-type\", \"application\/json\");\<br\/\>&nbsp;&nbsp;response=urldata(\"http:\/\/&lt;hostname&gt;\/&lt;path&gt;\", \"GET\",headers,\"\", 5000);\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;&nbsp;Sample error message during timeout:\<br\/\>&nbsp;&nbsp;{Status-Code=-1, Error-Message=Read timed out}\<br\/\>&nbsp;&nbsp;\<br\/\>3. If the executing user is logged in to an integrated site, then calls to that integrated site can use the user\'s authentication token.  To do this, a string token (\"$_access_token_salesforce$\" for Salesforce and \"$_access_token_dynamics365$\" for Microsoft Dynamics365) can be inserted into a header value.  When the call is executed, this token will be replaced with the user\'s partner authentication token.\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;&nbsp;Example: Request a list of Salesforce sobjects\<br\/\>&nbsp;&nbsp;headers=dict(\"string\");\<br\/\>&nbsp;&nbsp;put(headers, \"Authorization\", \"Bearer $_access_token_salesforce$\");\<br\/\>&nbsp;&nbsp;response=urldata(\"https:\/\/&lt;salesforcehost&gt;\/services\/data\/v37.0\", \"GET\", headers);\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;&nbsp;Example: Request a list of Microsoft Dynamics Opportunities.\<br\/\>&nbsp;&nbsp;headers=dict(\"string\");\<br\/\>&nbsp;&nbsp;put(headers, \"Authorization\", \"Bearer $_access_token_dynamics365$\");\<br\/\>&nbsp;&nbsp;response=urldata(\"https:\/\/&lt;dynamicshost&gt;\/api\/data\/v8.2\/opportunities\", GET, headers);\<br\/\>4. Additional identifier needs to be used to make outbound calls to the resource registered with OAuth Provider .  To do this, a string token (\"$_access_token_oauthprovider$\" ) can be inserted into a header value.  When the call is executed, this token will be replaced with the access token obtained from the OAuth Provider based on the setup in integration center. If call requires user identity , corresponding identifier(\"UserIdentity\") can be inserted else if not inserted, it is treated as without user identity propagation. For certain OAuth Provider like IDCS identifier \"scope\" needs to be passed. Scope value needs to be obtained from resource APIs documentation\<br\/\>&nbsp;&nbsp;\<br\/\>&nbsp;&nbsp;Example: Intregrate with external resource registered with OAuth Provider\<br\/\>&nbsp;&nbsp;headers=dict(\"string\");\<br\/\>&nbsp;&nbsp;put(headers, \"Authorization\", \"Bearer $_access_token_oauthprovider$\");\<br\/\>&nbsp;&nbsp;put(headers, \"UserIdentity\", \"&lt;string&gt;\");\<br\/\>&nbsp;&nbsp;put(headers, \"Scope\", \"&lt;allowed scope registred with client &gt;\");\<br\/\>&nbsp;&nbsp;response=urldata(\"https:\/\/&lt;resourceendpoint&gt;\", \"GET\", headers);\<br\/\>&nbsp;&nbsp;\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'urldatabyget')) {
        document.getElementById("_function_description").innerHTML = "Retrieves&#32;data&#32;from&#32;a&#32;URL&#32;using&#32;HTTP&#32;GET&#32;to&#32;submit&#32;parameters&#32;(see&#32;the&#32;makeurlparam&#32;function&#32;for&#32;formatting).&#32;Note:&#32;If&#32;invocation&#32;of&#32;service&#32;is&#32;from&#32;the&#32;same&#32;site&#32;then&#32;Authorization&#32;is&#32;optional."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String urldatabyget(String url, String parameters, String defaultValue, [Integer timeout, [Dictionary headers]])</br><br/><b>Behavior/Example</b>:<br>1. On success, returns the response String.\<br\/\>\<br\/\>2. On failure, returns the defaultValue.\<br\/\>\<br\/\>3. Optional timeout parameter can be set on urldatabyget. This timeout is in milliseconds. This overrides the General site option \'BML URL Function Timeout\'. \<br\/\>\<br\/\>4. In the event of timeout, returns the error message.\<br\/\>\<br\/\>Example: urldatabyget(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"error message\");\<br\/\>urldatabyget(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"error message\", 5000);\/\/uses optional timeout\<br\/\>Sample error message during timeout: \<br\/\>ERROR: I\/O operation has been interrupted while attempting to connect to URL: http:\/\/www.example.com - Read timed out \<br\/\>\<br\/\>5. Custom HTTP headers can be applied by passing a Dictionary of Strings in the optional headers parameter.\<br\/\>\<br\/\>Example: myHeaders = dict(\"string\");\<br\/\>put(myheaders, \"Content-Type\", \"text\/xml\");\<br\/\>urldatabyget(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"error message\", 5000, myHeaders);\/\/uses optional dictionary headers \<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'urldatabypost')) {
        document.getElementById("_function_description").innerHTML = "Retrieves&#32;data&#32;from&#32;a&#32;URL&#32;using&#32;HTTP&#32;POST&#32;to&#32;submit&#32;parameters&#32;(see&#32;the&#32;makeurlparam&#32;function&#32;for&#32;formatting).&#32;Note:&#32;If&#32;invocation&#32;of&#32;service&#32;is&#32;from&#32;the&#32;same&#32;site&#32;then&#32;Authorization&#32;is&#32;optional."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String urldatabypost(String url, String parameters, String defaultValue, [Dictionary headers, [Boolean returnErrorResponse, [Integer timeout]]])</br><br/><b>Behavior/Example</b>:<br>1. Custom HTTP headers can be applied by passing a Dictionary of Strings in the optional headers parameter.\<br\/\>\<br\/\>2. On success returns the response String.\<br\/\>\<br\/\>3. If it fails and the optional returnErrorResponse parameter is set to true, returns a specific HTTP error code message.\<br\/\>\<br\/\>4. Otherwise returns the defaultValue.\<br\/\>\<br\/\>5. Authorization is optional if the service call is from the same site.\<br\/\>\<br\/\>6. Optional timeout parameter can be set on urldatabypost. This timeout is in milliseconds. This overrides the General site option \'BML URL Function Timeout\'. \<br\/\>\<br\/\>7. In the event of timeout,if the optional returnErrorResponse parameter is set to true, returns the error code message.\<br\/\>\<br\/\>Examples:\<br\/\>urldatabypost(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"error message\");\<br\/\>urldatabypost(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"error message\", myHeaders); \/\/Uses custom HTTP headers\<br\/\>urldatabypost(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"\", dict(\"string\"), true); \/\/Uses the HTTP error code message (without custom headers)\<br\/\>urldatabypost(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"\", myHeaders, true); \/\/Uses both custom headers and the error code message\<br\/\>urldatabypost(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"\", dict(\"string\"), true, 5000); \/\/Uses optional timeout with returnErrorResponse set to true \<br\/\>Sample error message in the event of timeout: \<br\/\>ERROR: Server returned HTTP response code: 408 for URL: http:\/\/www.example.com - Read timed out \<br\/\>urldatabypost(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"\", dict(\"string\"), false, 5000); \/\/Uses optional timeout with returnErrorResponse set to false\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'urldatabypostasync')) {
        document.getElementById("_function_description").innerHTML = "Retrieves&#32;data&#32;asynchronously&#32;from&#32;a&#32;URL&#32;using&#32;HTTP&#32;POST&#32;to&#32;submit&#32;parameters&#32;(see&#32;the&#32;makeurlparam&#32;function&#32;for&#32;formatting)."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String urldatabypostasync(String url, String parameters, String defaultValue, String callbackActionVarName, [Dictionary headers, [Boolean returnErrorResponse, [Integer timeout]]])</br><br/><b>Behavior/Example</b>:<br>1. Custom HTTP headers can be applied by passing a Dictionary of Strings in the optional headers parameter.\<br\/\>\<br\/\>2. On success, returns the response String.\<br\/\>\<br\/\>3. If it fails and the optional returnErrorResponse parameter is set to true, returns a specific HTTP error code message.\<br\/\>\<br\/\>4. Otherwise, returns the defaultValue.\<br\/\>\<br\/\>5. Request Soap Message should contain $_BM_ASYNC_ADDRESSING_TOKEN$ in the header.\<br\/\>\<br\/\>6. Optional timeout parameter can be set on urldatabypostasync. This timeout is in milliseconds. This overrides the General site option \'BML URL Function Timeout\'. \<br\/\>\<br\/\>7. In the event of timeout,if the optional returnErrorResponse parameter is set to true, returns the error code message.\<br\/\>\<br\/\>Examples:\<br\/\>urldatabypostasync(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"error message\", \"callbackActionVarName\");\<br\/\>urldatabypostasync(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"error message\", \"callbackActionVarName\", myHeaders); \/\/Uses custom HTTP headers\<br\/\>urldatabypostasync(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"\", \"callbackActionVarName\", dict(\"string\"), true); \/\/Uses the HTTP error code message (without custom headers)\<br\/\>urldatabypostasync(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"\", \"callbackActionVarName\", myHeaders, true); \/\/Uses both custom headers and the error code message \<br\/\>urldatabypostasync(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"\", dict(\"string\"), true, 5000); \/\/Uses optional timeout with returnErrorResponse set to true \<br\/\>Sample error message in the event of timeout: \<br\/\>ERROR: Server returned HTTP response code: 408 for URL: http:\/\/www.example.com - Read timed out \<br\/\>urldatabypostasync(\"http:\/\/www.example.com\", \"a1=v1&a2=v2\", \"\", dict(\"string\"), false, 5000); \/\/Uses optional timeout with returnErrorResponse set to false\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'urlmultipartbypost')) {
        document.getElementById("_function_description").innerHTML = "Send&#32;a&#32;multipart&#32;message&#32;with&#32;attachments&#32;for&#32;Remote&#32;Approvals."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Dictionary urlmultipartbypost(String url, String payload, [Dictionary headers, [Dictionary attachments, [Integer timeout]]])</br><br/><b>Behavior/Example</b>:<br>1. On success, returns the response is Dictionary representation of Http Response.\<br\/\>2. Optional timeout parameter can be set on urlmultipartbypost. This timeout is in milliseconds. This overrides the General site option \'BML URL Function Timeout\'. \<br\/\>3. In the event of timeout, returns the error response.\<br\/\>\<br\/\>Example: urlmultipartbypost(\"http:\/\/www.example.com\", \"{jsonBody}\",dict(\"string\"),dict(\"dict&lt;anytype&gt;\"));\<br\/\>urlmultipartbypost(\"http:\/\/www.example.com\", \"{jsonBody}\",dict(\"string\"),dict(\"dict&lt;anytype&gt;\"),5000); \/\/Uses the optional timeout \<br\/\>Sample error response in the event of timeout:\<br\/\>Error-Message=ERROR: I\/O operation has been interrupted while attempting to connect to URL:http:\/\/www.example.com - Read timed out \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'string[n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;String&#32;array&#32;with&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String[] string[Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = string[-9]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For string array, the value in each field of the array after array declaration (example, arr = string[10];) is equal to null, if the array fields are not initialized. \<br\/\> \<br\/\>5. These arrays are dynamic in nature and the length can be increased.  \<br\/\>For example, \<br\/\>strArray = String [2]; \/\/ This will create a string array of length 2 \<br\/\>strArray [4] = \"a\"; \/\/ This will automatically extend the length of strArray to 5</br>"
    }
    if (areBothEqual(currentText, 'integer[n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;Integer&#32;array&#32;with&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer[] integer[Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = integer[-9]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For integer array, the value in each field of the array after array declaration (example, arr = integer[10];) is equal to 0, if the array fields are not initialized. \<br\/\> \<br\/\>5. These arrays are dynamic in nature and the length can be increased.  \<br\/\>For example, \<br\/\>intArray = Integer[2]; \/\/ This will create an integer array of length 2 \<br\/\>intArray [4] = 2; \/\/ This will automatically extend the length of intArray to 5</br>"
    }
    if (areBothEqual(currentText, 'float[n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;Float&#32;array&#32;with&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float[] float[Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = float[-9]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For float array, the value in each field of the array after array declaration (example, arr = float[10];) is equal to 0.0, if the array fields are not initialized.\<br\/\>\<br\/\>5. These arrays are dynamic in nature and the length can be increased.  \<br\/\>For example, \<br\/\>fltArray = Float[2]; \/\/ This will create a float array of length 2 \<br\/\>fltArray [4] = 2.1; \/\/ This will automatically extend the length of fltArray to 5</br>"
    }
    if (areBothEqual(currentText, 'date[n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;Date&#32;array&#32;with&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Date[] date[Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = date[-9]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For date array, the value in each field of the array after array declaration (example, arr = date[10];) is equal to null, if the array fields are not initialized.\<br\/\>\<br\/\>5. These arrays are dynamic in nature and the length can be increased.  \<br\/\>For example, \<br\/\>dateArray = Date[2]; \/\/ This will create a date array of length 2 \<br\/\>dateArray [4] = getdate(); \/\/ This will automatically extend the length of dateArray to 5</br>"
    }
    if (areBothEqual(currentText, 'boolean[n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;Boolean&#32;array&#32;with&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean[] boolean[Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = boolean[-9]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For boolean array, the value in each field of the array after array declaration (example, arr = boolean[10];) is equal to false, if the array fields are not initialized.\<br\/\>\<br\/\>5. These arrays are dynamic in nature and the length can be increased.  \<br\/\>For example, \<br\/\>booleanArray = Boolean[2]; \/\/ This will create a boolean array of length 2 \<br\/\>booleanArray[4] = true; \/\/ This will automatically extend the length of booleanArray to 5</br>"
    }
    if (areBothEqual(currentText, 'string[n][n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;2-D&#32;String&#32;array&#32;with&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String[][] string[Integer n][Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = string[-9][0]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For string array, the value in each field of the array after array declaration (example, arr = integer[10][2];) is equal to null, if the array fields are not initialized.</br>"
    }
    if (areBothEqual(currentText, 'integer[n][n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;2-D&#32;Integer&#32;array&#32;with&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer[][] integer[Integer n][Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = integer[-9][0]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For integer array, the value in each field of the array after array declaration (example, arr = integer[10][2];) is equal to 0, if the array fields are not initialized.5. These arrays are dynamic in nature and the length can be increased.  \<br\/\>For example, \<br\/\>intArray = Integer[2] [2]; \/\/ This will create an integer array with two rows and two columns \<br\/\>intArray [2][3] = 5; \/\/ This will automatically extend the length of intArray to include an extra column</br>"
    }
    if (areBothEqual(currentText, 'float[n][n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;2-D&#32;Float&#32;array&#32;with&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Float[][] float[Integer n][Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = float[-9][0]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For float array, the value in each field of the array after array declaration (example, arr = float[10][2];) is equal to 0.0, if the array fields are not initialized.5. These arrays are dynamic in nature and the length can be increased.  \<br\/\>For example, \<br\/\>fltArray = float[2] [2]; \/\/ This will create a float array with two rows and two columns \<br\/\>fltArray [2][3] = 5; \/\/ This will automatically extend the length of fltArray to include an extra column</br>"
    }
    if (areBothEqual(currentText, 'date[n][n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;2-D&#32;Date&#32;array&#32;with&#32;the&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Date[][] date[Integer n][Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = date[-9][0]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For float array, the value in each field of the array after array declaration (example, arr = date[10][2];) is equal to null, if the array fields are not initialized.\<br\/\>\<br\/\>5. These arrays are dynamic in nature and the length can be increased.  \<br\/\>For example, \<br\/\>dateArray = date[2] [2]; \/\/ This will create a date array with two rows and two columns \<br\/\>dateArray [2][3] = getdate(); \/\/ This will automatically extend the length of dateArray to include an extra column</br>"
    }
    if (areBothEqual(currentText, 'boolean[n][n]')) {
        document.getElementById("_function_description").innerHTML = "Initializes&#32;a&#32;2-D&#32;Boolean&#32;array&#32;with&#32;the&#32;specified&#32;size."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean[][] boolean[Integer n][Integer n]</br><br/><b>Behavior/Example</b>:<br>1. Negative number (including NaN, which is equal to -999999) specified for array size throws a runtime exception. For example, arr = boolean[-9][0]; throws a RuntimeException.\<br\/\>\<br\/\>2. When you specify the array size equal to jNaN, then array of size 0 is initialized.\<br\/\>\<br\/\>3. Contact admin for size limits.\<br\/\>\<br\/\>4. For boolean array, the value in each field of the array after array declaration (example, arr = boolean[10][2];) is equal to false, if the array fields are not initialized.\<br\/\>\<br\/\>5. These arrays are dynamic in nature and the length can be increased.  \<br\/\>For example, \<br\/\>booleanArray = boolean[2] [2]; \/\/ This will create a boolean array with two rows and two columns \<br\/\>booleanArray [2][3] = true; \/\/ This will automatically extend the length of booleanArray to include an extra column</br>"
    }
    if (areBothEqual(currentText, 'bytearray')) {
        document.getElementById("_function_description").innerHTML = "Encodes&#32;the&#32;string&#32;into&#32;a&#32;sequence&#32;of&#32;bytes&#32;using&#32;the&#32;named&#32;charset(default&#32;UTF-8)."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>ByteArray bytearray(String content [,String charSet])</br><br/><b>Behavior/Example</b>:<br>1. Encodes the given string into a sequence of bytes using the specified charSet.\<br\/\>2. The default value of the charSet parameter is UTF-8.\<br\/\>3. charSet can be any of the Java SE Runtime Environment 6 supported charSet\'s like ASCII, ISO-8859-1,UTF-32BE etc.\<br\/\>4. Error will be thrown if invalid charSet is given.\<br\/\>\<br\/\>Example:\<br\/\> var = bytearray(\"Sample String\",\"UTF-16\");\<br\/\>print var;\<br\/\>\/\/Output: bytearray [UTF-16]: Sample String\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'sizeofarray')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;size&#32;of&#32;the&#32;array."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer sizeofarray(Array arrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Size of double array returns the number of rows, for example\<br\/\>\<br\/\>arr = string[10][2]; size = sizeofarray(arr); will assign value 10 to variable size.</br>"
    }
    if (areBothEqual(currentText, 'append')) {
        document.getElementById("_function_description").innerHTML = "Appends&#32;a&#32;new&#32;element&#32;to&#32;the&#32;end&#32;of&#32;an&#32;array,&#32;can&#32;be&#32;used&#32;with&#32;initialized&#32;and&#32;uninitialized&#32;arrays."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer append(Array arrayIdentifier, Float(or Integer, String or Date) newArrayElem)</br><br/><b>Behavior/Example</b>:<br>1. Returns new size of array after appending new element.\<br\/\>\<br\/\>2. If array max size is reached and a new element is appended to the array, the append will fail.\<br\/\>\<br\/\>3. If a null element is added to an array, it should be allowed to be added and the value of the element in the array should be null.</br>"
    }
    if (areBothEqual(currentText, 'remove')) {
        document.getElementById("_function_description").innerHTML = "Removes&#32;an&#32;element&#32;from&#32;an&#32;existing&#32;array&#32;based&#32;on&#32;a&#32;given&#32;index."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer remove(Array arrayIdentifier, Integer removePos)</br><br/><b>Behavior/Example</b>:<br>1. Returns new size of array after removing the element.\<br\/\>\<br\/\>2. If the array is empty, the remove will fail.\<br\/\>\<br\/\>3. Only integers are allowed to be passed in for the index of the element to be removed.</br>"
    }
    if (areBothEqual(currentText, 'sort')) {
        document.getElementById("_function_description").innerHTML = "Sorts&#32;array&#32;elements&#32;based&#32;on&#32;defined&#32;sort&#32;method."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Array sort(Array arrayIdentifier, [String sortOrder, [String sortType]])</br><br/><b>Behavior/Example</b>:<br>1. arrayIdentifier is the array you want to sort.\<br\/\>\<br\/\>2. sortOrder takes the string values \"asc\"(ascending) or \"desc\"(descending).  The default behavior is ascending.  It must be a string literal; if it is a variable it will cause an error.\<br\/\>Example: a = string[]{\"a\", \"c\", \"b\"};\<br\/\>sort(a);  -\> [\"a\", \"b\", \"c\"]\<br\/\>sort(a, \"desc\");  -\> [\"c\", \"b\", \"a\"]\<br\/\>\<br\/\>3. sortType takes the string values \"text\", \"numeric\", or \"date\".  A string array with no sortType will be sorted with numbers first, capitals etters next, then lower case.  Numbers are treated as strings: they are sorted by the first digit, then subsequent digits.\<br\/\>Example: a = string[]{\"2\", \"12\", \"a\", \"A\", \"B\", \"b\"};\<br\/\>sort(a, \"asc\");  -\> [\"12\", \"2\", \"A\", \"B\", \"a\", \"b\"]\<br\/\>\<br\/\>For a sortType of \"text\", entries are not case sensitive.\<br\/\>Example: a = string[]{\"2\", \"12\", \"a\", \"A\", \"B\", \"b\"};\<br\/\>sort(a, \"asc\", \"text\"); -\> [\"12\", \"2\", \"a\", \"A\", \"B\", \"b\"]\<br\/\>\<br\/\>To sort with a sortType of \"numeric\" the array must only contain entries that can be parsed as numbers, or an error appears.\<br\/\>Example: stringArray = string[]{\"1\", \"2\", \"10\", \"20\"};\<br\/\>sort(stringArray, \"asc\");  -\> [\"1\", \"10\", \"2\", \"20\"]\<br\/\>sort(stringArray, \"asc\", \"numeric\"); -\> [\"1\", \"2\", \"10\", \"20\"]\<br\/\>\<br\/\>An integer array will sort with \"numeric\" as default.\<br\/\>Example: intArray = integer[]{1, 2, 10, 20};\<br\/\>sort(intArray, \"asc\");  -\> [1, 2, 10, 20]\<br\/\>sort(intArray, \"asc\", \"text\");  -\> [1, 10, 2, 20]\<br\/\>\<br\/\>The sortType \"date\" can only be used to sort a date array</br>"
    }
    if (areBothEqual(currentText, 'max')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;largest&#32;element&#32;of&#32;an&#32;integer,&#32;float&#32;or&#32;date&#32;array."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer(or Float or Date) max(Integer[](or Float[] or Date[]) arrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Returns the largest integer\/float\/date in the array.</br>"
    }
    if (areBothEqual(currentText, 'min')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;smallest&#32;element&#32;of&#32;an&#32;integer,&#32;float&#32;or&#32;date&#32;array."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer(or Float or Date) min(Integer[](or Float[] or Date[]) arrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Returns smallest inetger\/float\/date element of the array.</br>"
    }
    if (areBothEqual(currentText, 'findinarray')) {
        document.getElementById("_function_description").innerHTML = "Checks&#32;whether&#32;a&#32;certain&#32;element&#32;exists&#32;in&#32;array,&#32;if&#32;it&#32;does&#32;the&#32;index&#32;is&#32;returned,&#32;otherwise&#32;-1&#32;is&#32;returned."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer findinarray(Array arrayIdentifier, Integer(or Float, String or Date) element)</br><br/><b>Behavior/Example</b>:<br>1. Returns index of an element in an array if a match is found, if no match is found -1 is returned.</br>"
    }
    if (areBothEqual(currentText, 'reverse')) {
        document.getElementById("_function_description").innerHTML = "Reverses&#32;all&#32;elements&#32;of&#32;an&#32;array."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Array reverse(Array arrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Returns an array with all the elements in the reverse order.</br>"
    }
    if (areBothEqual(currentText, 'isempty')) {
        document.getElementById("_function_description").innerHTML = "Checks&#32;whether&#32;an&#32;array&#32;is&#32;empty."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean isempty(Array arrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Returns true if array is empty, false if not</br>"
    }
    if (areBothEqual(currentText, 'range')) {
        document.getElementById("_function_description").innerHTML = "Declares&#32;an&#32;integer&#32;array&#32;with&#32;specified&#32;size&#32;and&#32;initializes&#32;it&#32;to&#32;its&#32;index&#32;value."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer[] range(Integer x)</br><br/><b>Behavior/Example</b>:<br>1. This function is case-sensitive.  \<br\/\> \<br\/\> 2. If x is 0, then the function returns an integer[0].\<br\/\> \<br\/\>Example: intArray = range(2) returns an integer array of size 2 where, intArray [0] = 0, intArray [1] = 1 </br>"
    }
    if (areBothEqual(currentText, 'dict')) {
        document.getElementById("_function_description").innerHTML = "Creates&#32;a&#32;dictionary."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Dictionary dict(String dictType)</br><br/><b>Behavior/Example</b>:<br>1. Creates a dictionary of the type specified by the dictType parameter.\<br\/\>\<br\/\>2. The dataTypes supported are:\<br\/\>\"string\", \"integer\", \"float\",\<br\/\>\"string[]\", \"integer[]\", \"float[]\",\<br\/\>\"string[][]\", \"integer[][]\", \"float[][]\",\<br\/\>\"boolean\", \"date\", \"date[]\", \"date[][]\", \"dict&lt;string&gt;\", \"anytype\", \"dict&lt;anytype&gt;\"\<br\/\>\<br\/\>For example, \<br\/\>d = dict(\"string\");\<br\/\>d1 = dict(\"anytype\");</br>"
    }
    if (areBothEqual(currentText, 'put')) {
        document.getElementById("_function_description").innerHTML = "Puts&#32;an&#32;entry&#32;(key-value)&#32;into&#32;the&#32;dictionary."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>put(Dictionary dictionaryIdentifier, String(or Integer, Float))key, &lt;DictionaryType&gt; value)</br><br/><b>Behavior/Example</b>:<br>1. Puts an entry (key-value pair) into the dictionary.\<br\/\>2. Dict(\"anytype\") supports multiple datatypes in one dictionary.\<br\/\>For example, \<br\/\>d = dict(\"string\");\<br\/\>put(d, \"key1\", \"testValue1\");\<br\/\>\<br\/\>For dict&lt;anytype&gt; : \<br\/\>d1 = dict(\"anytype\");\<br\/\>jObj = json(\"{\\\"K1\\\":\\\"V1\\\"}\");\<br\/\>put(d1, \"key1\",\"value1\");\<br\/\>put(d1, \"key2\", 10);\<br\/\>put(d1, \"key3\", jObj);\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'get')) {
        document.getElementById("_function_description").innerHTML = "Gets&#32;the&#32;value&#32;from&#32;the&#32;dictionary&#32;for&#32;the&#32;key&#32;provided."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>&lt;DictionaryType&gt; get(Dictionary dictionaryIdentifier, String(or Integer, Float)key) <br/> (or) <br/> &lt;valueType&gt; get(Dictionary dictionaryIdentifier, String(or Integer(or Float))key, String valueType)</br><br/><b>Behavior/Example</b>:<br>1. Gets the value from the dictionary for the key provided.\<br\/\>2. Get is also used to get the value of a field in a record.\<br\/\>3. For dict(\"anytype\") function the 3rd parameter is mandatory.\<br\/\>4. An error will be thrown if the value for the key is not of valueType datatype.\<br\/\>\<br\/\>For example of dictionary, \<br\/\>d = dict(\"string\");\<br\/\>put(d, \"key1\", \"testValue1\");\<br\/\>s = get(d, \"key1\");\<br\/\>\<br\/\>\<br\/\>For example on Record, \<br\/\>rows = bmql(\"select col...\");\<br\/\>for row in rows {\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;val = get(row, \"col\"); \/\/ returns value of \'col\' in that row\<br\/\>};\<br\/\>\<br\/\>For dict&lt;anytype&gt; : \<br\/\>d1 = dict(\"anytype\");\<br\/\>jObj = json(\"{\\\"K1\\\":\\\"V1\\\"}\");\<br\/\>put(d1, \"key1\",\"value1\");\<br\/\>put(d1, \"key2\", 10);\<br\/\>put(d1, \"key3\", jObj);\<br\/\>print(get(d1, \"key1\" , \"string\"));\<br\/\>\/\/Output : value1\<br\/\>print(get(d1, \"key3\" , \"string\"));\<br\/\>\/\/Error will be thrown as the value corresponding to key3 is of json type\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'containskey')) {
        document.getElementById("_function_description").innerHTML = "Dictionary&#32;lookup&#32;function&#32;-&#32;checks&#32;if&#32;the&#32;key&#32;is&#32;found&#32;in&#32;the&#32;dictionary."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean containskey(Dictionary dictionaryIdentifier, String(or Integer, Float)key)</br><br/><b>Behavior/Example</b>:<br>1. Checks if the key is found in the dictionary.\<br\/\>\<br\/\>2. If key is not found, false is returned, else returns true.\<br\/\>\<br\/\>For example, \<br\/\>d = dict(\"string\");\<br\/\>put(d, \"key1\", \"testValue1\");\<br\/\>bool1 = containskey(d, \"key1\");  \/\/returns true\<br\/\>bool2 = containskey(d, \"key2\");  \/\/returns false</br>"
    }
    if (areBothEqual(currentText, 'keys')) {
        document.getElementById("_function_description").innerHTML = "Gets&#32;the&#32;array&#32;of&#32;Strings&#32;of&#32;all&#32;the&#32;dictionary&#32;keys."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br><DictionaryType> keys(Dictionary dictionaryIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Gets the keys of all the entries in the Dictionary.\<br\/\>\<br\/\>2. All keys will be cast as a String and returned in an array in no particular order.\<br\/\>\<br\/\>For example,\<br\/\>d= dict(\"string\");\<br\/\>put(d, \"1\", \"string1\");\<br\/\>put(d, \"2\", \"string2\");\<br\/\>put(d, 1, \"string3\");\<br\/\>put(d, 2, \"string4\");\<br\/\>return keys(d);\<br\/\>This function will return a string array with 4 string elements.\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'values')) {
        document.getElementById("_function_description").innerHTML = "Gets&#32;the&#32;array&#32;of&#32;the&#32;values&#32;of&#32;all&#32;the&#32;dictionary&#32;entries."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br><DictionaryType> values(Dictionary dictionaryIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Gets the values of all the entries in the Dictionary.\<br\/\>\<br\/\>2. The dictionaries supported are: \<br\/\>\"string\", \"integer\", \"float\",\<br\/\>\"string[]\", \"integer[]\", \"float[]\",\<br\/\>\"date\", \"date[]\", \<br\/\>Note that double dimensional dictionaries and boolean dictionaries and dictionary anytype  are not supported by the values function.\<br\/\>\<br\/\>For example,\<br\/\>d= dict(\"string\");\<br\/\>put(d, \"key1\", \"string1\");\<br\/\>put(d, \"key2\", \"string2\");\<br\/\>return values(d);\<br\/\>This function will return a string array with 2 string elements.\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'applytemplate')) {
        document.getElementById("_function_description").innerHTML = "Applies&#32;Dictionary&#32;payload&#32;and&#32;JSON&#32;context&#32;to&#32;the&#32;template&#32;file,&#32;where&#32;JSON&#32;takes&#32;precedence&#32;over&#32;payload."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String applytemplate(String templateFileLocation [, Dictionary payload [, String defaultErrorMessage[, Json jsonIdentifier]]])</br><br/><b>Behavior/Example</b>:<br>This function will return a String that represents the result of applying a set of token key\/value pairs to the template file.\<br\/\>This set of token key\/value pairs can come from either an explicitly user defined map, JSON \<br\/\>or implicitly imported rule input variables from System, Main Document or Sub Document.\<br\/\>\<br\/\>Overwrite an imported rule input variable:\<br\/\>1. Overwrite globally - To overwrite an imported rule input variable,\<br\/\>   user can use the imported rule input variable name as the key in the user map.\<br\/\>   This value from the user map will be applied globally to either main document or sub document within the template.\<br\/\>2. Overwrite locally - To overwrite an imported rule input variable within a specific document,\<br\/\>   user can use a prefix of \"[documentNumber]~\" (e.g. 1~) on the imported rule input variable name as the key in the user map.\<br\/\>NOTE: Overwrite locally has higher precedence than overwrite globally.\<br\/\>\<br\/\>The tokens in the template file should start with &quot;{{&quot; and end with &quot;}}&quot; signs. \<br\/\>Below is the list of valid formats and features:\<br\/\>1. {{YOUR_TOKEN_HERE}} \<br\/\>   This token will be replaced by the string value \<br\/\>   defined by the key &quot;YOUR_TOKEN_HERE&quot; in the input payload dictionary\<br\/\>2. {{#each &lt;SubDocumentVariableName&gt;}} {{\/each}} \<br\/\>   Used for looping through the instances of a SubDocument. \<br\/\>   For example, the SubDocumentVariableName is &quot;lineItem&quot;, \<br\/\>   attributes &quot;_price_subtotal&quot; and &quot;_price_net_price&quot; of the lineItem \<br\/\>   had been manually imported as rule inputs in the BML scripts. \<br\/\>   To reference those attributes within the template, user can do: \<br\/\>   {{#each lineItem}}\<br\/\>      &lt;Line&gt;\<br\/\>         &lt;PriceSubTotal&gt;{{_price_subtotal}}&lt;\/PriceSubTotal&gt;\<br\/\>         &lt;PriceNetPrice&gt;{{_price_net_price}}&lt;\/PriceNetPrice&gt;\<br\/\>      &lt;\/Line&gt;\<br\/\>   {{\/each}}\<br\/\>3. {{#if YOUR_NOT_NULL_STRING_VALUE_HERE}} {{\/if}}\<br\/\>   Conditional statement. For example, given template \<br\/\>   &quot;{{#if _type}}&lt;Line&gt;&lt;PriceSubTotal&gt;{{_price_subtotal}}&lt;\/PriceSubTotal&gt;&lt;\/Line&gt;{{\/if}}&quot;:\<br\/\>   If variable &quot;_type&quot; contains value &quot;RECURRING&quot;, then above template will be rendered. \<br\/\>   If variable &quot;_type&quot; contains value &quot;&quot; or null, then nothing will be rendered for above template.\<br\/\>4. {{formatDateString context originalFormat newFormat}}\<br\/\>   Used to format context dateString from original format to the new format.\<br\/\>   Context: current date string. OriginalFormat: format used for current date string. \<br\/\>   NewFormat: the format the output use. Return: dateString using the new format. \<br\/\>   The format follows the \<br\/\>   &lt;a href=&quot;http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/text\/SimpleDateFormat.html&quot;&gt;java SimpleDateFormat patterns.&lt;\/a&gt;\<br\/\>5. {{#equal context compareTo}}{{else}}{{\/equal}}\<br\/\>   Equal block statement. If context equals to compareTo, then the template before the {{else}} will be rendered, otherwise the {{else}} will be rendered. \<br\/\>   For example, \"{{#equal price_type \"RECURRING\"}}&#60;recurringprice&#62;{{_recurringprice}}&#60;\/recurringprice&#62;{{else}}Price type is not recurring.{{\/equal}}\":\<br\/\>   If variable \"price_type\" is \"RECURRING\", then above template will be rendered as &#60;recurringprice&#62;34&#60;\/recurringprice&#62;.\<br\/\>   If variable \"price_type\" is not \"RECURRING\", then \"Price type is not recurring.\" will be rendered.\<br\/\>   NOTE: the {{else}} is optional.\<br\/\>\<br\/\>Other processing rules:\<br\/\>1. Input payload should contain value of type String for each key.\<br\/\>2. All the variable and token names are not case sensitive.\<br\/\>3. There must be token specified within the {{}}, or error message will be returned. \<br\/\>4. Token in the template should not contain &quot;~&quot; sign, or error message will be returned.\<br\/\>5. If there is a token specified within the {{}}, e.g. {{NO_TOKEN_VALUE_DEFINED}}, \<br\/\>   but no value is defined in both the input payload and the imported variables, nothing will be rendered for this token.\<br\/\>6. The returned error message is not translated.  \<br\/\>7. Special characters (e.g. &amp;) will not display correctly in the debugger.\<br\/\>8. JSON keys are case sensitive and should match with the template token case.\<br\/\>9. To override any of the system , Main Doc or Sub Document variables, Keys should be present as first level keys in JSON.\<br\/\>10. If LineItem (sub document variable Name) is overridden in JSON, then any of the sub document keys with or without TILDE will not have the significance.\<br\/\>11. Key with TILDE(~) in User Defined Map will be considered as priority over the same JSON key without TILDE.\<br\/\>\<br\/\>Example:\<br\/\>\<br\/\>(Template file test.txt content)\<br\/\>This is user defined variable VAR1, value = {{VAR1}}.\<br\/\>This is user defined variable VAR2, value = {{VAR2}}.\<br\/\>This is user defined variable VAR3, value = {{VAR3}}.\<br\/\>\<br\/\>(BML script)\<br\/\>templateFileLocation = &quot;$BASE_PATH$\/ApplytemplateTest\/test.txt&quot;;\<br\/\>payload = dict(&quot;string&quot;);\<br\/\>put(payload, &quot;VAR1&quot;, &quot;Hello world&quot;);\<br\/\>put(payload, \"VAR2\", \"Payload VAR2\");\<br\/\> jsonobj = json(\"{\\\"VAR2\\\":\\\"json var2 value\\\",\\\"VAR3\\\":\\\"json var3 value\\\"}\");\<br\/\>output = applytemplate(templateFileLocation, payload,\"\",jsonobj);\<br\/\>return output;\<br\/\>\<br\/\>(Result)\<br\/\>This is user defined variable VAR1, value = Hello world.\<br\/\>This is user defined variable VAR2, value = json var2 value.\<br\/\>This is user defined variable VAR3, value = json var3 value.\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'transformxml')) {
        document.getElementById("_function_description").innerHTML = "Transforms&#32;XML&#32;string&#32;with&#32;XSL&#32;file."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String transformxml(String xml, String xslFileLocation [, String defaultErrorMessage])</br><br/><b>Behavior/Example</b>:<br>The function transforms an XML based on the xslt in the file manager. \<br\>This function takes 3 arguments: \<br\/\>1. xml content - \<tt\>string\<\/tt\> \<br\/\>2. xslt file location - \<tt\>string\<\/tt\> \<br\/\>3. default error message - (optional) \<tt\>string\<\/tt\> \<br\/\> It returns the transformed xml message, or the error message if it failed to transform. The error message will be default error message if it is defined or the system generated error message which starts with \"ERROR: \".\<br\/\>Example: \<br\/\>xmlcontent = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;&lt;book\>&lt;id&gt;123456&lt;\/id&gt;&lt;\/book&gt;\";\<br\/\>xslt = \"xsl\/test.xsl\";\<br\/\>output = transformxml(xmlcontent, xslt); output has the generated result.</br>"
    }
    if (areBothEqual(currentText, 'readxmlsingle')) {
        document.getElementById("_function_description").innerHTML = "Reads&#32;a&#32;set&#32;of&#32;single&#32;XML&#32;node&#32;content&#32;based&#32;on&#32;a&#32;set&#32;of&#32;XPath&#32;expressions."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Dictionary readxmlsingle(String xmlPayload, String[] xpaths [, String defaultErrorMessage])</br><br/><b>Behavior/Example</b>:<br>This function will return a BMLDictionary where the String keys are the input xpaths and String values are the XPath evaluation results for the input xpaths.\<br\/\>This function will return a BMLDictionary that contains error message when there is any error occurred.  The key for the error message in the BMLDictionary is \"BM_READXMLSINGLE_ERROR\".\<br\/\>\<br\/\>Processing Rules:\<br\/\>1.   If a given XPath is evaluated as a single node in result, \<br\/\>     the returned String content is based on the node type and content:\<br\/\>     1.1. Result is an ATTRIBUTE_NODE - The ATTRIBUTE_NODE value is returned\<br\/\>     1.2. Result is a node that contains text content in its child nodes - \<br\/\>          The concatenated node values from TEXT nodes and CDATA nodes, \<br\/\>          if they contain not-empty text, is returned as the content of the node.\<br\/\>          NOTE: A node that contains white space only will be ignored.\<br\/\>          NOTE: EntityRef nodes are not processed due to DTD is not allowed.\<br\/\>          NOTE: Any element nodes in the sublist is ignored.\<br\/\>     1.3. Result is a node that does not contain text content in its child nodes - \<br\/\>          A String representation of the node (XML fragment) will be returned.\<br\/\>          NOTE: A node that contains white space only will be ignored.\<br\/\>2.   If a given XPath is evaluated as multiple ATTRIBUTE_NODE or ELEMENT_NODE in result, \<br\/\>     only the first node string content will be returned based on above String contents retrieving rules.\<br\/\>3.   To avoid abuse usage of the namespace prefix, the input argument xmlPayload should not contain \<br\/\>     namespace prefixes for more than 1000, or IllegalArgumentException will be returned.\<br\/\>4.   There are three ways to define namespaces in a document: \<br\/\>     Default namespaces, No namespace, and Namespaces with prefixes.\<br\/\>     4.1. If the input XML document contains default namespaces, \<br\/\>          but the default namespace is not on the root, \<br\/\>          then the element(s) in such default namespace will be ignored.\<br\/\>     4.2. If the input XML document contains default namespace that is on the root, \<br\/\>          then the input XPath for these default namespace elements should contain a namespace prefix &quot;BM_NS&quot;.  \<br\/\>          The returned evaluated result will contain the namespace attribute information if the return is a XML fragment.\<br\/\>     4.3. If the input XML document contains no namespaces, no namespace prefix is needed in the input XPath.\<br\/\>     4.4. If the input XML document contains namespaces with prefixes, namespace prefix is needed in the input XPath.  \<br\/\>          The returned evaluated result will contain the namespace attribute information if the return is a XML fragment.\<br\/\>5.   The returned error message is not translated.\<br\/\>\<br\/\>Example:\<br\/\>(BML script)\<br\/\>xmlPayload = &quot;&lt;?xml version=&#92;&quot;1.0&#92;&quot; encoding=&#92;&quot;UTF-8&#92;&quot;?&gt;&lt;library&gt;&lt;book lang=&#92;&quot;en&#92;&quot;&gt;Spring in Action&lt;\/book&gt;&lt;\/library&gt;&quot;;\<br\/\>xpaths = string[1];\<br\/\>xpaths[0] = &quot;\/library\/book[1]\/@lang&quot;;\<br\/\>output = readxmlsingle(xmlPayload, xpaths);\<br\/\>for xpath in xpaths\<br\/\>{ print(&quot;(key, value) = (&quot; + xpath + &quot;, &quot; + get(output, xpath) + &quot;)&quot;); }\<br\/\>return &quot;&quot;;\<br\/\>\<br\/\>(Output)\<br\/\>(key, value) = (\/library\/book[1]\/@lang, en)\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'readxmlmultiple')) {
        document.getElementById("_function_description").innerHTML = "Reads&#32;a&#32;set&#32;of&#32;multiple&#32;XML&#32;node&#32;contents&#32;based&#32;on&#32;a&#32;set&#32;of&#32;XPath&#32;expressions."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Dictionary readxmlmultiple(String xmlPayload, String[] xpaths [, String defaultErrorMessage])</br><br/><b>Behavior/Example</b>:<br>This function will return a BMLDictionary where the String keys are the input xpaths and String[] values are the XPath evaluation results for those input xpaths.\<br\/\>This function will return a BMLDictionary that contains error message when there is any error occurred.  The key for the error message in the BMLDictionary is \"BM_READXMLMULTIPLE_ERROR\".\<br\/\>Processing Rules:\<br\/\>1.   If a given XPath is evaluated as a single node in result, \<br\/\>     the returned String content is based on the node type and content:\<br\/\>     1.1. Result is an ATTRIBUTE_NODE - The ATTRIBUTE_NODE value is returned\<br\/\>     1.2. Result is a node that contains text content in its child nodes - \<br\/\>          The concatenated node values from TEXT nodes and CDATA nodes, \<br\/\>          if they contain not-empty text, is returned as the content of the node.\<br\/\>          NOTE: A node that contains white space only will be ignored.\<br\/\>          NOTE: EntityRef nodes are not processed due to DTD is not allowed.\<br\/\>          NOTE: Any element nodes in the sublist is ignored.\<br\/\>     1.3. Result is a node that does not contain text content in its child nodes - \<br\/\>          A String representation of the node (XML fragment) will be returned.\<br\/\>          NOTE: A node that contains white space only will be ignored.\<br\/\>2.   If a given XPath is evaluated as multiple ATTRIBUTE_NODE or ELEMENT_NODE in result, \<br\/\>     only the first node string content will be returned based on above String contents retrieving rules.\<br\/\>3.   To avoid abuse usage of the namespace prefix, the input argument xmlPayload should not contain \<br\/\>     namespace prefixes for more than 1000, or IllegalArgumentException will be returned.\<br\/\>4.   There are three ways to define namespaces in a document: \<br\/\>     Default namespaces, No namespace, and Namespaces with prefixes.\<br\/\>     4.1. If the input XML document contains default namespaces, \<br\/\>          but the default namespace is not on the root, \<br\/\>          then the element(s) in such default namespace will be ignored.\<br\/\>     4.2. If the input XML document contains default namespace that is on the root, \<br\/\>          then the input XPath for these default namespace elements should contain a namespace prefix &quot;BM_NS&quot;.  \<br\/\>          The returned evaluated result will contain the namespace attribute information if the return is a XML fragment.\<br\/\>     4.3. If the input XML document contains no namespaces, no namespace prefix is needed in the input XPath.\<br\/\>     4.4. If the input XML document contains namespaces with prefixes, namespace prefix is needed in the input XPath.  \<br\/\>          The returned evaluated result will contain the namespace attribute information if the return is a XML fragment.\<br\/\>5.   The returned error message is not translated.\<br\/\>\<br\/\>Example:\<br\/\>(BML script)\<br\/\>xmlPayload = &quot;&lt;?xml version=&#92;&quot;1.0&#92;&quot; encoding=&#92;&quot;UTF-8&#92;&quot;?&gt;&lt;library&gt;&lt;book lang=&#92;&quot;en&#92;&quot;&gt;Spring in Action&lt;\/book&gt;&lt;book lang=&#92;&quot;fr&#92;&quot;&gt;J2EE Blueprint&lt;\/book&gt;&lt;\/library&gt;&quot;;\<br\/\>xpaths = string[1];\<br\/\>xpaths[0] = &quot;\/library\/book\/@lang&quot;;\<br\/\>output = readxmlmultiple(xmlPayload, xpaths);\<br\/\>for xpath in xpaths {\<br\/\>print(&quot;(key) = (&quot; + xpath + &quot;)&quot;);\<br\/\>values = string[1];\<br\/\>values = get(output, xpath);\<br\/\>for value in values\<br\/\>{ print(&quot; (value) = (&quot; + value + &quot;)&quot;); }\<br\/\>}\<br\/\>return &quot;&quot;;\<br\/\>\<br\/\>(Output)\<br\/\>(key) = (\/library\/book\/@lang)\<br\/\>(value) = (en)\<br\/\>(value) = (fr)\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'json')) {
        document.getElementById("_function_description").innerHTML = "Creates&#32;a&#32;JSON&#32;object."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Json json([String jsonFormatStr])</br><br/><b>Behavior/Example</b>:<br>1. Creates a JSON object from a given JSON formatted string. \<br\/\>\<br\/\>2. An empty JSON object is created if parameters are not provided. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>jsonObj1 = json(\"{\\\"key1\\\":\\\"value1\\\"}\"); \<br\/\>print jsonObj1; \<br\/\>\/\/Output: {\"key1\":\"value1\"} \<br\/\>\<br\/\>jsonObj2 = json(); \<br\/\>print jsonObj2; \<br\/\>\/\/Output: {} \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonarray')) {
        document.getElementById("_function_description").innerHTML = "Creates&#32;a&#32;JSON&#32;array&#32;object."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>JsonArray jsonarray([String jsonArrStr])</br><br/><b>Behavior/Example</b>:<br>1. Creates a JSON array object from a given JSON array formatted string. \<br\/\>\<br\/\>2. An empty JSON array object is created if parameters are not provided \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"[1,\\\"val1\\\",{\\\"key1\\\":10,\\\"key2\\\":\\\"val2\\\"}]\"; \<br\/\>jsonArrObj1 = jsonarray(str); \<br\/\>print jsonArrObj1; \<br\/\>\/\/Output: [1,\"val1\",{\"key1\":10,\"key2\":\"val2\"}] \<br\/\>\<br\/\>jsonArrobj2 = jsonarray(); \<br\/\>print jsonArrObj2; \<br\/\>\/\/Output: [] \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonnull')) {
        document.getElementById("_function_description").innerHTML = "Creates&#32;a&#32;null&#32;JSON&#32;object&#32;instance."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>JsonNull jsonnull()</br><br/><b>Behavior/Example</b>:<br>1. Creates a null JSON object instance, which represents null in a JSON string. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>jnull = jsonnull();\<br\/\>print jnull;\<br\/\>\/\/Output: null \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonkeys')) {
        document.getElementById("_function_description").innerHTML = "Retrieves&#32;first-level&#32;keys&#32;from&#32;a&#32;JSON&#32;object&#32;and&#32;returns&#32;them&#32;in&#32;a&#32;string&#32;array."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String[] jsonkeys(Json jsonIdentifier [, Boolean ignoreNullValues])</br><br/><b>Behavior/Example</b>:<br>1. Retrieves the first-level keys from a JSON object and returns them in a string array. \<br\/\>\<br\/\>2. The ignoreNullValues parameter is optional and its default value is false. \<br\/\>\<br\/\>3. Null value keys are ignored if the ignoreNullValues parameter is true. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"key1\\\":\\\"mystring\\\",\\\"key2\\\":10,\\\"key3\\\":2.9,\\\"key4\\\":[\\\"v1\\\",\\\"v2\\\"],\\\"key5\\\":null}\"; \<br\/\>jsonObj = json(str); \<br\/\>\<br\/\>strArr1 = jsonkeys(jsonObj); \<br\/\>print strArr1; \<br\/\>\/\/Output: [key1,key2,key3,key4,key5] \<br\/\>\<br\/\>strArr2 = jsonkeys(jsonObj,true); \<br\/\>print strArr2; \<br\/\>\/\/Output: [key1,key2,key3,key4] \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsontostr')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;a&#32;JSON&#32;object&#32;into&#32;a&#32;JSON&#32;formatted&#32;string."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String jsontostr(Json jsonIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Converts a JSON object into a JSON formatted string. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"key1\\\":\\\"mystring\\\",\\\"key2\\\":10,\\\"key3\\\":2.9,\\\"key4\\\":[\\\"v1\\\",\\\"v2\\\"],\\\"key5\\\":true}\"; \<br\/\>jsonObj = json(str); \<br\/\>\<br\/\>jsonStr = jsontostr(jsonObj); \<br\/\>print jsonStr; \<br\/\>\/\/Output: {\"key1\":\"mystring\",\"key2\":10,\"key3\":2.9,\"key4\":[\"v1\",\"v2\"],\"key5\":true} \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonget')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;JSON&#32;object&#32;value&#32;for&#32;a&#32;given&#32;key."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>&lt;ValueType&gt; jsonget(Json jsonIdentifier, String key [, String valueType [, &lt;ValueType&gt; defaultValue]])</br><br/><b>Behavior/Example</b>:<br>1. Returns the value from a JSON object for the given key. \<br\/\>\<br\/\>2. The valueType and defaultValue parameters are optional. \<br\/\>\<br\/\>3. The returned value is converted to a data type equal to the valueType parameter, which is String by default. \<br\/\>\<br\/\>4. The defaultValue parameter is returned if the given key is not available. \<br\/\>\<br\/\>5. null is returned if: the given key is not available AND valueType is String, JSON, or JSON array AND defaultValue is not provided. \<br\/\>\<br\/\>6. An error is thrown if: \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;(a) the returned value could not be converted to the data type of valueType. \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;(b) the defaultValue parameter\'s data type is not the same as valueType parameter. \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;(c) the given key is not available AND valueType is Integer, Float, or Boolean AND defaultValue is not provided. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"key1\\\":\\\"mystring\\\",\\\"key2\\\": 10,\\\"key3\\\":2.9,\\\"key4\\\":[\\\"v1\\\",\\\"v2\\\"],\\\"key5\\\":true,\\\"key6\\\":{\\\"key7\\\":\\\"val7\\\",\\\"key8\\\":\\\"val8\\\"}}\"; \<br\/\>jsonObj = json(str); \<br\/\>\<br\/\>\/* Get string (two parameters) *\/ \<br\/\>valStr1 = jsonget(jsonObj,\"key2\"); \<br\/\>print valStr1;\<br\/\>\/\/Output: 10 \<br\/\>\<br\/\>\/* Get string (three parameters) *\/ \<br\/\>valStr2 = jsonget(jsonObj,\"key1\",\"string\"); \<br\/\>print valStr2; \<br\/\>\/\/Output: mystring \<br\/\>\<br\/\>\/* Get integer *\/ \<br\/\>valInt = jsonget(jsonObj,\"key2\",\"integer\"); \<br\/\>print valInt;\<br\/\>\/\/Output: 10 \<br\/\>\<br\/\>\/* Get float *\/ \<br\/\>valFloat = jsonget(jsonObj,\"key3\",\"float\"); \<br\/\>print valFloat; \<br\/\>\/\/Output: 2.9 \<br\/\>\<br\/\>\/* Get boolean *\/ \<br\/\>valBoolean = jsonget(jsonObj,\"key5\",\"boolean\");\<br\/\>print valBoolean;\<br\/\>\/\/Output: true \<br\/\>\<br\/\>\/* Get jsonarray *\/ \<br\/\>valJsonArray = jsonget(jsonObj,\"key4\",\"jsonarray\");\<br\/\>print valJsonArray;\<br\/\>\/\/Output: [\"v1\",\"v2\"]\<br\/\>\<br\/\>\/* Get json *\/ \<br\/\>valJson = jsonget(jsonObj,\"key6\",\"json\");\<br\/\>print valJson;\<br\/\>\/\/Output: {\"key7\":\"val7\",\"key8\":\"val8\"} \<br\/\>\<br\/\>\/* Get default value *\/ \<br\/\>defaultVal1 = jsonget(jsonObj,\"key10\",\"string\",\"defaultValue\");\<br\/\>print defaultVal1;\<br\/\>\/\/Output: defaultValue \<br\/\>\<br\/\>\/* Get default value *\/ \<br\/\>defaultVal2 = jsonget(jsonObj,\"key10\",\"string\");\<br\/\>print defaultVal2;\<br\/\>\/\/Output: null \<br\/\>\<br\/\>\/* Get default value *\/ \<br\/\>defaultVal3 = jsonget(jsonObj,\"key10\",\"integer\");\<br\/\>print defaultVal3;\<br\/\>\/\/An error is thrown because key10 is not found and the type is integer. \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonput')) {
        document.getElementById("_function_description").innerHTML = "Inserts&#32;or&#32;updates&#32;a&#32;key-value&#32;entry&#32;in&#32;a&#32;JSON&#32;object&#32;and&#32;returns&#32;the&#32;inserted/updated&#32;value."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>&lt;ValueType&gt; jsonput(Json jsonIdentifier, String key, &lt;ValueType&gt; value)</br><br/><b>Behavior/Example</b>:<br>1. Inserts a new key-value entry into a JSON object. \<br\/\>\<br\/\>2. If the given key already exists in the JSON object, its corresponding value will be updated to the given value. \<br\/\>\<br\/\>3. The inserted\/updated value is returned.\<br\/\>Example: \<br\/\>\<br\/\>jsonObj = json();\<br\/\>\<br\/\>putStrVal = jsonput(jsonObj,\"key1\",\"mystring\"); \<br\/\>print putStrVal; \<br\/\>\/\/Output: mystring \<br\/\>\<br\/\>putIntVal = jsonput(jsonObj,\"key2\",10); \<br\/\>print putIntVal; \<br\/\>\/\/Output: 10 \<br\/\>\<br\/\>putFloatVal = jsonput(jsonObj,\"key3\",2.9); \<br\/\>print putFloatVal; \<br\/\>\/\/Output: 2.9\<br\/\>\<br\/\>jsonArrObj = jsonarray(\"[\\\"v1\\\",\\\"v2\\\"]\");\<br\/\>putArrVal = jsonput(jsonObj,\"key4\",jsonArrObj); \<br\/\>print putArrVal; \<br\/\>\/\/Output: [\"v1\",\"v2\"] \<br\/\>\<br\/\>putBooleanVal = jsonput(jsonObj,\"key5\",true); \<br\/\>print putBooleanVal; \<br\/\>\/\/Output: true \<br\/\>\<br\/\>putNullVal = jsonput(jsonObj,\"key6\",jsonnull()); \<br\/\>print putNullVal; \<br\/\>\/\/Output: null \<br\/\>\<br\/\>jsonStr = jsontostr(jsonObj); \<br\/\>print jsonStr; \<br\/\>\/\/Output: {\"key1\":\"mystring\",\"key2\":10,\"key3\":2.9,\"key4\":[\"v1\",\"v2\"],\"key5\":true,\"key6\":null} \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonremove')) {
        document.getElementById("_function_description").innerHTML = "Removes&#32;the&#32;first-level&#32;key-value&#32;entry&#32;from&#32;a&#32;JSON&#32;object&#32;for&#32;the&#32;given&#32;key&#32;and&#32;returns&#32;a&#32;boolean&#32;value."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean jsonremove(Json jsonIdentifier, String key)</br><br/><b>Behavior/Example</b>:<br>1. Removes the first-level key-value entry from a JSON object for the given key. \<br\/\>\<br\/\>2. true is returned if the key-value entry is successfully removed. \<br\/\>\<br\/\>3. false is returned if the given key is not found. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"a\\\":1,\\\"b\\\":\\\"test\\\"}\"; \<br\/\>jsonObj = json(str); \<br\/\>\<br\/\>remVal = jsonremove(jsonObj,\"a\"); \<br\/\>print remVal; \<br\/\>\/\/Output: true \<br\/\>\<br\/\>print jsonObj; \<br\/\>\/\/Output: {\"b\":\"test\"} \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'isjsonnull')) {
        document.getElementById("_function_description").innerHTML = "Checks&#32;for&#32;null&#32;values&#32;in&#32;a&#32;JSON&#32;or&#32;JSON&#32;array&#32;object&#32;and&#32;returns&#32;a&#32;boolean&#32;value."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean isjsonnull(Json jsonIdentifier, String key (or JsonArray jsonArrayIdentifier, Integer index))</br><br/><b>Behavior/Example</b>:<br>1. Checks for null values in a JSON or JSON array object. \<br\/\>\<br\/\>2. true is returned if a null value is found. \<br\/\>\<br\/\>3. false is returned if a null value is not found. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str1 = \"{\\\"key1\\\":null,\\\"key2\\\":\\\"str\\\",\\\"key3\\\":90}\"; \<br\/\>jsonObj = json(str1); \<br\/\>\<br\/\>valBoolean1 = isjsonnull(jsonObj,\"key1\"); \<br\/\>print valBoolean1; \<br\/\>\/\/Output: true \<br\/\>\<br\/\>str2 = \"[null,false,45,\\\"str\\\"]\"; \<br\/\>jsonArrObj = jsonarray(str2); \<br\/\>valBoolean2 = isjsonnull(jsonArrObj,0); \<br\/\>print valBoolean2; \<br\/\>\/\/Output: true \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonarraytostr')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;a&#32;JSON&#32;array&#32;object&#32;into&#32;a&#32;JSON&#32;array&#32;formatted&#32;string."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String jsonarraytostr(JsonArray jsonArrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Converts a JSON array object into a JSON array formatted string. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"[1,\\\"2\\\",{\\\"key1\\\":10,\\\"key2\\\":\\\"val\\\"}]\"; \<br\/\>jsonArrObj = jsonarray(str); \<br\/\>\<br\/\>valStr = jsonarraytostr(jsonArrObj); \<br\/\>print valStr; \<br\/\>\/\/Output: [1,\"2\",{\"key1\":10,\"key2\":\"val\"}] \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonarrayget')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;JSON&#32;array&#32;object&#32;value&#32;at&#32;a&#32;given&#32;index."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>&lt;ValueType&gt; jsonarrayget(JsonArray jsonArrayIdentifier, Integer index [, String valueType])</br><br/><b>Behavior/Example</b>:<br>1. Returns the value from a JSON array object at a given index. \<br\/\>\<br\/\>2. The valueType parameter is optional. \<br\/\>\<br\/\>3. The returned value is converted to a data type equal to the valueType parameter, which is String by default. \<br\/\>\<br\/\>4. An error is thrown if: \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;(a) the given index is not available. \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;(b) the returned value could not be converted to the data type of valueType. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"[\\\"mystring\\\",10,2.9,[\\\"v1\\\",\\\"v2\\\"],true,{\\\"key7\\\":\\\"val7\\\",\\\"key8\\\":\\\"val8\\\"}]\"; \<br\/\>jsonArrObj = jsonarray(str); \<br\/\>\<br\/\>\/* Get string (two parameters) *\/ \<br\/\>valStr1 = jsonarrayget(jsonArrObj,0);\<br\/\>print valStr1; \<br\/\>\/\/Output: mystring \<br\/\>\<br\/\>\/* Get string (three parameters) *\/ \<br\/\>valStr2 = jsonarrayget(jsonArrObj,0,\"string\"); \<br\/\>print valStr2; \<br\/\>\/\/Output: mystring \<br\/\>\<br\/\>\/* Get integer *\/ \<br\/\>valInt = jsonarrayget(jsonArrObj,1,\"integer\"); \<br\/\>print valInt; \<br\/\>\/\/Output: 10 \<br\/\>\<br\/\>\/* Get float *\/ \<br\/\>valFloat = jsonarrayget(jsonArrObj,2,\"float\"); \<br\/\>print valfloat; \<br\/\>\/\/Output: 2.9 \<br\/\>\<br\/\>\/* Get boolean *\/ \<br\/\>valBool = jsonarrayget(jsonArrObj,4,\"boolean\"); \<br\/\>print valBool; \<br\/\>\/\/Output: true \<br\/\>\<br\/\>\/* Get jsonarray *\/ \<br\/\>valJsonArr = jsonarrayget(jsonArrObj,3,\"jsonarray\"); \<br\/\>print valJsonArr; \<br\/\>\/\/Output: [\"v1\",\"v2\"] \<br\/\>\<br\/\>\/* Get json *\/ \<br\/\>valJson = jsonarrayget(jsonArrObj,5,\"json\"); \<br\/\>print valJson; \<br\/\>\/\/Output: {\"key7\":\"val7\",\"key8\":\"val8\"} \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonarraysize')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;size&#32;of&#32;a&#32;JSON&#32;array."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer jsonarraysize(JsonArray jsonarrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Returns the size of a JSON array. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>jsonArrObj1 = jsonarray(); \<br\/\>\<br\/\>arraySize1 = jsonarraysize(jsonArrObj1); \<br\/\>print arraySize1; \<br\/\>\/\/Output: 0 \<br\/\>\<br\/\>str = \"[1,\\\"2\\\",{\\\"key1\\\":10,\\\"key2\\\":\\\"val\\\"}]\"; \<br\/\>jsonArrObj2 = jsonarray(str); \<br\/\>\<br\/\>arraySize2 = jsonarraysize(jsonArrObj2); \<br\/\>print arraySize2; \<br\/\>\/\/Output: 3 \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonarrayappend')) {
        document.getElementById("_function_description").innerHTML = "Appends&#32;a&#32;value&#32;to&#32;the&#32;end&#32;of&#32;a&#32;JSON&#32;array."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>&lt;ValueType&gt; jsonarrayappend(JsonArray jsonarrayIdentifier, &lt;ValueType&gt; value)</br><br/><b>Behavior/Example</b>:<br>1. Appends a given value to the end of a JSON array. \<br\/\>\<br\/\>2. The appended value is returned. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>jsonArrObj = jsonarray(); \<br\/\>\<br\/\>appIntVal = jsonarrayappend(jsonArrObj,1); \<br\/\>print appIntVal; \<br\/\>\/\/Output: 1 \<br\/\>\<br\/\>appStrVal = jsonarrayappend(jsonArrObj,\"str\"); \<br\/\>print appStrVal; \<br\/\>\/\/Output: str \<br\/\>\<br\/\>print jsonArrObj; \<br\/\>\/\/Output: [1,\"str\"] \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonarrayremove')) {
        document.getElementById("_function_description").innerHTML = "Removes&#32;an&#32;object&#32;from&#32;a&#32;JSON&#32;array&#32;object&#32;at&#32;the&#32;given&#32;index&#32;and&#32;returns&#32;the&#32;size&#32;of&#32;the&#32;updated&#32;array&#32;object."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer jsonarrayremove(JsonArray jsonArrayIdentifier, Integer index)</br><br/><b>Behavior/Example</b>:<br>1. Removes an object from a JSON array object at the given index. \<br\/\>\<br\/\>2. The size of the array object after the object is removed is returned. \<br\/\>\<br\/\>3. An error is thrown if the given index is not available. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"[1,\\\"2\\\",{\\\"key1\\\":10,\\\"key2\\\":\\\"val\\\"}]\"; \<br\/\>jsonArrObj = jsonarray(str); \<br\/\>\<br\/\>remVal = jsonarrayremove(jsonArrObj,2); \<br\/\>print remVal; \<br\/\>\/\/Output: 2 \<br\/\>\<br\/\>print jsonArrObj; \<br\/\>\/\/Output: [1,\"2\"] \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonpathremove')) {
        document.getElementById("_function_description").innerHTML = "Removes&#32;the&#32;value(s)/object(s)&#32;corresponding&#32;to&#32;a&#32;given&#32;JSON&#32;path&#32;from&#32;a&#32;JSON&#32;object&#32;and&#32;returns&#32;a&#32;boolean&#32;value."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean jsonpathremove(Json jsonIdentifier, String jsonPath)</br><br/><b>Behavior/Example</b>:<br>1. Removes the value(s)\/object(s) from a JSON object corresponding to a given JSON path. \<br\/\>\<br\/\>2. true is returned if the node(s) corresponding to the given path is successfully removed. \<br\/\>\<br\/\>3. false is returned if a node corresponding to the given path could not be found. \<br\/\>\<br\/\>4. If there are multiple JSON path nodes corresponding to the given path, all corresponding nodes are removed. \<br\/\>\<br\/\>5. An exception is thrown if the JSON path syntax is not correct. \<br\/\>\<br\/\>6. Because this function supports object references, caution is recommended while removing objects (JSON, JSON array). \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"key1\\\":null,\\\"key2\\\":\\\"str\\\",\\\"key3\\\":90}\"; \<br\/\>jsonObj = json(str); \<br\/\>\<br\/\>remVal1 = jsonpathremove(jsonObj,\"$..key1\"); \<br\/\>print remVal1; \<br\/\>\/\/Output: true \<br\/\>\<br\/\>print jsonObj; \<br\/\>\/\/Output: {\"key2\":\"str\",\"key3\":90} \<br\/\>\<br\/\>remVal2 = jsonpathremove(jsonObj,\"$..key999\"); \<br\/\>print remVal2; \<br\/\>\/\/Output: false \<br\/\>\<br\/\>print jsonObj; \<br\/\>\/\/Output: {\"key2\":\"str\",\"key3\":90} \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonpathgetsingle')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;value&#32;corresponding&#32;to&#32;a&#32;given&#32;JSON&#32;path&#32;from&#32;a&#32;JSON&#32;object."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>&lt;ValueType&gt; jsonpathgetsingle(Json jsonIdentifier, String jsonPath [, String valueType [, &lt;ValueType&gt; defaultValue]])</br><br/><b>Behavior/Example</b>:<br>1. Returns the value from a JSON object corresponding to a given JSON path. \<br\/\>\<br\/\>2. The valueType and defaultValue parameters are optional. \<br\/\>\<br\/\>3. The returned value is converted to a data type equal to the valueType parameter, which is String by default. \<br\/\>\<br\/\>4. The defaultValue parameter is returned if the given JSON path is not found. \<br\/\>\<br\/\>5. null is returned if: the given JSON path is not found AND valueType is String, JSON, or JSON array AND defaultValue is not provided. \<br\/\>\<br\/\>6. An error is thrown if: \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;(a) there are multiple values corresponding to the given JSON path. \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;(a) the returned value could not be converted to the data type of valueType. \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;(b) the defaultValue parameter\'s data type is not the same as valueType parameter. \<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;(c) the given JSON path is not found AND valueType is Integer, Float, or Boolean AND defaultValue is not provided. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"store\\\":{\\\"book\\\":[{\\\"category\\\":\\\"reference\\\",\\\"author\\\":\\\"Nigel Rees\\\"},{\\\"category\\\":\\\"fiction\\\",\\\"author\\\":\\\"Evelyn Waugh\\\"}]},\\\"expensive\\\":10}\"; \<br\/\>jsonObj = json(str); \<br\/\>\<br\/\>catArray = jsonpathgetsingle(jsonObj,\"$.store.book[0]\"); \<br\/\>print catArray; \<br\/\>\/\/Output: {\"category\":\"reference\",\"author\":\"Nigel Rees\"} \<br\/\>\<br\/\>expenseInt = jsonpathgetsingle(jsonObj,\"$.expensive\",\"integer\"); \<br\/\>print expenseInt; \<br\/\>\/\/Output: 10 \<br\/\>\<br\/\>expenseStr = jsonpathgetsingle(jsonObj,\"$.expensive\",\"string\"); \<br\/\>print expenseStr; \<br\/\>\/\/Output: 10 \<br\/\>\<br\/\>title = jsonpathgetsingle(jsonObj,\"$.store.book[0].title\",\"string\"); \<br\/\>print title; \<br\/\>\/\/Output: null \<br\/\>\<br\/\>price = jsonpathgetsingle(jsonObj,\"$.store.book[0].price\",\"float\"); \<br\/\>print price; \<br\/\>\/\/An error is thrown because the JSON path is not found and valueType is float. \<br\/\>\<br\/\>firstBook = jsonpathgetsingle(jsonObj,\"$.store.book[0]\",\"json\"); \<br\/\>print firstBook; \<\/br\>\/\/Output: {\"category\":\"reference\",\"author\":\"Nigel Rees\"} \<br\/\>\<br\/\>defaultVal1 = jsonpathgetsingle(jsonObj,\"$.store.book[100]\",\"json\",json()); \<br\/\>print defaultVal1; \<br\/\>\/\/Output: {} \<br\/\>\<br\/\>defaultVal2 = jsonpathgetsingle(jsonObj,\"$.store.book[0].location\",\"string\",\"unknown\"); \<br\/\>print defaultVal2; \<br\/\>\/\/Output: unknown \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsoncopy')) {
        document.getElementById("_function_description").innerHTML = "Creates&#32;a&#32;copy&#32;of&#32;a&#32;JSON&#32;object."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Json jsoncopy(Json jsonIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Creates a copy of a JSON object. \<br\/\>\<br\/\>2. All child nodes of the JSON object are copied and a similar hierarchy is created. \<br\/\>\<br\/\>3. Any changes made to the original JSON object will not impact the copied JSON object. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"key1\\\":null,\\\"key2\\\":\\\"str\\\",\\\"key3\\\":90}\"; \<br\/\>jsonObj = json(str); \<br\/\>\<br\/\>copyObj = jsoncopy(jsonObj); \<br\/\>print copyObj; \<br\/\>\/\/Output: {\"key1\":null,\"key2\":\"str\",\"key3\":90} \<br\/\>\<br\/\>jsonremove(jsonObj,\"key1\"); \<br\/\>print jsonObj; \<br\/\>\/\/Output: {\"key2\":\"str\",\"key3\":90} \<br\/\>\<br\/\>print copyObj;\<br\/\>\/\/Output: {\"key1\":null,\"key2\":\"str\",\"key3\":90} \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonarraycopy')) {
        document.getElementById("_function_description").innerHTML = "Creates&#32;a&#32;copy&#32;of&#32;a&#32;JSON&#32;array&#32;object."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>JsonArray jsonarraycopy(JsonArray jsonArrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Creates a copy of a JSON array object. \<br\/\>\<br\/\>2. All objects in the array are copied and a similar hierarchy is created. \<br\/\>\<br\/\>3. Any changes made to the original JSON array object will not impact the copied JSON array object. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"[\\\"string\\\",1,2.3,{\\\"key1\\\":\\\"val1\\\"},[1,2,3],true,false]\"; \<br\/\>jsonArrObj = jsonarray(str); \<br\/\>\<br\/\>copyObj = jsonarraycopy(jsonArrObj); \<br\/\>print copyObj;\<br\/\>\/\/Output: [\"string\",1,2.3,{\"key1\":\"val1\"},[1,2,3],true,false] \<br\/\>\<br\/\>jsonarrayappend(jsonArrObj,\"simple\"); \<br\/\>jsonarrayremove(jsonArrObj,0); \<br\/\>print jsonArrObj; \<br\/\>\/\/Output: [1,2.3,{\"key1\":\"val1\"},[1,2,3],true,false,\"simple\"] \<br\/\>\<br\/\>print copyObj; \<br\/\>\/\/Output: [\"string\",1,2.3,{\"key1\":\"val1\"},[1,2,3],true,false] \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonpathcheck')) {
        document.getElementById("_function_description").innerHTML = "Checks&#32;if&#32;a&#32;JSON&#32;path&#32;is&#32;found&#32;in&#32;a&#32;JSON&#32;object&#32;and&#32;returns&#32;a&#32;boolean&#32;value."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean jsonpathcheck(Json jsonIdentifier, String jsonPath)</br><br/><b>Behavior/Example</b>:<br>1. Checks if a JSON path is found in a JSON object. \<br\/\>\<br\/\>2. true is returned if the JSON path is found. \<br\/\>\<br\/\>3. false is returned if the JSON path is not found or if the JSON object is null. \<br\/\>\<br\/\>4. An error is thrown if the JSON path is invalid. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"store\\\":{\\\"book\\\":[{\\\"category\\\":\\\"reference\\\",\\\"author\\\":\\\"Nigel Rees\\\"},{\\\"category\\\":\\\"fiction\\\",\\\"author\\\":\\\"Evelyn Waugh\\\"}]},\\\"expensive\\\":10}\"; \<br\/\>jsonObj = json(str); \<br\/\>\<br\/\>isCatFound = jsonpathcheck(jsonObj,\"$.store.book[0].category\"); \<br\/\>print isCatFound; \<br\/\>\/\/Output: true \<br\/\>\<br\/\>isExpFound = jsonpathcheck(jsonObj,\"$..expensive\"); \<br\/\>print isExpFound; \<br\/\>\/\/Output: true \<br\/\>\<br\/\>isPriceFound = jsonpathcheck(jsonObj,\"$..price\"); \<br\/\>print isPriceFound; \<br\/\>\/\/Output: false \<br\/\>\<br\/\>jsonpathcheck(jsonObj,\"...\"); \<br\/\>\/\/An error is thrown because the JSON path is invalid. \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonpathset')) {
        document.getElementById("_function_description").innerHTML = "Updates&#32;all&#32;nodes&#32;corresponding&#32;to&#32;a&#32;given&#32;JSON&#32;path&#32;in&#32;a&#32;JSON&#32;object&#32;with&#32;a&#32;value&#32;and&#32;returns&#32;a&#32;string&#32;array&#32;of&#32;the&#32;nodes&#32;that&#32;were&#32;updated."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String[] jsonpathset(Json jsonIdentifier, String jsonPath, &lt;ValueType&gt; value)</br><br/><b>Behavior/Example</b>:<br>1. Updates all nodes corresponding to a given JSON path in a JSON object with a value. \<br\/\>\<br\/\>2. A string containing all updated absolute\/normalized JSON path nodes is returned. \<br\/\>\<br\/\>3. An empty string array is returned if a node corresponding to the JSON path is not found. \<br\/\>\<br\/\>4. null is returned if the object at the JSON path node is null or the JSON path is invalid. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"key1\\\":90,\\\"key2\\\":[{\\\"key1\\\":900}],\\\"key3\\\":{\\\"key1\\\":9000}}\"; \<br\/\>jsonObj1 = json(str); \<br\/\>jsonObj2 = json(\"{\\\"key1\\\":89}\"); \<br\/\>jsonObj3 = json(\"{\\\"key2\\\":\\\"val2\\\"}\"); \<br\/\>jsonObj4 = json(\"{\\\"key1\\\":89}\"); \<br\/\>\<br\/\>jsonPath1 = jsonpathset(jsonObj1,\"$..key1\",true); \<br\/\>print jsonPath1; \<br\/\>\/\/Output: [$[\'key1\'],$[\'key2\'][0][\'key1\'],$[\'key3\'][\'key1\']] \<br\/\>\<br\/\>print jsonObj1; \<br\/\>\/\/Output: {\"key1\":true,\"key2\":[{\"key1\":true}],\"key3\":{\"key1\":true}} \<br\/\>\<br\/\>jsonPath2 = jsonpathset(jsonObj2,\"$..key1\",jsonObj3); \<br\/\>print jsonPath2; \<br\/\>\/\/Output: [$[\'key1\']] \<br\/\>\<br\/\>print jsonObj2; \<br\/\>\/\/Output: {\"key1\":{\"key2\":\"val2\"}} \<br\/\>\<br\/\>jsonput(jsonObj3,\"key3\",\"val2\"); \<br\/\>print jsonObj3; \<br\/\>\/\/Output: {\"key2\":\"val2\",\"key3\":\"val2\"} \<br\/\>\<br\/\>jsonPath3 = jsonpathset(jsonObj4,\"$..key3\",jsonObj3); \<br\/\>print jsonPath3; \<br\/\>\/\/Output: [] \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonpathgetmultiple')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;value(s)/path(s)&#32;corresponding&#32;to&#32;a&#32;given&#32;JSON&#32;path&#32;from&#32;a&#32;JSON&#32;object."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>JsonArray jsonpathgetmultiple(Json jsonIdentifier, String jsonPath [, Boolean asPath])</br><br/><b>Behavior/Example</b>:<br>1. Returns the value(s)\/path(s) from a JSON object corresponding to a given JSON path. \<br\/\>\<br\/\>2. The asPath parameter is optional and its default value is false. \<br\/\>\<br\/\>3. A JSON array containing all object values corresponding to the given JSON path is returned if the asPath parameter is false. \<br\/\>\<br\/\>4. A JSON array containing all nodes corresponding to the give JSON path is returned if the asPath parameter is true. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>str = \"{\\\"key1\\\":90,\\\"key2\\\":[{\\\"key1\\\":900}],\\\"key3\\\":{\\\"key1\\\":9000}}\"; \<br\/\>jsonObj = json(str); \<br\/\>\<br\/\>arrayVals = jsonpathgetmultiple(jsonObj,\"$..key1\"); \<br\/\>print arrayVals; \<br\/\>\/\/Output: [90,900,9000] \<br\/\>\<br\/\>pathVals = jsonpathgetmultiple(jsonObj,\"$..key1\",true); \<br\/\>print pathVals; \<br\/\> \/\/Output: [\"$[\'key1\']\",\"$[\'key2\'][0][\'key1\']\",\"$[\'key3\'][\'key1\']\"] \<br\/\> \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'jsonarrayrefid')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;unique&#32;reference&#32;ID&#32;that&#32;represents&#32;the&#32;input&#32;JSON&#32;array."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String jsonarrayrefid(JsonArray jsonArrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>1. Can only be invoked by Commerce advanced modify, auto update or advanced default functions. \<br\/\>2. Provides a more efficient method to pass a JSON array to the BML output to update an array set. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>\/\/ feeJsonArray is a JSON array \<br\/\>\/\/ feeArraySet is the main doc array set variable name \<br\/\>\/\/ To update feeArraySet, jsonarrayrefid is more efficient than jsonarraytostr when the JSON array is large \<br\/\>\/\/ return \"1~feeArraySet~\" + jsonarraytostr(feeJsonArray); \<br\/\>return \"1~feeArraySet~\" + jsonarrayrefid(feeJsonArray); \<br\/\>\<br\/\>3. When jsonarrayrefid is not used in the return statement of the BML, be aware that the reference ID refers to the JSON array by reference. As a result, any subsequent changes made to the JSON array are included. \<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>result = \"1~feeArraySet~\" + jsonarrayrefid(feeJsonArray); \<br\/\>jsonarrayremove(feeJsonArray, 0); \<br\/\>return result; \/\/ feeArraySet does not include the removed first row. \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'invoke')) {
        document.getElementById("_function_description").innerHTML = "Invokes&#32;global&#32;table&#32;functions."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String invoke(String globalTableFunction, [String delimitedData, [String defaultData]])</br><br/><b>Behavior/Example</b>:<br>Example: \<br\/\>The following script invokes the global function someGlobalFunction. The parameters are passed as a delimited string.  In case a valid string is not returned by someGlobalFunction, the default string is \"error_in_rule\" \<br\/\>params = \"\"; \<br\/\>params = var_frequency + \"~\" + \"model number\"; \<br\/\>return invoke(\"someGlobalFunction\",params,\"error_in_rule\");</br>"
    }
    if (areBothEqual(currentText, 'print')) {
        document.getElementById("_function_description").innerHTML = "Prints&#32;into&#32;console&#32;for&#32;debugging."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>print(String(or Array(or Dictionary(or Numeric(or Date(or Boolean))))) varName)</br><br/><b>Behavior/Example</b>:<br>Example: \<br\/\>print(\"abba\") will display abba in the console window in the Function Editor.\<br\/\> \<br\/\>intArray = integer[]{1,2,3,4,5}; \<br\/\>print(intArray); \/\/Will display [1,2,3,4,5] in the console window.\<br\/\> \<br\/\>testDict =dict(\"string\");\<br\/\>put(testDict,\"key1\",\"X\");\<br\/\>put(testDict,\"key2\",\"Y\");\<br\/\>print textDict;\/\/Will display {key1=X, key2=Y} in the console window.\<br\/\> \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'getarrayattrstring')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;delimited&#32;string&#32;for&#32;array&#32;attribute&#32;with&#32;$,$&#32;as&#32;delimiter."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String getarrayattrstring(SingleArray arrayIdentifier)</br><br/><b>Behavior/Example</b>:<br>Example: \<br\/\>\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;pool_length = integer[];\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;pool_length[0] = 300;\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;pool_length[1] = 400;\<br\/\>&nbsp;&nbsp;&nbsp;&nbsp;result = getarrayattrstring(pool_length);\<br\/\>\<br\/\>result now holds the string \"300$,$400\"</br>"
    }
    if (areBothEqual(currentText, 'getconfigattrvalue')) {
        document.getElementById("_function_description").innerHTML = "Retrieves&#32;the&#32;value&#32;of&#32;a&#32;config&#32;attribute&#32;in&#32;commerce.&#32;System&#32;attribute&#32;_config_attr_info&#32;has&#32;to&#32;be&#32;selected&#32;as&#32;rule&#32;input"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String getconfigattrvalue(String configAttrVarname) OR String getconfigattrvalue(String documentNumber, String configAttrVarname)</br><br/><b>Behavior/Example</b>:<br>1. Gets the value for the config attribute in commerce.\<br\/\>2. System attribute _config_attr_info has to be selected as rule input. If the _config_attr_info is not selected as rule input, and getConfigAttrValue is used, a compile error should be shown to the user.\<br\/\>3. In case of menu attributes, the returned value is the menu item variable name.\<br\/\>4. Always returns a String</br>"
    }
    if (areBothEqual(currentText, 'BM_UNCHANGED_NUM')) {
        document.getElementById("_function_description").innerHTML = "Constant&#32;for&#32;&#39;Leave&#32;Value&#32;Unchanged&#39;&#32;for&#32;Number"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>$BM_UNCHANGED_NUM$</br><br/><b>Behavior/Example</b>:<br>This variable supports the numeric return type.  This is used to specify the array value that should remain unchanged.  \<br\/\>\<br\/\>For example, consider an int array intArr = Integer [] {1,2,3}. \<br\/\>If you want to assign new values to intArr[1] and intArr[2] but keep intArr[0] = 1, then specify the following: \<br\/\> intArr = Integer [] {$BM_UNCHANGED_NUM$, 21,23}; </br>"
    }
    if (areBothEqual(currentText, 'BM_UNCHANGED_STR')) {
        document.getElementById("_function_description").innerHTML = "Constant&#32;for&#32;&#39;Leave&#32;Value&#32;Unchanged&#39;&#32;for&#32;String"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>$BM_UNCHANGED_STR$</br><br/><b>Behavior/Example</b>:<br>This variable supports the string return type. \<br\/\>For example, consider a string array strArr = String [] {\"a\",\"b\"}. \<br\/\> \<br\/\>If you want to keep the value of strArr[0] unchanged, then specify the following: \<br\/\> strArr = String [] {$BM_UNCHANGED_STR$, \"abc\"}; </br>"
    }
    if (areBothEqual(currentText, 'BM_UNCHANGED_DATE')) {
        document.getElementById("_function_description").innerHTML = "Constant&#32;for&#32;&#39;Leave&#32;Value&#32;Unchanged&#39;&#32;for&#32;Date"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>$BM_UNCHANGED_DATE$</br><br/><b>Behavior/Example</b>:<br>This variable supports the date return type. \<br\/\>For example, consider a date array dateArr = Date [] {getdate(), getdate()}. \<br\/\> \<br\/\>If you want to keep the value of dateArr[0] unchanged, then specify the following: \<br\/\> dateArr = String [] {$BM_UNCHANGED_DATE$, getdate()}; </br>"
    }
    if (areBothEqual(currentText, 'isnull')) {
        document.getElementById("_function_description").innerHTML = "Evaluates&#32;whether&#32;a&#32;particular&#32;Object&#32;is&#32;null&#32;or&#32;not.&#32;Returns&#32;true&#32;if&#32;argument&#32;passed&#32;is&#32;null."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean isnull(String (or Date (or Array (or dict (or Json (or JsonArray))))))</br><br/><b>Behavior/Example</b>:<br>Returns true if the Object passed is null. \<br\/\>For example, say getconfigattrvalue() is called for a non-existing attribute. It returns null. now if the return value is passed to isnull() method, it will return true. </br>"
    }
    if (areBothEqual(currentText, 'getreasonstatus')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;status&#32;of&#32;the&#32;reason&#32;variable&#32;name&#32;passed&#32;as&#32;argument."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer getreasonstatus(String)</br><br/><b>Behavior/Example</b>:<br>Returns status of the given reason.  Following are the Integer Constants that may be returned . \<br\/\>BM_REASON_STATUS_INVALID : no reason exists in admin reason tree with given variable name. \<br\/\>BM_REASON_STATUS_INACTIVE : reason exists in admin reason tree but condition for the reason is not met. so no record for it exists in buyside tree. \<br\/\>BM_REASON_STATUS_PENDING : reason exists in buyside reason tree and there are pending approvals. \<br\/\>BM_REASON_STATUS_APPROVED : reason exists in buyside tree and it is approved by all approvers ie the reason is completely approved. \<br\/\>BM_REASON_STATUS_REJECTED : reason exists in buyside tree but it is rejected by at least one approver. \<br\/\></br>"
    }
    if (areBothEqual(currentText, 'BM_REASON_STATUS_INVALID')) {
        document.getElementById("_function_description").innerHTML = "status&#32;of&#32;a&#32;reason&#32;returned&#32;by&#32;getReasonStatus()&#32;when&#32;the&#32;reason&#32;does&#32;not&#32;exist&#32;in&#32;admin&#32;tree."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_REASON_STATUS_INVALID</br><br/><b>Behavior/Example</b>:<br>status of a reason returned by getReasonStatus() when the reason does not exist in admin tree.</br>"
    }
    if (areBothEqual(currentText, 'BM_REASON_STATUS_INACTIVE')) {
        document.getElementById("_function_description").innerHTML = "status&#32;of&#32;a&#32;reason&#32;returned&#32;by&#32;getReasonStatus()&#32;when&#32;the&#32;reason&#32;is&#32;inactive&#32;in&#32;buyside&#32;tree."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_REASON_STATUS_INACTIVE</br><br/><b>Behavior/Example</b>:<br>status of a reason returned by getReasonStatus() when the reason is inactive in buyside tree.</br>"
    }
    if (areBothEqual(currentText, 'BM_REASON_STATUS_PENDING')) {
        document.getElementById("_function_description").innerHTML = "status&#32;of&#32;a&#32;reason&#32;returned&#32;by&#32;getReasonStatus()&#32;when&#32;the&#32;reason&#32;has&#32;pending&#32;approval(s)."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_REASON_STATUS_PENDING</br><br/><b>Behavior/Example</b>:<br>status of a reason returned by getReasonStatus() when the reason has pending approval(s).</br>"
    }
    if (areBothEqual(currentText, 'BM_REASON_STATUS_APPROVED')) {
        document.getElementById("_function_description").innerHTML = "status&#32;of&#32;a&#32;reason&#32;returned&#32;by&#32;getReasonStatus()&#32;when&#32;the&#32;reason&#32;is&#32;completely&#32;approved."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_REASON_STATUS_APPROVED</br><br/><b>Behavior/Example</b>:<br>status of a reason returned by getReasonStatus() when the reason is completely approved.</br>"
    }
    if (areBothEqual(currentText, 'BM_REASON_STATUS_REJECTED')) {
        document.getElementById("_function_description").innerHTML = "status&#32;of&#32;a&#32;reason&#32;returned&#32;by&#32;getReasonStatus()&#32;when&#32;the&#32;reason&#32;is&#32;rejected&#32;by&#32;at&#32;least&#32;one&#32;approver."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_REASON_STATUS_REJECTED</br><br/><b>Behavior/Example</b>:<br>status of a reason returned by getReasonStatus() when the reason is rejected by at least one approver.</br>"
    }
    if (areBothEqual(currentText, 'BM_CM_RULES_MESSAGE')) {
        document.getElementById("_function_description").innerHTML = "Dictionary&#32;key&#32;for&#32;the&#32;rule&#39;s&#32;message."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_CM_RULES_MESSAGE</br><br/><b>Behavior/Example</b>:<br>The message to be displayed for the violated constraint.</br>"
    }
    if (areBothEqual(currentText, 'BM_CM_RULES_LOCATION')) {
        document.getElementById("_function_description").innerHTML = "Dictionary&#32;key&#32;for&#32;the&#32;rule&#39;s&#32;message&#32;location."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_CM_RULES_LOCATION</br><br/><b>Behavior/Example</b>:<br>Where the message will be displayed. Options are attribute (default) and top.</br>"
    }
    if (areBothEqual(currentText, 'BM_CM_RULES_OPERATOR')) {
        document.getElementById("_function_description").innerHTML = "Dictionary&#32;key&#32;for&#32;the&#32;rule&#39;s&#32;operator."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_CM_RULES_OPERATOR</br><br/><b>Behavior/Example</b>:<br>Operator used to evaluate constraint, as in Simple Constraints.</br>"
    }
    if (areBothEqual(currentText, 'BM_CM_RULES_VALUES')) {
        document.getElementById("_function_description").innerHTML = "Dictionary&#32;key&#32;for&#32;the&#32;rule&#39;s&#32;values."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_CM_RULES_VALUES</br><br/><b>Behavior/Example</b>:<br>Tilde-delimited values used to evaluate constraint, as in Simple Constraints.</br>"
    }
    if (areBothEqual(currentText, 'BM_PARTNER_SECURITY_TOKEN')) {
        document.getElementById("_function_description").innerHTML = "WSSE&#32;security&#32;UsernameToken&#32;for&#32;SOAP,&#32;used&#32;for&#32;sending&#32;stateless&#32;SOAP&#32;with&#32;UrlDataByPost."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_PARTNER_SECURITY_TOKEN</br><br/><b>Behavior/Example</b>:<br>WSSE security UsernameToken for SOAP, used for sending stateless SOAP with URLDataByPost. This token is only supported by URLDataByPost.\<br\/\> EXAMPLE: \<code\>...&lt;soapenv:Header&gt;&lt;ClientName xmlns=\"urn:crmondemand\/ws\"&gt;Bigmachines&lt;\/ClientName&gt;\"+BM_PARTNER_SECURITY_TOKEN+\"&lt;\/soapenv:Header&gt;...\<\/code\> \<br\/\> Inserts the block \<br\/\>\<code\>&lt;wsse:Security xmlns:wsse=\"http:\/\/docs.oasis-open.org\/wss\/2004\/01\/oasis-200401-wss-wssecurity-secext-1.0.xsd\"&gt;&lt;wsse:UsernameToken&gt;&lt;wsse:Username&gt;User\'sPartnerLogin&lt;\/wsse:Username&gt;&lt;wsse:Password Type=\"http:\/\/docs.oasis-open.org\/wss\/2004\/01\/oasis-200401-wss-username-token-profile-1.0#PasswordText\"&gt;User\'sPartnerPassword&lt;\/wsse:Password&gt;&lt;\/wsse:UsernameToken&gt;&lt;\/wsse:Security&gt;\<\/code\></br>"
    }
    if (areBothEqual(currentText, 'BM_DEFAULT_SOURCE_IDENTIFIER')) {
        document.getElementById("_function_description").innerHTML = "BM_DEFAULT_SOURCE_IDENTIFIER"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_DEFAULT_SOURCE_IDENTIFIER</br><br/><b>Behavior/Example</b>:<br>BM_DEFAULT_SOURCE_IDENTIFIER</br>"
    }
    if (areBothEqual(currentText, 'BM_REMOTE_APPROVAL_STATUS_APPROVED')) {
        document.getElementById("_function_description").innerHTML = "Approved&#32;Status.&#32;This&#32;is&#32;used&#32;in&#32;Remote&#32;Approvals&#32;in&#32;the&#32;tilde&#32;separated&#32;approval&#32;history&#32;to&#32;be&#32;returned&#32;in&#32;the&#32;BML&#32;in&#32;Approve/Reject&#32;action"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_REMOTE_APPROVAL_STATUS_APPROVED</br><br/><b>Behavior/Example</b>:<br>returnString=returnString+ApproverName+\"~\"+ApproverCompany+\"~\"+ApproverDate+\"~\"+BM_REMOTE_APPROVAL_STATUS_APPROVED+ \"~\" + ApproverComment +\"~||\";</br>"
    }
    if (areBothEqual(currentText, 'BM_REMOTE_APPROVAL_STATUS_REJECTED')) {
        document.getElementById("_function_description").innerHTML = "Rejected&#32;Status.&#32;This&#32;is&#32;used&#32;in&#32;Remote&#32;Approvals&#32;in&#32;the&#32;tilde&#32;separated&#32;approval&#32;history&#32;to&#32;be&#32;returned&#32;in&#32;the&#32;BML&#32;in&#32;Approve/Reject&#32;action"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_REMOTE_APPROVAL_STATUS_REJECTED</br><br/><b>Behavior/Example</b>:<br>returnString=returnString+ApproverName+\"~\"+ApproverCompany+\"~\"+ApproverDate+\"~\"+BM_REMOTE_APPROVAL_STATUS_REJECTED+ \"~\" + ApproverComment +\"~||\";</br>"
    }
    if (areBothEqual(currentText, 'BM_REMOTE_APPROVAL_STATUS_CUSTOM')) {
        document.getElementById("_function_description").innerHTML = "Custom&#32;Status.&#32;This&#32;is&#32;used&#32;in&#32;Remote&#32;Approvals&#32;in&#32;the&#32;tilde&#32;separated&#32;approval&#32;history&#32;to&#32;be&#32;returned&#32;in&#32;the&#32;BML&#32;in&#32;Approve/Reject&#32;action.&#32;This&#32;can&#32;be&#32;used&#32;for&#32;anything&#32;other&#32;than&#32;Approved/Rejected"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_REMOTE_APPROVAL_STATUS_CUSTOM</br><br/><b>Behavior/Example</b>:<br>returnString=returnString+ApproverName+\"~\"+ApproverCompany+\"~\"+ApproverDate+\"~\"+BM_REMOTE_APPROVAL_STATUS_CUSTOM+ \"~\" + ApproverComment +\"~||\";</br>"
    }
    if (areBothEqual(currentText, 'BM_SALES_ROOT_BOM_ITEM')) {
        document.getElementById("_function_description").innerHTML = "Sales&#32;BOM&#32;used&#32;for&#32;launching&#32;configurator."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_SALES_ROOT_BOM_ITEM</br><br/><b>Behavior/Example</b>:<br>Sales BOM used for launching configurator.</br>"
    }
    if (areBothEqual(currentText, 'BM_PRIOR_ROOT_BOM_ITEM')) {
        document.getElementById("_function_description").innerHTML = "Projected&#32;state&#32;of&#32;the&#32;asset&#32;calculated&#32;for&#32;a&#32;requested&#32;date."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_PRIOR_ROOT_BOM_ITEM</br><br/><b>Behavior/Example</b>:<br>Projected state of the asset calculated for a requested date.</br>"
    }
    if (areBothEqual(currentText, 'BM_PRIOR_CONFIGURATION_KEY')) {
        document.getElementById("_function_description").innerHTML = "Generic&#32;key&#32;used&#32;to&#32;determine&#32;prior&#32;configuration&#32;context."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_PRIOR_CONFIGURATION_KEY</br><br/><b>Behavior/Example</b>:<br>Generic key used to determine prior configuration context.</br>"
    }
    if (areBothEqual(currentText, 'BM_CONFIGURATION_KEY')) {
        document.getElementById("_function_description").innerHTML = "Generic&#32;key&#32;used&#32;to&#32;determine&#32;the&#32;current&#32;configuration&#32;context."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>BM_CONFIGURATION_KEY</br><br/><b>Behavior/Example</b>:<br> Generic key used to determine the current configuration context.</br>"
    }
    if (areBothEqual(currentText, 'logtime')) {
        document.getElementById("_function_description").innerHTML = "Logs&#32;the&#32;specified&#32;string&#32;and&#32;number&#32;as&#32;the&#32;component&#32;and&#32;time&#32;elapsed&#32;in&#32;the&#32;event&#32;logs."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>logtime(String tag, Integer timeElapsed)</br><br/><b>Behavior/Example</b>:<br>Logs the specified tag and time elapsed to the site\'s Event Log. This logging will only occur when executed outside of the debugger.</br>"
    }
    if (areBothEqual(currentText, 'getoldvalue')) {
        document.getElementById("_function_description").innerHTML = "Retrieves&#32;an&#32;old&#32;value&#32;for&#32;given&#32;variable&#32;name&#32;containing&#32;old&#32;value&#32;and&#32;document&#32;number."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String getoldvalue(String variableName [, Integer documentNumber])</br><br/><b>Behavior/Example</b>:<br>1. First parameter is a variable name containing old value.\<br\/\>\<br\/\>2. If optional second parameter isn\'t provided, it is defaulted to 1, which is main document.\<br\/\>\<br\/\>3. It will return empty string for the following cases.\<br\/\>&nbsp;&nbsp;&nbsp;a. When it\'s called from debugger\<br\/\>&nbsp;&nbsp;&nbsp;b. If the document with the given document number does not exist\<br\/\>&nbsp;&nbsp;&nbsp;c. If the variable with the given variable name does not exist in the document\<br\/\>\<br\/\>Example: \<br\/\>\<br\/\>pre1 = getoldvalue(\"_quote_bill_to_address\");\<br\/\>pre2 = getoldvalue(\"_price_net_price\", 2);</br>"
    }
    if (areBothEqual(currentText, 'savebom')) {
        document.getElementById("_function_description").innerHTML = "Save&#32;a&#32;BOM&#32;into&#32;a&#32;quote&#32;without&#32;configurator&#32;involved."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer savebom(Integer bsId, Json bomJson [, configurationKey])</br><br/><b>Behavior/Example</b>:<br>1. First parameter is a bsId which is of Integer datatype.\<br\/\>2. Second parameter is bomJson which is of Json type.\<br\/\>3. This function returns document number of the quote where it is saved.\<br\/\>\<br\/\>Example: \<br\/\>testjson = json(\"{\\\"partNumber\\\":\\\"part49\\\",\\\"quantity\\\":10,\\\"id\\\":\\\"BOM_root\\\",\\\"parentId\\\":\\\"\\\",\\\"attributes\\\":{},\\\"fields\\\":{\\\"_line_bom_level\\\":\\\"0\\\"},\\\"explodedQuantity\\\":10,\\\"category\\\":\\\"sales\\\",\\\"variableName\\\":\\\"root\\\",\\\"definition\\\":{\\\"SequenceNum\\\":814,\\\"ItemId\\\":\\\"814\\\",\\\"ItemType\\\":\\\"Standard Item\\\",\\\"Optional\\\":\\\"Y\\\"},\\\"children\\\":[{\\\"partNumber\\\":\\\"part50\\\",\\\"quantity\\\":5,\\\"id\\\":\\\"BOM_text_bom\\\",\\\"parentId\\\":\\\"BOM_root\\\",\\\"attributes\\\":{},\\\"fields\\\":{\\\"_line_bom_level\\\":\\\"1\\\"},\\\"explodedQuantity\\\":50,\\\"variableName\\\":\\\"text_bom\\\",\\\"definition\\\":{\\\"SequenceNum\\\":815,\\\"ItemId\\\":\\\"815\\\",\\\"ItemType\\\":\\\"Standard Item\\\",\\\"Optional\\\":\\\"Y\\\"}}]} \");\<br\/\>bsId=18430319; \<br\/\>docNum = savebom(bsId, testjson); \<br\/\>print docNum;\<br\/\>\/\/Output: 5</br>"
    }
    if (areBothEqual(currentText, 'getbom')) {
        document.getElementById("_function_description").innerHTML = "Extracts&#32;a&#32;BOM&#32;instance&#32;from&#32;a&#32;commerce&#32;transaction."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Json getbom(Integer bsId, Integer lineNumber [, String[] lineFields [, Boolean validateBomModel [, Boolean flattenChildItems [, Boolean isSalesBom]]]])</br><br/><b>Behavior/Example</b>:<br>1. bsId is the commerce transaction ID.\<br\/\>\<br\/\>2. lineNumber is the the document number of the model line, also acting as the root BOM line in the quote.\<br\/\>\<br\/\>3. lineFields are the additional line attributes to be fetched from the quote lines and stored in the returned BOM instance.\<br\/\>&nbsp;&nbsp;&nbsp;It is optional parameter and if it is not provided the default value will be null.\<br\/\>\<br\/\>4. validateBomModel is used for whether to validate the returned BOM against the latest BOM item definition.\<br\/\>&nbsp;&nbsp;&nbsp;The validation verifies the BOM instance tree against the BOM item definition based on part numbers and hierarchy.\<br\/\>&nbsp;&nbsp;&nbsp;It populates the BOM item variable names,may correct the BOM instance hierarchy according to the latest definition, and exclude items that are no longer part of the latest definition.\<br\/\>&nbsp;&nbsp;&nbsp;It is optional parameter and if it is not provided the default value will be true.\<br\/\>\<br\/\>5. flattenChildItems is used for whether to flatten the children items. If true, all descendant BOM items are  stored as the direct children of the returned root BOM item.\<br\/\>&nbsp;&nbsp;&nbsp;It is optional parameter and if it is not provided the default value will be false.\<br\/\>\<br\/\>6. isSalesBom is used for whether the returned BOM should be a sales BOM or a manufacturing BOM.\<br\/\>&nbsp;&nbsp;&nbsp;It is optional parameter and if it is not provided the default value will be true.\<br\/\>\<br\/\>Example: \<br\/\>bsId=18430319; \<br\/\>jObj = getbom(bsId, 2); \<br\/\>print jObj; \<br\/\>\/\/Output : {\"partNumber\":\"part49\",\"quantity\":10,\"id\":\"BOM_root\",\"parentId\":\"\",\"attributes\":{},\"fields\":{\"_line_bom_level\":\"0\"},\"explodedQuantity\":10,\"category\":\"sales\",\"variableName\":\"root\",\"definition\":{\"SequenceNum\":814,\"ItemId\":\"814\",\"ItemType\":\"Standard Item\",\"Optional\":\"Y\"},\"children\":[{\"partNumber\":\"part50\",\"quantity\":5,\"id\":\"BOM_text_bom\",\"parentId\":\"BOM_root\",\"attributes\":{},\"fields\":{\"_line_bom_level\":\"1\"},\"explodedQuantity\":50,\"variableName\":\"text_bom\",\"definition\":{\"SequenceNum\":815,\"ItemId\":\"815\",\"ItemType\":\"Standard Item\",\"Optional\":\"Y\"}}]} </br>"
    }
    if (areBothEqual(currentText, 'getconfigbom')) {
        document.getElementById("_function_description").innerHTML = "Extracts&#32;a&#32;client&#32;integration&#32;BOM&#32;instance&#32;using&#32;configId"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Json getConfigBom(Integer configId, Boolean flattenChildItems)</br><br/><b>Behavior/Example</b>:<br>1. configId is the Configuration ID for the client side integration action and is not the same as the configuration_id system attribute.\<br\/\>&nbsp;&nbsp;&nbsp;For UI integrations, the client side integration action returns the config_id  in response json.\<br\/\>&nbsp;&nbsp;&nbsp;For other actions such as Terminate, Renew, Suspend, and Resume order, RESTful calls generated from the saveBomConfig BML function return the lineId.\<br\/\>\<br\/\>2. flattenChildItems is an optional parameter used to flatten child items. If true, all descendant BOM items are stored as direct children of the returned root BOM item.\<br\/\>&nbsp;&nbsp;&nbsp;If the parameter is not provided, the value is by default false.\<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'calculateconfiguration')) {
        document.getElementById("_function_description").innerHTML = "This&#32;function&#32;calculates&#32;the&#32;projected&#32;configuration&#32;for&#32;a&#32;list&#32;of&#32;open&#32;order&#32;lines&#32;passed&#32;as&#32;input&#32;and&#32;returns&#32;a&#32;configuration&#32;key&#32;that&#32;will&#32;be&#32;used&#32;to&#32;load&#32;the&#32;projected&#32;state&#32;of&#32;the&#32;configuration&#32;when&#32;a&#32;configurator&#32;session&#32;is&#32;launched.&#32;This&#32;function&#32;is&#32;used&#32;in&#32;subscription&#32;order&#32;implementation."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String calculateconfiguration(String baseConfigurationKey, JsonArray linesToApply)</br><br/><b>Behavior/Example</b>:<br>1. First parameter is baseConfigurationKey which is of String datatype. It can be an empty string \"\" for an initial configuration.\<br\/\>2. Second parameter is linestoApply which is of JsonArray type. Contains a list of open order lines for which projected configuration has to be calculated.\<br\/\>3. This function returns configurationKey which is a string. This configuration key can be used to load the projected configurations when a configurator session is launched.\<br\/\>\<br\/\>Example: \<br\/\>line1 = \"{\\\"type\\\":\\\"internalOrder\\\",\\\"_bs_id\\\":21002021,\\\"_document_number\\\": 2}\";\<br\/\>line2 = \"{\\\"type\\\":\\\"internalOrder\\\",\\\"_bs_id\\\":21002021,\\\"_document_number\\\": 6}\";\<br\/\>linesToApply = jsonArray();\<br\/\>lines = json(line1);\<br\/\>jsonarrayappend(linesToApply, lines);\<br\/\>lines1 = json(line2);\<br\/\>jsonarrayappend(linesToApply, lines1);\<br\/\>configurationKey = calculateconfiguration(\"\", linesToApply);\<br\/\>return configurationKey;\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'applybom')) {
        document.getElementById("_function_description").innerHTML = "Apply&#32;the&#32;passed&#32;in&#32;bom&#32;to&#32;the&#32;base&#32;bom&#32;and&#32;return&#32;the&#32;resultant&#32;bom."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Json applybom(Json baseBom, Json oneBomToApply [, Json setting])</br><br/><b>Behavior/Example</b>:<br>1. First parameter is baseBom in Json format.\<br\/\>2. Second parameter is oneBomToApply in Json format.\<br\/\>3. Third parameter is optional parameter which is of Json type.\<br\/\>4. This function returns resultant bom in Json format.\<br\/\>\<br\/\>This function applies oneBomToApply on top of  baseBom and then returns the resultant bom.\<br\/\>Example Usage:\<br\/\>The following example shows sample input and output for this function.\<br\/\>\/\/ This baseBom contains sample root, sample child and sample grand child.\<br\/\>baseBom = json(\"{\\\"children\\\":[{\\\"id\\\":\\\"BOM_ABOSampleChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleRoot\\\",\\\"quantity\\\":1,\\\"partNumber\\\":\\\"part12\\\",\\\"fields\\\":{\\\"itemInstanceName_l\\\":\\\"part12-20983113-2\\\",\\\"itemInstanceId_l\\\":\\\"abo_644cc4ff-7267-4c9a-9c53-70fae13618b0\\\"},\\\"explodedQuantity\\\":2},{\\\"id\\\":\\\"BOM_ABOSampleGrandChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleChild\\\",\\\"quantity\\\":4,\\\"partNumber\\\":\\\"part14\\\",\\\"fields\\\":{\\\"itemInstanceName_l\\\":\\\"part14-20983113-3\\\",\\\"itemInstanceId_l\\\":\\\"abo_72a356b4-f80c-4b23-bb5a-b80a286b4917\\\"},\\\"explodedQuantity\\\":8}],\\\"id\\\":\\\"BOM_ABOSampleRoot\\\",\\\"parentId\\\":null,\\\"quantity\\\":2,\\\"partNumber\\\":\\\"part11\\\",\\\"fields\\\":{\\\"itemInstanceName_l\\\":\\\"part11-20983113-1\\\",\\\"itemInstanceId_l\\\":\\\"abo_09eecd85-e659-4fdf-bbbc-a6e940f6bf05\\\"},\\\"explodedQuantity\\\":2}\");\<br\/\>\/\/ In oneBomToApply, the grand child is deleted and quantity of root is changed to 5.\<br\/\>oneBomToApply = json(\"{\\\"partNumber\\\":\\\"part11\\\",\\\"quantity\\\":5,\\\"isModel\\\":true,\\\"id\\\":\\\"BOM_ABOSampleRoot\\\",\\\"parentId\\\":\\\"\\\",\\\"fields\\\":{\\\"itemInstanceId_l\\\":\\\"abo_09eecd85-e659-4fdf-bbbc-a6e940f6bf05\\\",\\\"itemInstanceName_l\\\":\\\"part11-20983113-1\\\",\\\"requestDate_l\\\":\\\"\\\",\\\"oRCL_ABO_ActionCode_l\\\":\\\"UPDATE\\\"},\\\"explodedQuantity\\\":5,\\\"category\\\":\\\"sales\\\",\\\"currencyCode\\\":\\\"\\\",\\\"children\\\":[{\\\"partNumber\\\":\\\"part14\\\",\\\"quantity\\\":4,\\\"isModel\\\":false,\\\"id\\\":\\\"BOM_ABOSampleGrandChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleChild\\\",\\\"fields\\\":{\\\"itemInstanceId_l\\\":\\\"abo_72a356b4-f80c-4b23-bb5a-b80a286b4917\\\",\\\"itemInstanceName_l\\\":\\\"part14-20983113-3\\\",\\\"requestDate_l\\\":\\\"\\\",\\\"oRCL_ABO_ActionCode_l\\\":\\\"DELETE\\\"},\\\"explodedQuantity\\\":20,\\\"children\\\":[]},{\\\"partNumber\\\":\\\"part12\\\",\\\"quantity\\\":1,\\\"isModel\\\":false,\\\"id\\\":\\\"BOM_ABOSampleChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleRoot\\\",\\\"fields\\\":{\\\"itemInstanceId_l\\\":\\\"abo_644cc4ff-7267-4c9a-9c53-70fae13618b0\\\",\\\"itemInstanceName_l\\\":\\\"part12-20983113-2\\\",\\\"requestDate_l\\\":\\\"\\\",\\\"oRCL_ABO_ActionCode_l\\\":\\\"UPDATE\\\"},\\\"explodedQuantity\\\":5,\\\"sequenceIndex\\\":0,\\\"conditionIndex\\\":0,\\\"children\\\":[]}]}\");\<br\/\>result = applybom(baseBom, oneBomToApply);\<br\/\>\/\/ The resultant bom contains sample root, sample child.The quantity of root is updated to 5\<br\/\>return jsontostr(result);\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'calculatedeltabom')) {
        document.getElementById("_function_description").innerHTML = "Compares&#32;the&#32;pacBom,&#32;configBom&#32;to&#32;calculate&#32;delta&#32;and&#32;adds&#32;the&#32;action&#32;codes&#32;for&#32;renew&#32;from&#32;inputBom."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Json calculatedeltabom(Json priorBom, Json currentBom, Json inputBom [, Json setting])</br><br/><b>Behavior/Example</b>:<br>1. First parameter is priorBom in Json format.\<br\/\>2. Second parameter is curBom in Json format.\<br\/\>3. Third parameter is inputBom in Json format.\<br\/\>4. Fourth parameter is optional parameter which is of Json type.\<br\/\>5. This function returns delta bom in Json format.This bom contains the proper action codes.\<br\/\>\<br\/\>This function compares the priorBom with curBom and then based upon the comparison returns the difference between the two with approrpriate action code for each item.\<br\/\>\<br\/\>Example Usage:\<br\/\>The following example shows sample input and output for this function.\<br\/\>\/\/ This priorBom contains sample root, sample child and sample grand child.\<br\/\>priorBom = json(\"{\\\"partNumber\\\":\\\"part11\\\",\\\"quantity\\\":5,\\\"isModel\\\":true,\\\"id\\\":\\\"BOM_ABOSampleRoot\\\",\\\"parentId\\\":\\\"\\\",\\\"fields\\\":{\\\"itemInstanceName_l\\\":\\\"part11-20983113-1\\\",\\\"itemInstanceId_l\\\":\\\"abo_09eecd85-e659-4fdf-bbbc-a6e940f6bf05\\\",\\\"requestDate_l\\\":\\\"\\\"},\\\"explodedQuantity\\\":5,\\\"category\\\":\\\"sales\\\",\\\"currencyCode\\\":\\\"\\\",\\\"children\\\":[{\\\"partNumber\\\":\\\"part14\\\",\\\"quantity\\\":4,\\\"isModel\\\":false,\\\"id\\\":\\\"BOM_ABOSampleGrandChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleChild\\\",\\\"fields\\\":{\\\"itemInstanceId_l\\\":\\\"abo_072a975f-7ccc-4c18-9699-3d5fa073d7f9\\\",\\\"itemInstanceName_l\\\":\\\"part14-20983113-3\\\",\\\"requestDate_l\\\":\\\"\\\"},\\\"explodedQuantity\\\":20,\\\"variableName\\\":\\\"ABOSampleGrandChild\\\",\\\"sequenceIndex\\\":0,\\\"conditionIndex\\\":0,\\\"definition\\\":{\\\"Optional\\\":\\\"N\\\",\\\"ItemType\\\":\\\"Standard Item\\\",\\\"includedInBasePrice\\\":\\\"\\\",\\\"ItemId\\\":\\\"ID\\\",\\\"SequenceNum\\\":4},\\\"children\\\":[],\\\"unconfiguredBomVarname\\\":\\\"ABOSampleGrandChild\\\",\\\"unconfiguredPartNumber\\\":\\\"part14\\\"},{\\\"partNumber\\\":\\\"part12\\\",\\\"quantity\\\":1,\\\"isModel\\\":false,\\\"id\\\":\\\"BOM_ABOSampleChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleRoot\\\",\\\"fields\\\":{\\\"itemInstanceName_l\\\":\\\"part12-20983113-2\\\",\\\"itemInstanceId_l\\\":\\\"abo_644cc4ff-7267-4c9a-9c53-70fae13618b0\\\",\\\"requestDate_l\\\":\\\"\\\"},\\\"explodedQuantity\\\":5,\\\"sequenceIndex\\\":0,\\\"conditionIndex\\\":0,\\\"children\\\":[]}]}\");\<br\/\>\/\/ In this current bom both the root and the sample  grand child quantity is updated.The quantity of child is unchanged\<br\/\>curBom = json(\"{\\\"partNumber\\\":\\\"part11\\\",\\\"quantity\\\":7,\\\"isModel\\\":true,\\\"id\\\":\\\"BOM_ABOSampleRoot\\\",\\\"parentId\\\":\\\"\\\",\\\"fields\\\":{\\\"itemInstanceId_l\\\":\\\"abo_09eecd85-e659-4fdf-bbbc-a6e940f6bf05\\\",\\\"itemInstanceName_l\\\":\\\"part11-20983113-1\\\",\\\"requestDate_l\\\":\\\"\\\"},\\\"explodedQuantity\\\":7,\\\"category\\\":\\\"sales\\\",\\\"variableName\\\":\\\"ABOSampleRoot\\\",\\\"currencyCode\\\":\\\"USD\\\",\\\"sequenceIndex\\\":0,\\\"conditionIndex\\\":0,\\\"definition\\\":{\\\"Optional\\\":\\\"N\\\",\\\"ItemType\\\":\\\"Standard Item\\\",\\\"includedInBasePrice\\\":\\\"\\\",\\\"ItemId\\\":\\\"ID\\\",\\\"SequenceNum\\\":1},\\\"children\\\":[{\\\"partNumber\\\":\\\"part14\\\",\\\"quantity\\\":9,\\\"isModel\\\":false,\\\"id\\\":\\\"BOM_ABOSampleGrandChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleChild\\\",\\\"fields\\\":{\\\"itemInstanceId_l\\\":\\\"abo_072a975f-7ccc-4c18-9699-3d5fa073d7f9\\\",\\\"itemInstanceName_l\\\":\\\"part14-20983113-3\\\",\\\"requestDate_l\\\":\\\"\\\"},\\\"explodedQuantity\\\":63,\\\"variableName\\\":\\\"ABOSampleGrandChild\\\",\\\"sequenceIndex\\\":0,\\\"conditionIndex\\\":0,\\\"definition\\\":{\\\"Optional\\\":\\\"N\\\",\\\"ItemType\\\":\\\"Standard Item\\\",\\\"includedInBasePrice\\\":\\\"\\\",\\\"ItemId\\\":\\\"ID\\\",\\\"SequenceNum\\\":4},\\\"children\\\":[],\\\"unconfiguredBomVarname\\\":\\\"ABOSampleGrandChild\\\",\\\"unconfiguredPartNumber\\\":\\\"part14\\\"},{\\\"partNumber\\\":\\\"part12\\\",\\\"quantity\\\":1,\\\"isModel\\\":false,\\\"id\\\":\\\"BOM_ABOSampleChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleRoot\\\",\\\"fields\\\":{\\\"itemInstanceId_l\\\":\\\"abo_644cc4ff-7267-4c9a-9c53-70fae13618b0\\\",\\\"itemInstanceName_l\\\":\\\"part12-20983113-2\\\",\\\"requestDate_l\\\":\\\"\\\"},\\\"explodedQuantity\\\":7,\\\"variableName\\\":\\\"ABOSampleChild\\\",\\\"sequenceIndex\\\":0,\\\"conditionIndex\\\":0,\\\"definition\\\":{\\\"Optional\\\":\\\"N\\\",\\\"ItemType\\\":\\\"Standard Item\\\",\\\"includedInBasePrice\\\":\\\"\\\",\\\"ItemId\\\":\\\"ID\\\",\\\"SequenceNum\\\":2},\\\"children\\\":[],\\\"unconfiguredBomVarname\\\":\\\"ABOSampleChild\\\",\\\"unconfiguredPartNumber\\\":\\\"part12\\\"}]}\");\<br\/\>inputBom = json(\"{\\\"partNumber\\\":\\\"part11\\\",\\\"quantity\\\":5,\\\"isModel\\\":true,\\\"id\\\":\\\"BOM_ABOSampleRoot\\\",\\\"parentId\\\":\\\"\\\",\\\"fields\\\":{\\\"itemInstanceName_l\\\":\\\"part11-20983113-1\\\",\\\"itemInstanceId_l\\\":\\\"abo_09eecd85-e659-4fdf-bbbc-a6e940f6bf05\\\",\\\"requestDate_l\\\":\\\"\\\"},\\\"explodedQuantity\\\":5,\\\"category\\\":\\\"sales\\\",\\\"currencyCode\\\":\\\"\\\",\\\"children\\\":[{\\\"partNumber\\\":\\\"part14\\\",\\\"quantity\\\":4,\\\"isModel\\\":false,\\\"id\\\":\\\"BOM_ABOSampleGrandChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleChild\\\",\\\"fields\\\":{\\\"itemInstanceId_l\\\":\\\"abo_072a975f-7ccc-4c18-9699-3d5fa073d7f9\\\",\\\"itemInstanceName_l\\\":\\\"part14-20983113-3\\\",\\\"requestDate_l\\\":\\\"\\\"},\\\"explodedQuantity\\\":20,\\\"variableName\\\":\\\"ABOSampleGrandChild\\\",\\\"sequenceIndex\\\":0,\\\"conditionIndex\\\":0,\\\"definition\\\":{\\\"Optional\\\":\\\"N\\\",\\\"ItemType\\\":\\\"Standard Item\\\",\\\"includedInBasePrice\\\":\\\"\\\",\\\"ItemId\\\":\\\"ID\\\",\\\"SequenceNum\\\":4},\\\"children\\\":[],\\\"unconfiguredBomVarname\\\":\\\"ABOSampleGrandChild\\\",\\\"unconfiguredPartNumber\\\":\\\"part14\\\"},{\\\"partNumber\\\":\\\"part12\\\",\\\"quantity\\\":1,\\\"isModel\\\":false,\\\"id\\\":\\\"BOM_ABOSampleChild\\\",\\\"parentId\\\":\\\"BOM_ABOSampleRoot\\\",\\\"fields\\\":{\\\"itemInstanceName_l\\\":\\\"part12-20983113-2\\\",\\\"itemInstanceId_l\\\":\\\"abo_644cc4ff-7267-4c9a-9c53-70fae13618b0\\\",\\\"requestDate_l\\\":\\\"\\\"},\\\"explodedQuantity\\\":5,\\\"sequenceIndex\\\":0,\\\"conditionIndex\\\":0,\\\"children\\\":[]}]}\");\<br\/\>result = calculatedeltabom(priorBom, curBom, inputBom);\<br\/\>\/\/ The resultant bom contains sample root, sample child and sample grand children.\<br\/\>\/\/ action code is UPDATE for root and grand child, it is NO_UPDATE for child.\<br\/\>return jsontostr(result);\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'saveconfigbom')) {
        document.getElementById("_function_description").innerHTML = "Saves&#32;a&#32;client&#32;integration&#32;bom&#32;instance&#32;and&#32;return&#32;configId"
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Integer saveconfigbom(Json configBomJson [,Dictionary instanceAttributes [, configurationKey]])</br><br/><b>Behavior/Example</b>:<br>1. configBomJson is the configuration BOM json to save.\<br\/\>&nbsp;&nbsp;&nbsp;For actions such as Terminate, Renew, Suspend, and Resume order, RESTful calls generated from the saveBomConfig BML function return the lineId.\<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'usersessionset')) {
        document.getElementById("_function_description").innerHTML = "This&#32;method&#32;sets&#32;a&#32;key-value&#32;pair&#32;to&#32;the&#32;user&#32;session."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>usersessionset(String key, &lt;ValueType&gt; value)</br><br/><b>Behavior/Example</b>:<br>1. First parameter is a key of String datatype.\<br\/\>\<br\/\>2. Second parameter is value which is of type String or JSON.\<br\/\>\<br\/\>3. Set key-value pair will be lost once the session gets expired.\<br\/\>\<br\/\>Example: \<br\/\>jobj=json();\<br\/\>jsonput(jobj,\"key1\",\"mystring\");\<br\/\>jsonput(jobj,\"key2\",10);\<br\/\>jsonput (jobj ,\"key3\",2.9);\<br\/\>usersessionset(\"sessionkey1\",jobj);\<br\/\>usersessionset(\"sessionkey2\",\"Hello\");</br>"
    }
    if (areBothEqual(currentText, 'usersessionget')) {
        document.getElementById("_function_description").innerHTML = "This&#32;method&#32;retrieves&#32;value&#32;for&#32;a&#32;given&#32;key&#32;from&#32;user&#32;session."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>&lt;ValueType&gt; usersessionget(String key [,String valueType])</br><br/><b>Behavior/Example</b>:<br>1. First parameter is a key of String datatype.\<br\/\>\<br\/\>2. Second parameter is optional and default value is String.\<br\/\>\<br\/\>3. Second parameter can be String or JSON. \<br\/\>\<br\/\>4. If the key is not found, null will be returned. \<br\/\>\<br\/\>Example: \<br\/\>jobj=json();\<br\/\>jsonput(jobj,\"key1\",\"mystring\");\<br\/\>jsonput(jobj,\"key2\",10);\<br\/\>jsonput (jobj ,\"key3\",2.9);\<br\/\>usersessionset(\"sessionkey1\",jobj);\<br\/\>usersessionset(\"sessionkey2\",\"Hello\");\<br\/\>\<br\/\>To get the value as string;\<br\/\>valstr=usersessionget(\"sessionkey1\",\"string\");\<br\/\>valstr1=usersessionget(\"sessionkey2\",\"string\");\<br\/\>valstr2=usersessionget(\"sessionkey2\");\<br\/\>\<br\/\>To get the value as JSON object;\<br\/\>valstr=usersessionget(\"sessionkey1\",\"json\");\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'globaldictget')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;value&#32;stored&#32;in&#32;the&#32;global&#32;cache&#32;against&#32;the&#32;given&#32;key.&#32;Returns&#32;null&#32;if&#32;the&#32;key&#32;is&#32;not&#32;found&#32;in&#32;the&#32;global&#32;cache."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String globaldictget(String key [, Boolean updateTimeToLive])</br><br/><b>Behavior/Example</b>:<br>1.The first parameter is a key of String datatype.\<br\/\>2.The second parameter is optional with default value as \"false\".\<br\/\>3.When the updateTimeToLive parameter is set to true, the minimum time to live is re-calculated from the retrieved time.\<br\/\>4.When the updateTimeToLive parameter is set to false, there is no change to the minimum time to live.\<br\/\>5.This function is independent of user session.\<br\/\>\<br\/\>Example: \<br\/\>\/\/Set data in global cache as below\<br\/\>globaldictset(\"globalkey1\",\"some string1\",100); \<br\/\>globaldictset(\"globalkey2\",\"some string2\"); \<br\/\>\/\/To get the global cache value\<br\/\>valstr=globaldictget(\"globalkey1\",true);\/\/If true then re-calculate minimum time to live\<br\/\>print valstr;\<br\/\>\/\/Output: some string1\<br\/\>valstr1=globaldictget(\"globalkey2\",false);\/\/No changes to minimum time to live \<br\/\>print valstr1;\<br\/\>\/\/Output: some string2\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'usersessionremove')) {
        document.getElementById("_function_description").innerHTML = "Removes&#32;key-value&#32;pair&#32;from&#32;the&#32;user&#32;session.&#32;This&#32;method&#32;returns&#32;true&#32;if&#32;key&#32;is&#32;removed,&#32;false&#32;otherwise."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean usersessionremove(String key)</br><br/><b>Behavior/Example</b>:<br>1. The \"key\" parameter is a key of String datatype.\<br\/\>\<br\/\>Example: \<br\/\>\/\/Set data in user session as below\<br\/\>usersessionset(\"sessionkey1\",\"value\");\<br\/\>\/\/To remove the key\/value pair using a key\<br\/\>print usersessionremove(\"sessionkey1\");\<br\/\>\/\/Output: true \<br\/\>\<b\>Note: \<\/b\>The method would return false on trying to remove a key that does not exist in the user session.</br>"
    }
    if (areBothEqual(currentText, 'globaldictremove')) {
        document.getElementById("_function_description").innerHTML = "This&#32;function&#32;removes&#32;key-value&#32;pair&#32;from&#32;the&#32;global&#32;cache.&#32;It&#32;returns&#32;true&#32;when&#32;the&#32;key-value&#32;pair&#32;is&#32;removed.&#32;False&#32;will&#32;be&#32;returned&#32;otherwise."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Boolean globaldictremove(String key)</br><br/><b>Behavior/Example</b>:<br>1. The \"key\" parameter is a key of String datatype.\<br\/\>2. This function is independent of user session.\<br\/\>\<br\/\>Example: \<br\/\>\/\/Set data in global cache as below\<br\/\>globaldictset(\"globalkey1\",\"some string\",100); \<br\/\>\/\/To remove the key-value pair from global cache using a key\<br\/\>print globaldictremove(\"globalkey1\");\<br\/\>\/\/Output: true \<br\/\>\<b\>Note:\<\/b\>The method would return false on trying to remove a key that does not exist in the global cache.</br>"
    }
    if (areBothEqual(currentText, 'throwerror')) {
        document.getElementById("_function_description").innerHTML = "This&#32;function&#32;is&#32;used&#32;to&#32;throw&#32;business&#32;logic&#32;and&#32;system&#32;exceptions."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>throwerror(String errorMessage[, Boolean isSystemError]) </br><br/><b>Behavior/Example</b>:<br>This function stops the execution of the BML script and displays an error message to the user. The error can be of type business logic or system error. In case of system error, a generic message will be displayed and the actual message will be logged to the error log file.\<br\/\> Note: This function should not be used in config or commerce rule conditions as message will not be adequately displayed to the user.\<br\/\>\<br\/\>1. The first parameter is a customized error message that is printed exactly as entered by the user, regardless of the language character set used.\<br\/\>2. The second parameter is optional with default value as false. If set to true then the error message will be treated as system error.\<br\/\>\<br\/\>Case 1: \<br\/\>throwerror(\"This is a custom error!!\");\<br\/\>\<br\/\>Message displayed to the user \"This is a custom error!!\"\<br\/\>\<br\/\>Case 2: \<br\/\>throwerror(\"This is a system error!!\",true);\<br\/\>\<br\/\>Message displayed to the user \"An unknown error has occurred. Please contact system administrator.\"\<br\/\>\<br\/\>Error log contains the message \"This is a system error!!\".\<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'getuuid')) {
        document.getElementById("_function_description").innerHTML = "This&#32;function&#32;will&#32;generate&#32;a&#32;list&#32;of&#32;random&#32;unique&#32;IDs."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String[] getuuid(Integer count) </br><br/><b>Behavior/Example</b>:<br>1. Parameter \'count\' is of type Integer and it is the number of unique IDs to be generated.\<br\/\>\<br\/\>Example: \<br\/\>getuuid(2); \/\/Generates string array with 2 unique IDs.\<br\/\>output: [6bafc278-25fd-495f-8360-67bcfb8776b0, 65abced9-5c47-47c6-bf18-ab96fb73935f]\<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'convertbomtohier')) {
        document.getElementById("_function_description").innerHTML = "This&#32;BML&#32;function&#32;converts&#32;Flattened&#32;BOM&#32;in&#32;to&#32;Hierarchical&#32;BOM."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Json convertbomtohier(Json bomJson)</br><br/><b>Behavior/Example</b>:<br>1. First parameter is bomJson which is of Json type.\<br\/\>\<br\/\>Example: \<br\/\>flatBomStr = \"{\\\"partNumber\\\":\\\"part1\\\",\\\"quantity\\\":1,\\\"id\\\":\\\"Bom1\\\",\\\"parentId\\\":\\\"\\\",\\\"children\\\":[{\\\"partNumber\\\":\\\"part2\\\",\\\"quantity\\\":2,\\\"id\\\":\\\"Bom2\\\",\\\"parentId\\\":\\\"Bom1\\\"},{\\\"partNumber\\\":\\\"part3\\\",\\\"quantity\\\":3,\\\"id\\\":\\\"Bom3\\\",\\\"parentId\\\":\\\"Bom1\\\"},{\\\"partNumber\\\":\\\"part4\\\",\\\"quantity\\\":4,\\\"id\\\":\\\"Bom4\\\",\\\"parentId\\\":\\\"Bom2\\\"},{\\\"partNumber\\\":\\\"part5\\\",\\\"quantity\\\":5,\\\"id\\\":\\\"Bom5\\\",\\\"parentId\\\":\\\"Bom2\\\"}]}\"; \<br\/\>flatBom = json(flatBomStr);\<br\/\>hierBom = convertbomtohier(flatBom); \<br\/\>print hierBom;\<br\/\>Output : \<br\/\>{\"partNumber\":\"part1\",\"quantity\":1,\"id\":\"Bom1\",\"parentId\":\"\",\"children\":[{\"partNumber\":\"part2\",\"quantity\":2,\"id\":\"Bom2\",\"parentId\":\"\",\"children\":[{\"partNumber\":\"part4\",\"quantity\":4,\"id\":\"Bom4\",\"parentId\":\"\"},{\"partNumber\":\"part5\",\"quantity\":5,\"id\":\"Bom5\",\"parentId\":\"\"}]},{\"partNumber\":\"part3\",\"quantity\":3,\"id\":\"Bom3\",\"parentId\":\"\"}]}\<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'convertbomtoflat')) {
        document.getElementById("_function_description").innerHTML = "This&#32;BML&#32;function&#32;converts&#32;Hierarchical&#32;BOM&#32;in&#32;to&#32;Flattened&#32;BOM."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Json convertbomtoflat(Json bomJson)</br><br/><b>Behavior/Example</b>:<br>A Flat Bom flattens all its descendants, including children, grand-children, etc, and stores them as its direct children.\<br\/\>\<br\/\>1. First parameter is bomJson which is of Json type.\<br\/\>\<br\/\>Example: \<br\/\>hierBomStr=\"{\\\"partNumber\\\":\\\"part1\\\",\\\"quantity\\\":1,\\\"id\\\":\\\"Bom1\\\",\\\"parentId\\\":\\\"\\\",\\\"children\\\":[{\\\"partNumber\\\":\\\"part2\\\",\\\"quantity\\\":2,\\\"id\\\":\\\"Bom2\\\",\\\"parentId\\\":\\\"\\\",\\\"children\\\":[{\\\"partNumber\\\":\\\"part4\\\",\\\"quantity\\\":4,\\\"id\\\":\\\"Bom4\\\",\\\"parentId\\\":\\\"\\\"},{\\\"partNumber\\\":\\\"part5\\\",\\\"quantity\\\":5,\\\"id\\\":\\\"Bom5\\\",\\\"parentId\\\":\\\"\\\"}]},{\\\"partNumber\\\":\\\"part3\\\",\\\"quantity\\\":3,\\\"id\\\":\\\"Bom3\\\",\\\"parentId\\\":\\\"\\\"}]}\";\<br\/\>hierBom = json(hierBomStr);\<br\/\>flatBom = convertbomtoflat(hierBom);\<br\/\>print flatBom;\<br\/\>Output : \<br\/\>{\"partNumber\":\"part1\",\"quantity\":1,\"id\":\"Bom1\",\"parentId\":\"\",\"children\":[{\"partNumber\":\"part2\",\"quantity\":2,\"id\":\"Bom2\",\"parentId\":\"Bom1\"},{\"partNumber\":\"part3\",\"quantity\":3,\"id\":\"Bom3\",\"parentId\":\"Bom1\"},{\"partNumber\":\"part4\",\"quantity\":4,\"id\":\"Bom4\",\"parentId\":\"Bom2\"},{\"partNumber\":\"part5\",\"quantity\":5,\"id\":\"Bom5\",\"parentId\":\"Bom2\"}]}\<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'getattachmentdata')) {
        document.getElementById("_function_description").innerHTML = "This&#32;function&#32;retrieves&#32;file&#32;name,&#32;file&#32;content&#32;and&#32;MIME&#32;type&#32;of&#32;a&#32;given&#32;file&#32;attachment&#32;in&#32;a&#32;commerce&#32;context."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Dict&lt;anytype&gt; getattachmentdata(String attachmentId [,Boolean asBytes])</br><br/><b>Behavior/Example</b>:<br>1. Returns anytype dictionary containing three keys \"filename\", \"filecontent\" and \"mimetype\".\<br\/\>2. First parameter is the file attachment ID of type String.\<br\/\>3. Second parameter is optional and is false by default.\<br\/\>4. If asBytes is set to true, value of \"filecontent\" would be a bytearray.\<br\/\>5. If asBytes is set to false, value of \"filecontent\" would be a Base64 encoded String.\<br\/\>6. Error is thrown if the attachment ID passed is invalid.\<br\/\>7. If there is no attachment, an empty anytype dictionary would be returned.\<br\/\>\<br\/\>Example: \<br\/\>\/\/consider \'maindocFileAttachment\' as main document attachment attribute and \'subdocFileAttachment\' as sub document attachment attribute \<br\/\>mainattachment = getattachmentdata(maindocFileAttachment);\<br\/\>print get(mainattachment ,\"filename\", \"string\"); \/\/ Prints the file name of main attachment attribute\<br\/\>print get(mainattachment ,\"filecontent\", \"string\"); \/\/ Prints the file content of main attachment attribute as Base64 encoded String\<br\/\>print get(mainattachment ,\"mimetype\", \"string\"); \/\/ Prints the mime type of main attachment attribute\<br\/\>\/\/To access the file attached to sub document attachment attribute\<br\/\>for line in lineItems {\<br\/\>&nbsp;&nbsp;subdocattachment = getattachmentdata(line.subdocFileAttachment);\<br\/\>}\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'globaldictset')) {
        document.getElementById("_function_description").innerHTML = "Adds&#32;or&#32;updates&#32;key-value&#32;pair&#32;to&#32;global&#32;cache."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String globaldictset(String key, String value[, Integer minTimeToLive]) </br><br/><b>Behavior/Example</b>:<br>1. The first parameter is the key which is of type String.\<br\/\>2. The second parameter is the value which is of type String. \<br\/\>3. The third parameter specifies the minimum time, in minutes, the key-value pair is guaranteed to exist in the global cache.\<br\/\> 4. minTimeToLive is optional and default value is 1440 minutes (1 day).\<br\/\> 5. minTimeToLive should be greater than 0 and less than or equal to 525600 minutes(365 days).\<br\/\>6. If key is null or empty, unique key will be generated and added to global cache.\<br\/\>7. If key is already present, the provided value will be updated for the corresponding key.\<br\/\>8. This BML function returns the key added to the global cache.\<br\/\>9. This function is independent of user session.\<br\/\>\<br\/\>Example: \<br\/\>storedkey = globaldictset(\"key1\", \"value1\"); \/\/mintimeToLive will be defaulted to 1440 \<br\/\>print storedkey; \<br\/\>\/\/Output: key1 \<br\/\>\<br\/\>storedkey2 = globaldictset(\"\", \"value2\", 1000); \/\/ This record will be removed by the next scheduled batch that runs after 1000 mins\<br\/\>print storedkey2; \/\/ unique key will be generated and returned.\<br\/\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'addpartstotransaction')) {
        document.getElementById("_function_description").innerHTML = "Adds&#32;Part&#32;Line&#32;Items&#32;to&#32;the&#32;Transaction."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>JsonArray addpartstotransaction(JsonArray&lt;Json&gt parts[, String priceBookVarName[, String[] resultAttributeArray]) </br><br/><b>Behavior/Example</b>:<br>1. The first parameter is a JsonArray of Json objects.\<br\/\>A Part Json object example:\<br\/\>{\<br\/\>\t\"partNumber\": \"part1\",\<br\/\>\t\"quantity\": 1,\<br\/\>\t\"price\": 3.50,\<br\/\>\t\"parentDocNumber\": 2\<br\/\>}\<br\/\>\<br\/\>\"price\" and \"parentDocNumber\" are both optional.\<br\/\>\<br\/\>2. The second(optional) parameter is a String value for setting the Transaction Price Book, if not already set. \<br\/\>\<br\/\>3. The second or third(optional) parameter is a String[] for providing document attributes in the result Json.\<br\/\>Example:\<br\/\>\<code\>[\"_part_quantity\", \"_document_number\", \"_part_number\", \"_price_item_price_each\", \"myAttribute\"]\<\/code\>\<br\/\>\<br\/\>will result in a response similar to the following when adding 1 part:\<br\/\>\<br\/\>\<code\>[{\"_part_quantity\":\"1\", \"_document_number\":\"2\", \"_part_number\":\"part1\", \"_price_item_price_each\":\"3.50\", \"myAttribute\":\"my custom value\"}]\<\/code\>\<br\/\>\<br\/\>Other Examples:\<br\/\>\<br\/\>Example 1:\<br\/\>\<code\>resultArray = jsonarray(); \/\/ function return is json array\<br\/\>\<br\/\>partObj = json(); \/\/ part data is json object\<br\/\>jsonput(partObj , \"partNumber\", \"part1\");\<br\/\>jsonput(partObj , \"quantity\", 1);\<br\/\>\<br\/\>inputArray = jsonarray(); \/\/ parts to add should be added to json array\<br\/\>jsonarrayappend(inputArray , partObj );\<br\/\>\<br\/\>resultArray = addpartstotransaction(inputArray, \"_default_price_book\");\<br\/\>\<br\/\>print(resultArray); \/\/ prints: [{\"_document_number\":\"2\", \"_part_number\":\"part1\", \"_price_quantity\":\"1\", \"_price_list_price_each\":\"3.50\", \"_parent_doc_number\":\"\"}]\<br\/\>\<\/code\>\<br\/\>Example 2:\<br\/\>\<code\>resultArray = jsonarray();\<br\/\>\<br\/\>part1 = json();\<br\/\>jsonput(partObj , \"partNumber\", \"part1\");\<br\/\>jsonput(partObj , \"quantity\", 1);\<br\/\>\<br\/\>part2 = json();\<br\/\>jsonput(partObj , \"partNumber\", \"part2\");\<br\/\>jsonput(partObj , \"quantity\", 2);\<br\/\>jsonput(partObj , \"price\", 4.50); \/\/ overrides price\<br\/\>\<br\/\>part3 = json();\<br\/\>jsonput(partObj , \"partNumber\", \"part3\");\<br\/\>jsonput(partObj , \"quantity\", 3);\<br\/\>jsonput(partObj , \"parentDocNumber\", 2); \/\/ adds part as child of parent\<br\/\>\<br\/\>inputArray = jsonarray();\<br\/\>jsonarrayappend(inputArray , part1 );\<br\/\>jsonarrayappend(inputArray , part2 );\<br\/\>jsonarrayappend(inputArray , part3 );\<br\/\>\<br\/\>resultAttributeArray = string[5]; \/\/ defines the attributes to return\<br\/\>resultAttributeArray[0] = \"_document_number\";\<br\/\>resultAttributeArray[1] = \"_part_number\";\<br\/\>resultAttributeArray[2] = \"_price_quantity\";\<br\/\>resultAttributeArray[3] = \"_price_list_price_each\";\<br\/\>resultAttributeArray[4] = \"_parent_doc_number\";\<br\/\>\<br\/\>resultArray = addpartstotransaction(inputArray, resultAttributeArray);\<br\/\>\<br\/\>print(resultArray); \<br\/\>\/\/ prints: [\<br\/\>\/\/ {\"_document_number\":\"3\", \"_part_number\":\"part1\", \"_price_quantity\":\"1\", \"_price_list_price_each\":\"3.5\", \"_parent_doc_number\":\"\"},\<br\/\>\/\/ {\"_document_number\":\"4\", \"_part_number\":\"part2\", \"_price_quantity\":\"2\", \"_price_list_price_each\":\"4.5\", \"_parent_doc_number\":\"\"},\<br\/\>\/\/ {\"_document_number\":\"5\", \"_part_number\":\"part3\", \"_price_quantity\":\"3\", \"_price_list_price_each\":\"3.5\", \"_parent_doc_number\":\"2\"}\<br\/\>\/\/]\<\/code\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'addtotransaction')) {
        document.getElementById("_function_description").innerHTML = "Adds&#32;Models&#32;to&#32;the&#32;Transaction."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>JsonArray addtotransaction(JsonArray&lt;Json&gt items[, String priceBookVarName[, String[] resultAttributeArray]) </br><br/><b>Behavior/Example</b>:<br>1. The first parameter is a JsonArray of Json objects.\<br\/\>A Model Json object example:\<br\/\>{\<br\/\>\t\"_model_variable_name\": \"model1\",\<br\/\>\t\"_model_product_line_var_name\": \"productLine1\",\<br\/\>\t\"_model_segment_var_name\": \"productFamily1\",\<br\/\>\t\"_price_quantity\": 1,\<br\/\>\t\"_price_unit_price_each\": 3.50,\<br\/\>\t\"_config_attr_values\":{\<br\/\>\t\t\"configTextAttr\" : \"hello world\",\<br\/\>\t\t\"configNumericAttr\" : 42,\<br\/\>\t\t\"configDateTimeAttr\" : \"2019-01-01 23:59:59\"\<br\/\>\r\r}\<br\/\>}\<br\/\>\<br\/\>\"_price_unit_price_each\" and \"_config_attr_values\" both are optional.\<br\/\>\<code\>\"_config_attr_values\"\<code\>: This field will hold a JSON object that holds configuration attributes. It is used to set the values of Configurable attributes when Reconfigure action is performed on a model.\<br\/\>\<br\/\>2. The second(optional) parameter is a String value for setting the Transaction Price Book, if not already set. \<br\/\>\<br\/\>3. The second or third(optional) parameter is a String[] for providing document attributes in the result Json.\<br\/\>Example:\<br\/\>\<code\>[\"_part_quantity\", \"_document_number\", \"_price_item_price_each\", \"myAttribute\"]\<\/code\>\<br\/\>\<br\/\>will result in a response similar to the following when adding a model:\<br\/\>\<br\/\>\<code\>[{\"_part_quantity\":\"1\", \"_document_number\":\"2\", \"_price_item_price_each\":\"3.50\", \"myAttribute\":\"my custom value\"}]\<\/code\>\<br\/\>\<br\/\>Other Examples:\<br\/\>\<br\/\>Example 1:\<br\/\>\<code\>resultArray = jsonarray(); \/\/ function return is json array\<br\/\>\<br\/\>modelObj = json(); \/\/ model data is json object\<br\/\>jsonput(modelObj , \"_model_variable_name\", \"model1\");\<br\/\>jsonput(modelObj , \"_model_product_line_var_name\", \"productLine1\");\<br\/\>jsonput(modelObj , \"_model_segment_var_name\", \"productFamily1\");\<br\/\>jsonput(modelObj , \"_price_quantity\", 1);\<br\/\>\<br\/\>inputArray = jsonarray(); \/\/ items to add should be added to json array\<br\/\>jsonarrayappend(inputArray , modelObj );\<br\/\>\<br\/\>resultArray = addtotransaction(inputArray, \"_default_price_book\");\<br\/\>\<br\/\>print(resultArray); \<br\/\>\/\/ prints: [{\"_document_number\":\"2\", \"_price_quantity\":\"1\", \"_price_unit_price_each\":\"3.50\", \"_model_variable_name\":\"model1\", \"_model_product_line_var_name\":\"productLine1\", \"_model_segment_var_name\":\"productFamily1\"}]\<br\/\>\<\/code\>\<br\/\>Example 2:\<br\/\>\<code\>resultArray = jsonarray();\<br\/\>\<br\/\>model1 = json();\<br\/\>jsonput(modelObj , \"_model_variable_name\", \"model1\");\<br\/\>jsonput(modelObj , \"_model_product_line_var_name\", \"productLine1\");\<br\/\>jsonput(modelObj , \"_model_segment_var_name\", \"productFamily1\");\<br\/\>jsonput(modelObj , \"_price_quantity\", 1);\<br\/\>\<br\/\>model2 = json();\<br\/\>jsonput(modelObj , \"_model_variable_name\", \"model2\");\<br\/\>jsonput(modelObj , \"_model_product_line_var_name\", \"productLine2\");\<br\/\>jsonput(modelObj , \"_model_segment_var_name\", \"productFamily2\");\<br\/\>jsonput(modelObj , \"_price_quantity\", 2);\<br\/\>jsonput(modelObj , \"_price_unit_price_each\", 4.50); \/\/ overrides price\<br\/\>\<br\/\>model3 = json();\<br\/\>jsonput(modelObj , \"_model_variable_name\", \"model3\");\<br\/\>jsonput(modelObj , \"_model_product_line_var_name\", \"productLine3\");\<br\/\>jsonput(modelObj , \"_model_segment_var_name\", \"productFamily3\");\<br\/\>jsonput(modelObj , \"_price_quantity\", 3);\<br\/\>\<br\/\>config = json(); \/\/create a json for _config_attr_values field\<br\/\>jsonput(config, \"configTextAttr\", \"hello world\");\<br\/\>jsonput(config, \"configNumericAttr\", 42);\<br\/\>\<br\/\>jsonput(modelObj , \"_config_attr_values\", config);\/\/ add \"_config_attr_values\" json to model json\<br\/\>\<br\/\>inputArray = jsonarray();\<br\/\>jsonarrayappend(inputArray , model1 );\<br\/\>jsonarrayappend(inputArray , model2 );\<br\/\>jsonarrayappend(inputArray , model3 );\<br\/\>\<br\/\>resultAttributeArray = string[4]; \/\/ defines the attributes to return\<br\/\>resultAttributeArray[0] = \"_document_number\";\<br\/\>resultAttributeArray[1] = \"_model_variable_name\";\<br\/\>resultAttributeArray[2] = \"_price_quantity\";\<br\/\>resultAttributeArray[3] = \"myCommerceAttr\";\<br\/\>resultArray = addtotransaction(inputArray,\"myPriceBookName\", resultAttributeArray);\<br\/\>\<br\/\>print(resultArray); \<br\/\>\/\/ prints: [\<br\/\>\/\/ {\"_document_number\":\"3\", \"_model_variable_name\":\"model1\", \"_price_quantity\":\"1\", \"_price_unit_price_each\":\"3.5\", \"myCommerceAttr\":\"Value1\"},\<br\/\>\/\/ {\"_document_number\":\"4\", \"_model_variable_name\":\"model2\", \"_price_quantity\":\"2\", \"_price_unit_price_each\":\"4.5\", \"myCommerceAttr\":\"Value2\"},\<br\/\>\/\/ {\"_document_number\":\"5\", \"_model_variable_name\":\"model3\", \"_price_quantity\":\"3\", \"_price_unit_price_each\":\"3.5\", \"myCommerceAttr\":\"Value3\"}\<br\/\>\/\/]\<\/code\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'generatehmacmessage')) {
        document.getElementById("_function_description").innerHTML = "Converts&#32;the&#32;input&#32;message&#32;to&#32;a&#32;HMAC&#32;generated&#32;string&#32;using&#32;a&#32;secret&#32;key."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String generatehmacmessage(String inputmessage, String key [, String algorithm])</br><br/><b>Behavior/Example</b>:<br>This function computes a Hash-based message authentication code (HMAC) from a cryptographic hash function using a secret key for given input message. A HMAC is a small set of data that helps authenticate the nature of message. It protects the integrity and the authenticity of the message. \<br\>\nThis function takes 3 arguments: \<br\/\>\n1. inputmessage - \<tt\>string\<\/tt\> : Message that needs to be HMAC generated \<br\/\>\n2. key - \<tt\>string\<\/tt\> : Secret Key \<br\/\>\n3. algorithm - (optional) \<tt\>string\<\/tt\> : Cryptographic hash algorithm for HMAC generation \<br\/\>\nAvailable algorithms: \<br\/\>\na.\<code\> SHA256 \<\/code\> (Default)\<br\/\>b.\<code\> SHA384 \<\/code\>\<br\/\>\nc.\<code\> SHA512 \<\/code\>\<br\/\>\nd.\<code\> SHA1 \<\/code\>\<br\/\>\ne.\<code\> MD5 \<\/code\>\<br\/\> \nNOTE: This parameter is case-sensitive.\<br\/\>\<br\/\>Example: \<br\/\>\n1.\<code\> inputmessage = \"This is an input example for HMAC authentication.\";\<br\/\>key = \"cfthsnkjsavjiCe=\";\<br\/\>hmac = generatehmacmessage(inputmessage,key);\<\/code\>  \/\/uses Default algorithm- SHA256\<br\/\>\<code\>print(hmac);\<\/code\>\<br\/\>\/\/prints \<code\>\<tt\>cec5cc9241a2529a0de2b1b4cb250738ef52ae5f8bf6db9034bd4dbf4e37bee6\<tt\/\>\<\/code\>\<br\/\>\<br\/\>2.\<code\> inputmessage = \"This is an input example for HMAC authentication.\";\<br\/\>key = \"cfthsnkjsavjiCe=\";\<br\/\>algo = \"MD5\";\<br\/\>hmac = generatehmacmessage(inputmessage, key, algo);\<br\/\>print(hmac);\<\/code\>\<br\/\>\/\/prints \<code\>\<tt\>eaf3702517fef48d3f114f32a3c3394b\<tt\/\>\<\/code\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'stringbuilder')) {
        document.getElementById("_function_description").innerHTML = "Creates&#32;a&#32;StringBuilder&#32;object."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>StringBuilder stringbuilder([String string[, String[] stringArray[, StringBuilder stringBuilder]]])</br><br/><b>Behavior/Example</b>:<br>Parameters can be any combination of String, String[] and StringBuilder:\<br\/\>Example:\<br\/\>\<code\>sb = stringbuilder(\"a\", \"b\", \"c\");\<br\/\>print(sb);\<\/code\>\<br\/\>Output:\<br\/\>\<code\>abc\<\/code\>\<br\/\>\<br\/\>Example:\<br\/\>\<code\>xyz = string[]{\"x\", \"y\", \"z\"};\<br\/\>sb = stringbuilder(xyz, \"a\", \"b\", \"c\");\<br\/\>print(sb);\<\/code\>\<br\/\>Output:\<br\/\>\<code\>xyzabc\<\/code\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'sbappend')) {
        document.getElementById("_function_description").innerHTML = "Appends&#32;Strings,&#32;String[]&#32;and&#32;StringBuilders&#32;to&#32;a&#32;StringBuilder&#32;object."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>StringBuilder sbappend(StringBuilder stringBuilder[String string[, String[] stringArray[, StringBuilder stringBuilder]]])</br><br/><b>Behavior/Example</b>:<br>Parameters can be any combination of String, String[] and StringBuilder:\<br\/\>Example:\<br\/\>\<code\>sb = stringbuilder();\<br\/\>sbappend(sb, \"a\", \"b\", \"c\");\<br\/\>print(sb);\<\/code\>\<br\/\>Output:\<br\/\>\<code\>abc\<\/code\>\<br\/\>\<br\/\>Example:\<br\/\>\<code\>sb = stringbuilder();\<br\/\>xyz = string[]{\"x\", \"y\", \"z\"};\<br\/\>a123 = string[]{\"1\", \"2\", \"3\"};\<br\/\>sbappend(sb, xyz, \"a\", \"b\", \"c\", a123);\<br\/\>print(sb);\<\/code\>\<br\/\>Output:\<br\/\>\<code\>xyzabc123\<\/code\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'sbtostring')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;the&#32;String&#32;value&#32;of&#32;a&#32;StringBuilder."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String sbtostring(StringBuilder stringBuilder)</br><br/><b>Behavior/Example</b>:<br>Parameter must be a StringBuilder, returns a String.\<br\/\>Example:\<br\/\>\<code\>sb = stringbuilder(\"1\", \"~\", \"myVarName\", \"~\", \"MyVarNames value.\" );\<br\/\>return sbtostring(sb);\<\/code\>\<br\/\>Output:\<br\/\>\<code\>1~myVarName~MyVarNames value.\<\/code\>\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'getsystemattrvalues')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;String[]&#32;containing&#32;attribute&#32;values&#32;from&#32;a&#32;System&#32;Configuration."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>String[] getsystemattrvalues(String jsonPath)</br><br/><b>Behavior/Example</b>:<br>Parameters:\<br\/\>1. String value that should be a JsonPath Expression.\<br\/\>Returns a String[] containing the values of the specified JsonPath Expression.\<br\/\>\<br\/\>Additional Info:\<br\/\>This function is intended to be used with System Configuration Implementations. If the JsonPath does not return an array of single values, an empty String[] will be returned.\<br\/\>\<br\/\>The function will also return empty values for any models that are yet to be configured (including the initial creation of the System) and paths that do not return values.\<br\/\>The empty array should be handled accordingly.\<br\/\>\<br\/\>Example:\<br\/\>modelValue = String[];\<br\/\>modelValue = getsystemattrvalues(\"$.configAttributes.attributeVarname\");\<br\/\>\<br\/\>\<br\/\>Debugging:\<br\/\>To use the debugger in config, the user must provide a valid transaction id and the document number of the root bom that is contained in the line items of the provided transaction id.\<br\/\>The format for the Context Parameters is as follows: bsId=123456,documentNumber=2\<br\/\>\<br\/\>*For additional help on JsonPath syntax, please reference the online help.\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'getsystemmultipleattrvalues')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;Dictionary&#32;(key:&#32;String,&#32;value:&#32;String[])&#32;containing&#32;attribute&#32;values&#32;from&#32;a&#32;System&#32;Configuration."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Dictionary&lt;String[]&gt; getsystemmultipleattrvalues(Dictionary&lt;String&gt;)</br><br/><b>Behavior/Example</b>:<br>Parameters:\<br\/\>1. Dictionary with String keys and String values.  The values are expected to be JsonPath Expressions.\<br\/\>Returns a Dictionary (key: String and value: String[]) *The key is the same string as the input Dictionary key.\<br\/\>\<br\/\>Additional Info:\<br\/\>This function is intended to be used with System Configuration Implementations. If a JsonPath does not return an array of single values, that key-value pair\<br\/\>will result in an empty array.\<br\/\>\<br\/\>The function will also return empty arrays for any models that are yet to be configured (including the initial creation of the System) and paths that do not return values.\<br\/\>The empty arrays should be handled accordingly.\<br\/\>\<br\/\>Example:\<br\/\>jsonPaths = dict(\"string\");\<br\/\>put(jsonPaths, \"attributeVarname\", \"$.configAttributes.attributeVarname\");\<br\/\>put(jsonPaths, \"childAttributeVarname\", \"$.children[*].configAttributes.childAttributeVarname\");\<br\/\>\<br\/\>interModelValues = dict(\"string[]\");\<br\/\>interModelValues = getsystemmultipleattrvalues(jsonPaths);\<br\/\>\<br\/\>values = String[];\<br\/\>values = get(interModelValues, \"attributeVarname\");\<br\/\>\<br\/\>\<br\/\>Debugging:\<br\/\>To use the debugger in config, the user must provide a valid transaction id and the document number of the root bom that is contained in the line items of the provided transaction id.\<br\/\>The format for the Context Parameters is as follows: bsId=123456,documentNumber=2\<br\/\>\<br\/\>*For additional help on JsonPath syntax, please reference the online help.\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'getsystemdata')) {
        document.getElementById("_function_description").innerHTML = "Returns&#32;a&#32;Json&#32;object&#32;containing&#32;the&#32;entire&#32;representation&#32;of&#32;the&#32;System&#32;Config&#32;Data."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>Json getsystemdata()</br><br/><b>Behavior/Example</b>:<br>Returns a Json object representing the entire System Config Data \<br\/\>\<br\/\>Additional Info:\<br\/\>This function is intended to be used with System Configuration Implementations. If System Config Data does not exist, an empty Json is returned.\<br\/\>\<br\/\>The function will also return an empty Json for a System Configuration that has not been configured.  The empty Json should\<br\/\>be handled accordingly.\<br\/\>\<br\/\>Example:\<br\/\>systemJson = json();\<br\/\>systemJson = getsystemdata();\<br\/\>\<br\/\>\<br\/\>Debugging:\<br\/\>To use the debugger in config, the user must provide a valid transaction id and the document number of the root bom that is contained in the line items of the provided transaction id.\<br\/\>The format for the Context Parameters is as follows: bsId=123456,documentNumber=2\<br\/\></br>"
    }
    if (areBothEqual(currentText, 'setattributevalue')) {
        document.getElementById("_function_description").innerHTML = "This&#32;function&#32;sets&#32;the&#32;value&#32;of&#32;a&#32;Commerce&#32;attribute."
        document.getElementById("_function_syntax").innerHTML = "<b>Syntax</b>:<br>setattributevalue([Integer documentNumber, ] String Literal variableName, String(or Float, Integer, Date, Boolean) value)</br><br/><b>Behavior/Example</b>:<br>Parameters:\<br\/\>1. Optional Integer document number.\<br\/\>2. Variable name of a main or sub document Commerce attribute, as a String Literal.\<br\/\>3. Value to be set, as the correct type for that attribute.\<br\/\>Additional Info:\<br\/\>Sets the provided value to the named Commerce attribute, returning nothing. The type of the value should match the type of the Commerce attribute, with array sets\<br\/\>being represented by json array reference ids created by the jsonarrayrefid function.\<br\/\>The setattributevalue function can only be used in the Advanced Default (main document), Advanced Default - Before Formulas (sub document), \<br\/\>Advanced Default - After Formulas (sub document), Advanced Modify - Before Formulas, Advanced Modify - After Formulas, and Commerce Libraries when used within one \<br\/\>of the allowed areas. Attributes being set by this function will return the updated value in the remaining of the script.  Values set in this way will persist as \<br\/\>if they were returned as part of a bulk modification.\<br\/\>\<br\/\>Example:\<br\/\>\/\/Set the value of an array set containing a text field, and a single row, named arraySet.\<br\/\>newRow = json();\<br\/\>jsonput(newRow, \"textField\", \"example\");\<br\/\>jsonarrayappend(arraySet, newRow);\<br\/\>setattributevalue(1, \"arraySet\", jsonarrayrefid(arraySet));\<br\/\></br>"
    }

}

var lastDisplayedList;

function displayFunctionList(functionTypeField) {
    if (lastDisplayedList) {
        lastDisplayedList.style.display = "none";
    }
    var functionType = getSelectedValue(functionTypeField);
    lastDisplayedList = document.getElementById("_functionList" + functionType);
    if (lastDisplayedList) {
        lastDisplayedList.style.display = _displayRow;
    }
    if (functionType != 1) {
        allFunctionList = document.getElementById("_functionList1");
        allFunctionList.style.display = "none";
    }
}

displayFunctionList(document.bmForm._functionType);

function expandTextArea() {
    var tarea = document.getElementById('bm_script_id');
    if (tarea.style.display === "none") {
        tarea = document.getElementById("frame_bm_script_id");
        tarea.style.width = 900 + "px";
        tarea.style.height = 600 + "px";

    } else {
        tarea.rows = tarea.rows + 20;
        tarea.cols = tarea.cols + 18;
    }
    var expButtonTable = document.getElementById('expand_button');
    var colpButtonTable = document.getElementById('collapse_button');
    expButtonTable.style.display = "none";
    colpButtonTable.style.display = "block";
}

function collapseTextArea() {
    var tarea = document.getElementById('bm_script_id');
    if (tarea.style.display === "none") {
        tarea = document.getElementById("frame_bm_script_id");
        tarea.style.width = 600 + "px";
        tarea.style.height = 500 + "px";

    } else {
        tarea.rows = tarea.rows - 20;
        tarea.cols = tarea.cols - 18;
    }

    var expButtonTable = document.getElementById('expand_button');
    var colpButtonTable = document.getElementById('collapse_button');
    expButtonTable.style.display = "block";
    colpButtonTable.style.display = "none";
}

var editorInit = false;

function initEditor() {
    if (!editorInit && document.getElementById("script").style.display === 'block') {
        editAreaLoader.isValidBrowser = true;
        editAreaLoader.init({
            id: "bm_script_id",
            start_highlight: true,
            allow_toggle: false,
            language: "en",
            syntax: "bml",
            toolbar: "search, go_to_line, |, undo, redo, |, select_font,|,highlight,|, help"
        });
        editorInit = true;
    };
}