                                                    "data": "//\tUPDATE PRICING -- ADVANCED MODIFICATION\t//\n\t//\tVariables\t// \n\t/* \n\tparam: \n\t\tinputActionName - submit / update \n\tAssumption: \n\t\t- a) Parts Custom fields \n\t\t\tfield1 - Family\n\t\t\tfield2 - Cost\n\t\t\tfield3 - max discount\n\t\t\tfield4 - maintenance %\n\t*/\n\n\t/*\n\tDefinition for WS logs Alex Z. 9/9/2013\n\t*/inputDataArray = split(actionName,\"##\");\n\tinputActionName = inputDataArray[0];\n\ttriggeredAttrName = \"\";\n\tif(sizeofArray(inputDataArray) > 1){\n\t\ttriggeredAttrName = inputDataArray[1];\n\t}\n\tstart = getcurrenttimeinmillis();\n\tret = \"\";\n\tcustomSettingRecs = bmql(\"select IsActive from CustomSettings where Category = 'WS_isdebug'\"); // set this to true to turn on logs for WS\n\tWS_isdebug = \"\";\n\tfor eachRec in customSettingRecs{\n\t\tWS_isdebug =  get(eachRec, \"IsActive\");\n\t\tbreak;\n\t}\n\tdays_to_keep = 2;   // set number for days to keep in logs\n\tsitename = _system_supplier_company_name;\n\tvalid_record_date = getdate();\n\tnewlogs = string[];\n\n\t// =============DEBUGGING VARIABLE=========================\n\tIS_DEBUGGING = true; //set this to true while debugging.\n\t//=========================================================\n\n\t// ===================CONSTANTS============================\n\tnumDecimal = 2;\n\thundredPercent = 100.0;\n\tdatePerference = \"yyyy-MM-dd\"; //substring(_system_user_date_pref, 0, 10);\n\t// =================CONCAT ISSUE==========================\n\tcounter = 0;\n\treturnarray = string[1000];\n\tcountforinit = 0;\n\tfor i in returnarray{\n\t\treturnarray[countforinit] = \"\";\n\t\tcountforinit = countforinit + 1;\n\t}\n\treturnemptyarray = returnarray;\n\t// =========DECLARATION & INITIALIZATION - START===================\n\tresult = \"\";\n\tapprovalFlag=false;\n\tmanualEstimateModelFlag = false;\n\tmanualEstimateDocNumDict = dict(\"string\");\n\tuserGroup = _system_user_groups;\n\tlistGroup = split(userGroup, \"+\");\n\tdocumentCurrencyPref = _system_current_document_currency_pref;\n\tnumCustomGroup = 6;\n\tgroups = range(numCustomGroup);\n\tgroupNum = 0;\n\tmodelOrderDict = dict(\"integer\");//stores sequence # as key and uses document # as value\n\tlineOrderDict = dict(\"integer\");//stores sequence # as key and uses document # as value\n\tnumOfLines = 0;\n\tmodel = \"model\";\n\tpart = \"part\";\n\tevalResult = \"\";\t\tparams = \"\";\n\tlistPrice = 0.0;\t\textendedList = 0.0;\n\tdiscount = 0.0;\t\t\tdiscountType = \"\";\n\tdiscount2 = 0.0;\t\textendedDiscount = 0.0;\n\tdiscountAmt = 0.0;\t\tdiscountPercent = 0.0;\n\textendedCost = 0.0;\t\tcostEa = 0.0;\n\textendedList = 0.0;\t\tnetPriceEach = 0.0;\n\textendedNet = 0.0;\t\tnetMarginAmtEach = 0.0;\n\tnetMarginAmt = 0.0;\t\tcustomGroup = \"\";\n\tcustomGroupSubtotal = 0.0;\tmaintenancePercent = 0.0;\n\tmaintenanceSubtotalLine = 0.0;\n\n\n\t// Header level Var\n\ttotalCost = 0.0;\n\ttotalListPrice = 0.0;\n\ttotalLineItemDiscounts = 0.0;\n\ttotalNetPrice = 0.0;\n\ttotalWeightQuote = 0;\n\n\tsubtotalPreQuoteDiscounts = 0.0;\n\tbottomLineDiscount2 = 0.0;\n\ttotalDiscount = 0.0;\n\tsubtotalPostQuoteDiscounts = 0.0;\n\ttotal = 0.0;\n\ttotalMarginPercent = 0.0;\n\ttotalMarginDollar = 0.0;\n\ttotalMiscCharges = 0.0;\n\tbottomLinediscountAmt = 0.0;\n\tbottomLineDiscountPercent = 0.0;\n\tmaintenanceSubtotalQuote = 0.0;\n\tfreightPrice = 0.0;\n\tfreightCarrierName = \"\";\n\tfreightShipVia = \"\";\n\tfobStreet = \"\";\n\tfobCity = \"\";\n\tfobState = \"\";\n\tfobCountry = \"\";\n\tfobZip = \"\";\n\tcarrierid = \"\";\n\tfreightIndicator = \"\";\n\tburiedFreightModelTot = 0.0;\n\tgetItemInfoxmlFile = \"\";\n\tpartNumDocDict = dict(\"string[]\"); // Part Number and related document list, key is the part number, value is a\tlist of documents\n\tpartNumList = String[];\t // Unique Part Number List \n\tfamilyList = String[]; // Unique Family List \n\tpartsDict = dict(\"string\");\t//Part number and its custom fields list, key is the part number, value is a concatenated string with the custom fields \n\tparentDocNumDict = dict(\"string\"); // Key: Part Document Number, Value = parent document number\n\tmodelSeqDocNumDict = dict(\"string\");//key: Seqence #, value: doc num\n\tlineSeqDocNumDict = dict(\"string\");//key: Sequence #, value: doc num\n\tlineDocSeqNumDict = dict(\"integer\");//key: DocNum, value: Sequence #\n\tcustomGroupDict = dict(\"string\"); // Key: document number \n\tcustomGroupSubtotalDict = dict(\"float\"); // Key: using index \n\tcustomGroupDiscountDict = dict(\"float\"); // Key: using index \n\tcustomGroupDiscountList = Float[] { customGroup1Discount_quote, customGroup2Discount_quote, customGroup3Discount_quote, customGroup4Discount_quote, customGroup5Discount_quote, customGroup6Discount_quote};\n\tungroupDiscount = 0.0;\n\tungroupSubtotal = 0.0;\n\tlineCustomField8 = dict(\"string\");//each lines customPartField8 value\n\tinventoryType_Dict = dict(\"string\");\n\tfield1Dict = dict(\"string\"); // Key: document number \n\tfield2Dict = dict(\"string\"); // Key: document number \n\tfield3Dict = dict(\"string\"); // Key: document number \n\tfield4Dict = dict(\"string\");\n\tlistPriceDict = dict(\"float\"); // Key: document number \n\tmodelListPriceDict = dict(\"float\"); // Key: document number \n\tqtyDict = dict(\"integer\"); // Key: document number \n\t//cps qty\n\tcpsQtyDict = dict(\"integer\");\n\t\n\tdiscountTypeDict = dict(\"string\"); // Key: document number \n\tdiscountDict = dict(\"float\"); // Key: document number \n\tdiscountPercentDict = dict(\"float\");\n\tcostEachDict = dict(\"float\"); // Key: document number \n\tfamilyDict = dict(\"string\");// Key: document number \n\tmaxDiscountDict = dict(\"float\");// Key: document number \n\tmaintenancePercentDict = dict(\"float\"); // Key: document number \n\tapprovalDict = dict(\"boolean\"); // Key: document number \n\tlockStandardDiscountDict = dict(\"boolean\"); // Key: document number\n\t//locknQuoteCheck = lockQuoteCheck_quote;\n\tdocNumListIndex = 0;\n\tdocNumList = String[];\n\tdocNumTypeDict = dict(\"string\"); // key: document number, value: part, model \n\tdocsaleTypeDict = dict(\"string\"); // key: document number, value: saletype\n\toverrideNetPriceDict = dict(\"float\"); // key: document\n\tnetPriceDict = dict(\"float\"); // key: document\n\tShippingOriginBranchDict=dict(\"string\");\n\tpartNumDict = dict(\"string\");\n\tPartWeightDict=dict(\"float\");\n\tPartSWDict=dict(\"float\");\n\tPartSLDict=dict(\"float\");\n\tQuantity_Array = string[];\n\tdocNum_GroupNum_dict = dict(\"string\");\n\tcostEa_lineDict = dict(\"float\");\n\tqtyChangDict = dict(\"boolean\");\n\tnetEachPriceDict = dict(\"boolean\");\n\textNetPriceDict = dict(\"boolean\");\n\textNetPriceChangedDict = dict(\"boolean\");\n\tinfillDict = dict(\"boolean\");\n\textNetPriceValue = dict(\"float\");\n\t//UnitCostValue = dict(\"float\");\n\tqtyChangedDocs = \"\";\n\tcurrentListPriceDict = dict(\"float\");\n\tcarrierIdDict = dict(\"string\");\n\titemSaleTypeDict = dict(\"string\");\n\titemTotalWeightDict = dict(\"float\");\n\tmodel_Weight_dict = dict(\"integer\");\n\tsupplierProcessedDict = dict(\"string\"); \n\tcutListDict = dict(\"string\");\n\tfabDrawingDict = dict(\"string\");\n\ttoleranceDafaultDict = dict(\"string\");\n\tcustomParentDocArray = String[];\n\tprocessedItemsExistOnQuote = false;\n\tframingItemsExist = dict(\"boolean\");\n\tgrabPartPrice = dict(\"boolean\");\t//Added by Robert Faigao per case 182193\n\tlineItemApprovalDict = dict(\"boolean\"); //Added by Robert Faigao per case 182628\n\tqtyChangParentDict = dict(\"boolean\");\n\tchangeParentParametersDict = dict(\"boolean\");\n\n\tmodel_Quantity_Dict = dict(\"integer\");\n\tmodel_eachQuantity_Dict = dict(\"integer\");\n\tmodel_Tolerance_Dict = dict(\"string\");\n\tmodel_EndPlates_Dict = dict(\"string\");\n\tmodel_SpecInst_Dict = dict(\"string\");\n\tmodel_Price_Dict = dict(\"float\");\n\t\n\tparentPartWeightDict = dict(\"float\");\n\tmultipieceConstructionFlag = false;\n\tshipDropChangeDict = dict(\"string\");\n\tprocessingTypeDict = dict(\"string\");\n\n\t// added by anguemnang the 22.03.2012 resaon: get updated costEa_line values from SOAP.\n\tLineItem_Numdict = dict(\"string\"); //string dictionary with key as Line item sequence number and Partnumnber as value\n\tShippingBranchdict = dict(\"string\"); //string dictionary with key as line item sequence number and shipping branch code as value\n\tLineItemSequenceNumbersArray = string[]; //String array consists of all sequnce numbers\n\tSeqNumber_PartOrderDict = dict(\"integer\");\n\tDocNumberDict = dict(\"string\");\n\tPartNumberXML=\"\";\n\tsoapResponseXML = \"\";\n\tPartOrder = 1;\n\n\t// Alast 2012-06-14 added attributes for group pricing and group price taxation\n\t// group taxes are to be displayed in commerce - Proposal Group tab, group prices are to be displayed in the proposal as subtotals \n\tgroup1Pricing = 0.0;\n\tgroup2Pricing = 0.0;\n\tgroup3Pricing = 0.0;\n\tgroup4Pricing = 0.0;\n\tgroup5Pricing = 0.0;\n\tgroup6Pricing = 0.0;\n\tgroup1Tax = 0.0;\n\tgroup2Tax = 0.0;\n\tgroup3Tax = 0.0;\n\tgroup4Tax = 0.0;\n\tgroup5Tax = 0.0;\n\tgroup6Tax = 0.0;\n\n\tfobPointBranchCode = \"\";\n\tfobPointBranchName_Zip = \"\";\n\tfobPointBranch_Name = \"\";\n\tfobPointBranch_Zip = \"\";\n\tfobPointBranch_Street = \"\";\n\tfobPointBranch_City = \"\";\n\tfobPointBranch_Country = \"\";\n\tfobPointBranch_State = \"\";\n\n\tmodelLOTPriceDict = dict(\"float\");\n\tmodelLOTCustomPriceDict = dict(\"float\");\n\tmodelLOTParts = \"\";\n\tcustomProcessingModels = \"\";\n\tinternalProcessingModels = \"\";\n\tcustomGroupFreightDict = dict(\"float\");\n\trequiredCutList = false;\n\trequiredFabDrawing = false;\n\trequiredUpdateTolerance = false;\n\n\t// Restructure // \n\tcustomField26Dict = dict(\"string\");\n\tcustomGroups = 0;\n\tcustomModel = \"\";\n\tstockonlyOnModel = \"\";\n\tquoteDescription = \"\"; \n\tquoteDescLinePriority = -1;\n\n\tAvailabilityCallFail = false;\n\tTaxCallFail = false;\n\trequireProcess = false;\n\tframing = false;\n    hourZoneAdjusted = 0; \n\ttotalCost = 0;\n\ttotalListPrice = 0;\n\ttotalLineItemDiscounts = 0;\n\ttotalNetPrice = 0;\n\tpartsForPricingTableArray = string[];\n\tpartsForPricingTableArr = string[];\n\tpartsForPricingTableDict = dict(\"string\");\n\tinfoForCutLinesArr = string[];\n\tinfoForCutLinesDict = dict(\"string\");\n\teachCutLineDict = dict(\"string\");\n\tinfoForLineSortDict = dict(\"string\");\n\tparentSequenceNumber = -1;\n\titemNumberDict = dict(\"string\");\n\tparentSeqNumDict = dict(\"string\");\n\tcutLineParentdocArray= string[];\n\tbranchCode_Name_dict = dict(\"string\");\n\tbranchCode_Zip_dict = dict(\"string\");\n\tbranchCode_Street_dict = dict(\"string\");\n\tbranchCode_City_dict  = dict(\"string\");\n\tbranchCode_State_dict  = dict(\"string\");\n\tbranchCode_Country_dict  = dict(\"string\");\n\tbranchTime_Zone_dict = dict(\"string\");\n\tbranchTime_Cutoff_dict = dict(\"string\");\n\tcustomFreightDataDict = dict(\"string\");\n\texternalProcessingExists = dict(\"boolean\");\n\tinfillDictQuote =  dict(\"boolean\");\n\ttotalCustomWeight = 0.0;\n\trfqViewDefaultDataString = \"\";\n\tmodelCutDataDict = dict(\"string\"); \n\tvendorInputDataDict = dict(\"string\");\n\tCustomUOMDict = dict(\"string\");\n\tCustomTotalCostDict = dict(\"float\");\n\tCustomUnitCostDict = dict(\"float\");\n\tcutLineWidthDict = dict(\"float\");\n\tcutLineLengthDict = dict(\"float\");\n\tshowValidationOnSaleType = false;\n\tcustomInputDataDict = Dict(\"anytype\");\n\ttotalLaborPrice = 0.0;\n\ttotalExternalProcessPrice = 0.0;\n\ttaxExemptOverride = \"\";\n\trollupFreight = \"\";\n\t// ===============DECLARATION & INITIALIZATION - END=============\n\n\t// ==========CONVERT ALL DATES IN TO PREFERRED FORMAT============\n\tcurrentDateText = substring(_system_date, 0, 10);\n\tupdateDateText = currentDateText;\n\tif(createdDate_quote <> \"\"){\n\t\tupdateDateText = substring(createdDate_quote, 0, 10);\n\t}\n\tcurrentDate = strtojavadate(currentDateText, datePerference); \n\tupdateDate = strtojavadate(updateDateText, datePerference); \n\tupdateDate = adddays(updateDate, adminNumDayRefreshPartDB_quote);\n\t\t\n\t// ===============================================================\n\n\t// =======PUT DISCOUNT MENTIONED IN FOR EACH GROUP ON QUOTE IN TO A DICTIONARY WITH KEY AS GROUP NUMBER========= \n\tfor eachGroup in groups {\n\t\tgroupNum = eachGroup + 1;\n\t\tput(customGroupSubtotalDict, string(groupNum), 0.0);\n\t\tput(customGroupDiscountDict, string(groupNum), customGroupDiscountList[eachGroup]);\n\t} \n\t// =====================================================================================================\n\n\t//=================READ BRANCH NAME AND ADDRESS DETAILS AND STORE THEM IN DICTIONARY=====================\n\t//20141121 - CPQS - Combining BMQL's querying the same data table: BranchNum_Name\n\t//BranchNameRecs = bmql(\"select Branch_Num, Branch_Name, Branch_Zip, Branch_Street, Branch_City, Branch_State, Branch_Country  from BranchNum_Name\");\n\tBranchNameRecs = bmql(\"select Branch_Num, Branch_Name, Branch_Short_Name, Branch_Zip, Branch_Street, Branch_City, Branch_State, Branch_Country  from BranchNum_Name\");\n\tfor eachRec in BranchNameRecs{\n\t\tput(branchCode_Name_dict, get(eachRec, \"Branch_Num\"), get(eachRec, \"Branch_Name\"));\n\t\tput(branchCode_Zip_dict, get(eachRec, \"Branch_Num\"), get(eachRec, \"Branch_Zip\"));\n\t\tput(branchCode_Street_dict, get(eachRec,  \"Branch_Num\"), get(eachRec, \"Branch_Street\"));\n\t\tput(branchCode_City_dict, get(eachRec,  \"Branch_Num\"), get(eachRec, \"Branch_City\"));\n\t\tput(branchCode_State_dict, get(eachRec,  \"Branch_Num\"), get(eachRec, \"Branch_State\"));\n\t\tput(branchCode_Country_dict, get(eachRec,  \"Branch_Num\"), get(eachRec, \"Branch_Country\"));\n\t}\n\t//======================================================================================================\n\tvendorWeightArray = string[];\n\tvendorParentDocArray = string[];\n\tif(vendorWeightString_quote <> \"\"){\n\t\tvendorWeightDataArray = split(vendorWeightString_quote,\"#\");\n\t\tvendorParentDocArray = split(vendorWeightDataArray[0],\"$\");\n\t\tvendorWeightArray = split(vendorWeightDataArray[1],\"$\");\n\t}\n\tmodelSQFTDict = dict(\"float\");\n\n\t// Set the discount2 type symbols so they can be used in the to concatenate them to the discount 2 type when returning values\n\tdiscount2Type = \" \";\n\tbottomLineDiscount2Type = \" \" + documentCurrencyPref; \n\n\tif (bottomLineDiscountType_quote == \"Amt\"){\n\t\tbottomLineDiscount2Type = \" %\";\n\t}\n\n\tresTiming1 = start - getcurrenttimeinmillis();\n\tresTimingString = \"Line 225: \" + string(resTiming1);\n\tstart = getcurrenttimeinmillis();\n\n\t//20141121 - CPQS - 20141121 - CPQS - Moving this on to the top of FOR loop\n\tSaleTypeResults = bmql(\"SELECT NewSaleType, SuggestedSaleType, OldSaleType FROM SaleTypes\");\n\n\t//Cut Size Count with saleTypeHidden_line = \"Cut Dimension\"\n\tcutLineCountDict = dict(\"string\");\n\n\t// =======================ITERATE OVER EACH LINE ON THE QUOTE AND KEEP LINE INFORMATION IN THE DICTIONARIES==========================\n\tfor line in line_process{\n\t\t// initialize all the temporary variables \n\t\ttmp = \"\";\n\t\toverRideNetEachVar = line.overrideNetEach_line;\n\t\teachDocNumList = String[];\n\t\tdocNumListIndex = 0;\n\t\tcostEa = 0.0;\n\t\tmaintenancePercent = 0.0;\n\t\tmaxDiscountPercent = 0.0;\n\t\tqtyChangFlag = false;\n\t\tnetEachPriceFlag = false;\n\t\textNetPriceFlag = false;\n\t\tsaleType = \"\";\n\t\tnewSaleType = \"\";\n\t\thiddenSaleType = \"\";\n\t\tCutWidth = 0.0;\n\t\tCutLength = 0.0;\n\t\trecBranchNum = \"\";\n\t\trecBranchName = \"\";\n\t\tlineCommentFromConfig = line._line_item_comment;\n\t\tprint \"lineCommentFromConfig\";\n\t\tprint lineCommentFromConfig;\n\t\tnumOfLines = numOfLines + 1;\n\t\tput(extNetPriceChangedDict, line._document_number, true);\n\t\textNetPriceChangedFlag = true;\n\t\tput(lineCustomField8, line._document_number, line._part_custom_field8);\n\t\t\n\t\tput(grabPartPrice, line._document_number, line.grabPriceTablePrice);\t//Added by Robert Faigao per case 182193\n\t\t\n\t\t// insert every line item document number into document number list \n\t\tappend(docNumList, line._document_number);\n\t\t\n\t\t//To check if lock & Quote performed once then all Non-Stock should be processed normal pricing logic.\n\t\t/*if(inputActionName == \"lockQuote\"){\n\t\t\tlocknQuoteCheck = true;\n\t\t\ttmp = tmp + \"1~lockQuoteCheck_quote~\" + string(true) + \"|\";\n\t\t}*/\n\t\t\t\n\t\t/*\n\t\t** Depending on the line item type to determine which process should be performed.\n\t\t** 1) Part - Read all the pricing related information \n\t\t** 2) Model - If there's any model related calculation / manipulation, it should read all read data in the else {}\n\t\t*/\n\t\tif (line._part_number <> \"\" ){ //FOR EACH PART LINE\n\t\t\t//if(quoteDescription == \"\") { quoteDescription = line._part_desc; }\n\t\t\tput (docNumTypeDict, line._document_number, part); //PUT DOCUMENT NUMBER IN A DICTIONARY\n\t\t\tput(customField26Dict, line._document_number, line._part_custom_field26);\n\t\t\t// added by anguemnang the 22.03.2012 resaon: get updated costEa_line values from SOAP.\n\t\t\tappend(LineItemSequenceNumbersArray,string(line._sequence_number));//HERE\n\t\t\tput(LineItem_Numdict,string(line._sequence_number),line._part_number);//HERE\n\t\t\tput(lineDocSeqNumDict, line._document_number, line._sequence_number);\n\t\t\tput(lineSeqDocNumDict, line._sequence_number, line._document_number);\n\t\t\t\t\n\t\t\tRecBranchNumArray=util.getPartInformation(lineCommentFromConfig, \"BRANCHCODE\");\n\t\t\tif(sizeofarray(RecBranchNumArray) > 0){\n\t\t\t\trecBranchNum = RecBranchNumArray[0];\n\t\t\t\t\n\t\t\t\t/** ADDED BY JENNA SUAREZ **/\n\t\t\t\t//20141121 - CPQS - Using BMQL of BranchNameRecs\n\t\t\t\t//results = bmql(\"SELECT Branch_Short_Name FROM BranchNum_Name WHERE Branch_Num = $recBranchNum\");\n\t\t\t\tfor branch in BranchNameRecs{\n\t\t\t\t\tif(get(branch, \"Branch_Num\") == recBranchNum){\n\t\t\t\t\t\trecBranchName =  get(branch, \"Branch_Short_Name\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tput(ShippingBranchdict,string(line._sequence_number),recBranchNum);\n\t\t\t\t\t\t\n\t\t\t//READ SALE TYPE FROM EACH LINE COMMENT STRING AND PUT IN DICTIONARY\n\t\t\tsaleTypeArray=util.getPartInformation(lineCommentFromConfig, \"SALE_TYPE\");\n\t\t\tspecialOrderSaleType = \"\";specialOrderHiddenSaleType = \"\";\n\t\t\tif(sizeofarray(saleTypeArray) > 0){\n\t\t\t\tsaleType = saleTypeArray[0];\n\t\t\t\t\n\t\t\t\t/** ADDED BY JENNA SUAREZ **/\t\n\t\t\t\t//20141121 - CPQS - Moving this on to the top of FOR loop\n\t\t\t\t//results = bmql(\"SELECT NewSaleType, SuggestedSaleType FROM SaleTypes WHERE OldSaleType = $saleType\");\n\t\t\t\t\n\t\t\t\tfor type in SaleTypeResults{\n\t\t\t\t\tif(get(type, \"OldSaleType\") == saleType){\n\t\t\t\t\t\tnewSaleType =  get(type, \"NewSaleType\");\n\t\t\t\t\t\thiddenSaleType = get(type, \"SuggestedSaleType\");\n\t\t\t\t\t}\n\t\t\t\t\tif(line._part_custom_field26 == \"Special Order\" AND find(saleType,\"Stock Only\") <> -1 AND get(type, \"OldSaleType\") == \"Non-Stock\"){\n\t\t\t\t\t\tspecialOrderSaleType =  get(type, \"NewSaleType\");\n\t\t\t\t\t\tspecialOrderHiddenSaleType = get(type, \"SuggestedSaleType\");\n\t\t\t\t\t}elif(line._part_custom_field26 == \"Special Order\" AND find(saleType,\"Processed\") <> -1 AND get(type, \"OldSaleType\") == \"Non-Stock Process\"){\n\t\t\t\t\t\tspecialOrderSaleType =  get(type, \"NewSaleType\");\n\t\t\t\t\t\tspecialOrderHiddenSaleType = get(type, \"SuggestedSaleType\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tput (docsaleTypeDict, line._document_number, hiddenSaleType);\n\t\t\tput(itemSaleTypeDict,line._document_number,saleType);\n\t\t\t\n\t\t\tlineSaleType = saleType;\n\t\t\tlineHiddenSaleType = hiddenSaleType;\n\t\t\tif(specialOrderSaleType <> \"\" AND specialOrderHiddenSaleType <> \"\"){\n\t\t\t\tlineSaleType = specialOrderSaleType;\n\t\t\t\tlineHiddenSaleType = specialOrderHiddenSaleType;\n\t\t\t}elif(newSaleType <> \"\"){\n\t\t\t\tlineSaleType = newSaleType;\n\t\t\t}\n\t\t\ttmp = tmp + line._document_number + \"~saleType_line~\" + lineSaleType + \"|\"\n\t\t\t\t+ line._document_number + \"~saleTypeHidden_line~\" + lineHiddenSaleType + \"|\";\n\t\t\t\n\t\t\tif(hiddenSaleType == \"External\"){\n\t\t\t\tput(externalProcessingExists,line._parent_doc_number,true);\n\t\t\t}\n\t\t\ttmp=tmp + line._document_number + \"~partNumber_line~\" + line._part_number + \"|\";\n\t\t\t\n\t\t\t// 04-07-2020 - CAS - made fabrication drawings attached applicable to Non-Stock Process and Process quotes\n\t\t\t\n\t\t\tif(hiddenSaleType == \"Non-Stock\" OR hiddenSaleType == \"Process\"){\n\t\t\tfabDrawingVal = getconfigattrvalue(line._parent_doc_number, \"fabricationDrawingsAttached\");\n\t\t\t\tif(isNull(fabDrawingVal)){\n\t\t\t\t\tfabDrawingVal = \"false\";\n\t\t\t\t}\n\t\t\t\tif(requiredFabDrawing == false AND fabDrawingVal == \"true\"){\n\t\t\t\t\trequiredFabDrawing = true;\n\t\t\t\t}\n\t\t\t}\t\n\t\t\t\n\t\t\t//CPS Part Level Attributes\n\t\t\tprint \"hidden Sale Type\";\n\t\t\tprint hiddenSaleType;\n\t\t\tif(hiddenSaleType == \"Custom\"/* OR hiddenSaleType == \"Non-Stock\" OR hiddenSaleType == \"Non-Stock Process\"*/){\n\t\t\t\t//print \"DEBUG: CPS Part Level Attributes***************************\";\n\t\t\t\tcutlistVal = getconfigattrvalue(line._parent_doc_number, \"cutList\");\n\t\t\t\tif(isNull(cutlistVal)){\n\t\t\t\t\tcutlistVal = \"false\";\n\t\t\t\t}\n\t\t\t\tif(requiredCutList == false AND cutlistVal == \"true\"){\n\t\t\t\t\trequiredCutList = true;\n\t\t\t\t}\n\t\t\t\tprint \"line._parent_doc_number\";\n\t\t\t\tprint line._parent_doc_number;\n\t\t\t\t\n\t\t\t\tfabDrawingVal = getconfigattrvalue(line._parent_doc_number, \"fabricationDrawingsAttached\");\n\t\t\t\tif(isNull(fabDrawingVal)){\n\t\t\t\t\tfabDrawingVal = \"false\";\n\t\t\t\t}\n\t\t\t\tif(requiredFabDrawing == false AND fabDrawingVal == \"true\"){\n\t\t\t\t\trequiredFabDrawing = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdefaultToleranceVal = getconfigattrvalue(line._parent_doc_number, \"tolerance\");\n\t\t\t\tdefaultToleranceVal1 = \"\";\n\t\t\t\tdefaultToleranceVal1 = lower(defaultToleranceVal);\n\t\t\t\t\t\t\t\t\n\t\t\t\tif(lower(defaultToleranceVal1) <> \"standard mill tolerance\"){\n\t\t\t\t\trequiredUpdateTolerance = false;\n\t\t\t\t\t}\n\t\t\t\tif(requiredUpdateTolerance == false AND (lower(defaultToleranceVal) == \"standard mill tolerance\")){\n\t\t\t\t\trequiredUpdateTolerance = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcustomerDescVal = getconfigattrvalue(line._parent_doc_number, \"customerDescription\");\n\t\t\t\tvendorDescriptionVal = getconfigattrvalue(line._parent_doc_number, \"vendorDescription\");\n\t\t\t\tsupplierProcessedVal = getconfigattrvalue(line._parent_doc_number, \"customProcessed\");\n\t\t\t\tvendorSize = getconfigattrvalue(line._parent_doc_number, \"vendorSize\");\n\t\t\t\tvendorWidth = getconfigattrvalue(line._parent_doc_number, \"supplierWidth\");\n\t\t\t\tvendorLength = getconfigattrvalue(line._parent_doc_number, \"supplierLength\");\n\t\t\t\tvendorQty = getconfigattrvalue(line._parent_doc_number, \"vendorQuantity\");\n\t\t\t\tcharacteristicsData = getconfigattrvalue(line._parent_doc_number, \"characteristicsData\");\n\t\t\t\tsupplierAndCustomerInstructions = getconfigattrvalue(line._parent_doc_number, \"supplierAndCustomerInstructions\");\n\t\t\t\t\n\t\t\t\tcustomCutLineString = \"\";\n\t\t\t\tif(supplierProcessedVal == \"Supplier Processed\" AND cutlistVal == \"false\"){\n\t\t\t\t\tcustomCutLineString = getconfigattrvalue(line._parent_doc_number, \"customCutLineString\");\n\t\t\t\t}elif(supplierProcessedVal == \"McNICHOLS Processed\"){\n\t\t\t\t\tcustomCutLineString = getconfigattrvalue(line._parent_doc_number, \"mcNICHOLSCutLineString\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tput(processingTypeDict,line._parent_doc_number,supplierProcessedVal);\n\t\t\t\tput(cutListDict,line._parent_doc_number,cutlistVal);\n\t\t\t\tput(fabDrawingDict,line._parent_doc_number,fabDrawingVal);\n\t\n\t\t\t\tif(isNull(vendorDescriptionVal) OR isNull(customerDescVal)){\n\t\t\t\t\tvendorDescriptionVal = \"\";\n\t\t\t\t\tcustomerDescVal = \"\";\n\t\t\t\t}\n\t\t\t\tif(NOT isNull(vendorSize) AND NOT isNull(supplierProcessedVal) AND supplierProcessedVal == \"McNICHOLS Processed\"){\n\t\t\t\t\tvendorDescriptionVal = vendorDescriptionVal; // + \", \" + vendorSize;\n\t\t\t\t}\n\t\t\t\trfqQty = line._price_quantity;\n\t\t\t\tif(supplierProcessedVal == \"McNICHOLS Processed\" AND isNumber(vendorQty)){\n\t\t\t\t\trfqQty = atoi(vendorQty);\n\t\t\t\t}\n\t\t\t\tif(inputActionName == \"default\" AND line.partNumber_line == \"\"){\n\t\t\t\t\ttmp=tmp + line._document_number + \"~vendorDescription_line~\" + vendorDescriptionVal + \"|\";\n\t\t\t\t\ttmp=tmp + line._document_number + \"~customerDescription_line~\" + customerDescVal + \"|\";\n\t\t\t\t\ttmp=tmp + line._document_number + \"~quantityCPS_line~\" + string(rfqQty) + \"|\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(inputActionName == \"reconfigure\"){\n\t\t\t\t\tisCustomQtyChanged = false;\n\t\t\t\t\tif(line.quantityCPS_line <> rfqQty){\n\t\t\t\t\t\tisCustomQtyChanged = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tput(customInputDataDict,\"documentNumber\",line._document_number);\n\t\t\t\t\tput(customInputDataDict,\"supplierQty\",rfqQty);\n\t\t\t\t\tput(customInputDataDict,\"EA\",rfqQty*1.0);\n\t\t\t\t\tput(customInputDataDict,\"LOT\",1.0);\n\t\t\t\t\tput(customInputDataDict,\"isCustomQtyChanged\",isCustomQtyChanged);\n\t\t\t\t\tput(customInputDataDict,\"customCutLineString\",customCutLineString);\n\t\t\t\t\tput(customInputDataDict,\"cutlistVal\",cutlistVal);\n\t\t\t\t\tput(customInputDataDict,\"fabDrawingVal\",fabDrawingVal);\n\t\t\t\t\tput(customInputDataDict,\"parentDocNumber\",line._parent_doc_number);\n\t\t\t\t\tput(customInputDataDict,\"oldModelLength\",line.modelLength_line);\n\t\t\t\t\tput(customInputDataDict,\"oldModelWidth\",line.modelWidth_line);\n\t\t\t\t}\n\n\t\t\t\toriginalDescVal = vendorDescriptionVal;\n\t\t\t\toriginalCustomerDesc = customerDescVal;\n\t\t\t\tif((_system_current_step_var <> \"pending_process_bmClone_1\" AND _system_current_step_var <> \"pending_process\" AND _system_current_step_var <> \"start_step\" AND inputActionName <> \"unLockQuote\") OR inputActionName == \"lockQuote\"){\n\t\t\t\t\toriginalDescVal = line.vendorDescription_line;\n\t\t\t\t\t//originalCustomerDesc = line.customerDescription_line;\n\t\t\t\t}\n\t\t\t\ttmp=tmp + line._document_number + \"~_part_desc~\" + originalDescVal + \"|\";\n\t\t\t\ttmp=tmp + line._document_number + \"~originalCustomerDescription_line~\" + originalCustomerDesc + \"|\";\n\t\t\t\ttmp=tmp + line._document_number + \"~customCutLineString_line~\" + customCutLineString + \"|\";\n\n\t\t\t\tput(CustomUOMDict,line._parent_doc_number,line.uOM_line);\n\t\t\t\tput(CustomUnitCostDict,line._parent_doc_number,line.unitCost_line);\n\t\t\t\t\n\t\t\t\tif(cutlistVal == \"true\" AND NOT isNull(vendorWidth) AND NOT isNull(vendorLength)){\n\t\t\t\t\tput(cutLineWidthDict,line._parent_doc_number,atof(vendorWidth));\n\t\t\t\t\tput(cutLineLengthDict,line._parent_doc_number,atof(vendorLength));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttotalCustomWeight = totalCustomWeight + line.vendorWeight_line;\n\t\t\t\t//tmp = tmp + line._parent_doc_number + \"~vendorWeight_line~\" + String(line.vendorWeight_line) + \"|\";\n\t\t\t\t\n\t\t\t\trfqViewDefaultDataString = rfqViewDefaultDataString + \"_document_number\" +\"&&\"+ line._document_number + \"*&*\"+ \"customerDescription_line\" +\"&&\"+ customerDescVal + \"*&*\"+ \"vendorDescription_line\" +\"&&\"+ vendorDescriptionVal + \"*&*\"+ \"quantityCPS_line\" +\"&&\"+ string(rfqQty) + \"*&*\"+ \"partNumber_line\" +\"&&\"+ line._part_number + \"$^$\";\n\t\t\t\t\n\t\t\t\tcharacteristicsDataArr = split(characteristicsData,\"$$\");\n\t\t\t\ttempCharDataArr = String[];\n\t\t\t\tif(sizeofArray(characteristicsDataArr) > 4){\n\t\t\t\t\tarrtibuteArr = split(characteristicsDataArr[1],\"##\");\n\t\t\t\t\tvalArray = split(characteristicsDataArr[2],\"##\");\n\t\t\t\t\tcriticalarray = split(characteristicsDataArr[3],\"##\");\n\t\t\t\t\tcharIndex = 0;\n\t\t\t\t\tfor eachCharData in arrtibuteArr{\n\t\t\t\t\t\tisCriticalStr = \"\";\n\t\t\t\t\t\tif(criticalarray[charIndex] == \"true\"){\n\t\t\t\t\t\t\tisCriticalStr = \"(Critical)\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tappend(tempCharDataArr,eachCharData+\": \"+valArray[charIndex]+isCriticalStr);\n\t\t\t\t\t\tcharIndex = charIndex + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttmp=tmp + line._document_number + \"~characteristicsData_line~\" + join(tempCharDataArr,\", \") + \"|\";\n\n\t\t\t\ttmp=tmp + line._document_number + \"~supplierAndCustomerInstructions_line~\" + supplierAndCustomerInstructions + \"|\";\n\t\t\t\t\n\t\t\t\tappend(customParentDocArray,line._parent_doc_number);\n\t\t\t\t\n\t\t\t\tif(findinarray(partsForPricingTableArray, line._part_number) == -1){\n\t\t\t\t\tappend(partsForPricingTableArray, line._part_number);\n\t\t\t\t\tput(partsForPricingTableDict, line._sequence_number, line._part_number);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif((hiddenSaleType == \"Custom\") OR (cPSOrder_quote == false AND mTR_quote == true AND (hiddenSaleType == \"Process\" OR hiddenSaleType == \"Stock\"))){\n\t\t\t\tput(CustomTotalCostDict,line._parent_doc_number,line.totalCost_line);\n\t\t\t}\n\t\t\t\n\t\t\t//Added by Jenna Suarez for not displaying Child Kit Parts in DocEngine\n\t\t\tdisplayInDoc = false;\n\t\t\tpartNum = line._part_number;\n\t\t\t\n\t\t\tprocessItemFromConfig = getconfigattrvalue(line._parent_doc_number, \"partNumber_SelectedSheets\");\n\t\t\tprocessedItem = \"\";\n\t\t\tprocessedItemArray = string[];\n\t\t\tif(len(processItemFromConfig) > 0){\n\t\t\t\tprocessedItemArray = split(processItemFromConfig, \"$,$\");\n\t\t\t\tprocessedItem = processedItemArray[0];\n\t\t\t}\n\t\t\tif((hiddenSaleType == \"Stock\") OR (hiddenSaleType == \"Sample\") OR (hiddenSaleType == \"Process\" AND partNum == processedItem)){\n\t\t\t\tdisplayInDoc = true;\n\t\t\t}\t\t\n\n\t\t\ttmp=tmp + line._document_number + \"~displayLineInDocument_line~\" + string(displayInDoc) + \"|\";\n\n\t\t\tput(DocNumberDict,string(line._sequence_number),line._document_number);\t\t\t\n\t\t\t\n\t\t\tif(line._parent_doc_number <> \"\" ){\n\t\t\t\tput(parentDocNumDict, line._document_number, line._parent_doc_number);\n\t\t\t}\n\t\t\t// add to the unique part number list\n\t\t\tif(findinarray(partNumList, line._part_number) == -1 ){\n\t\t\t\tappend(partNumList, line._part_number);\t\n\t\t\t}\n\n\t\t\t//Add product to partNumDict\n\t\t\tput(partNumDict,line._document_number,line._part_number);\n\n\t\t\t// add to the unique families\n\t\t\tif(findinarray(familyList, line._part_custom_field1) == -1 ){\n\t\t\t\tappend(familyList, line._part_custom_field1);\n\t\t\t}\n\t\t\t\n\t\t\tif(containskey(partNumDocDict, line._part_number) ){\n\t\t\t\teachDocNumList = get(partNumDocDict, line._part_number);\n\t\t\t} \n\t\t\tappend(eachDocNumList, line._document_number);\n\n\t\t\t// unique part number list\n\t\t\tput(partNumDocDict, line._part_number, eachDocNumList );\n\t\t\t\n\t\t\tput(field1Dict, line._document_number, line._part_custom_field1);\n\t\t\tput(field2Dict, line._document_number, line._part_custom_field2);\n\t\t\tput(field3Dict, line._document_number, line._part_custom_field3);\n\t\t\tput(field4Dict, line._document_number, line._part_custom_field4);\n\n\t\t\t// Family Dictionary\n\t\t\tput(familyDict, line._document_number, line._part_custom_field1);\n\t\t\t\n\t\t\t// Cost Dictionary \n\t\t\tif(isnumber(line._part_custom_field2) ){\n\t\t\t\tcostEa = atof(line._part_custom_field2);\n\t\t\t}\n\t\t\tput(costEachDict, line._document_number, costEa);\n\n\t\t\t// Max Discount Dictionary\n\t\t\tif(isnumber(line._part_custom_field3) ){\n\t\t\t\tmaxDiscountPercent = atof(line._part_custom_field3);\n\t\t\t}\n\t\t\tput(maxDiscountDict, line._document_number, maxDiscountPercent);\n\t\t\t\n\t\t\t// Maintenance Percent Dictionary\n\t\t\tif(isnumber(line._part_custom_field4) ){\n\t\t\t\tmaintenancePercent = atof(line._part_custom_field4);\n\t\t\t}\n\t\t\tput(maintenancePercentDict, line._document_number, maintenancePercent);\n\t\t\t\n\t\t\tprice_list_price_each = line._price_list_price_each;\n\t\t\tif(_system_current_step_var <> \"pending_process_bmClone_1\" AND _system_current_step_var <> \"pending_process\" AND _system_current_step_var <> \"start_step\" AND cPSOrder_quote == true AND hiddenSaleType == \"Custom\"){\n\t\t\t\tprice_list_price_each = line.listPrice_line;\n\t\t\t}\n\t\t\tput(listPriceDict, line._document_number, price_list_price_each);\n\t\t\tput(qtyDict, line._document_number, line._price_quantity);\n\t\t\tput(cpsQtyDict, line._document_number, line.quantityCPS_line);\n\t\t\t//append(Quantity_Array,line._price_quantity);\n\t\t\tput(discountDict, line._document_number, line.discountPercent_line);\n\t\t\tput(discountTypeDict, line._document_number, \"%\");\n\t\t\t//put(discountTypeDict, line._document_number, line.discountType_line);\n\t\t\tput(customGroupDict, line._document_number, line.customGroup_line);\n\t\t\tput(lockStandardDiscountDict, line._document_number, line.lockStandardDiscount_line);\n\t\t\tif(conversionRequired_quote) {\n\t\t\t\tput(netPriceDict, line._document_number, line.tIBCONetPriceOverride_line);\n\t\t\t} else {\n\t\t\t\tput(netPriceDict, line._document_number, line.netPriceEach_line);\n\t\t\t}\n\t\t\t\n\t\t\t//Unit cost for CPS quotes\n\t\t\t//put(UnitCostValue,line._document_number, line.unitCost_line);\n\t\t\t\n\t\t\t//put(netPriceDict, line._document_number, line._price_list_price_each);\n\t\t\t//put Shipping Origin Branch in dictionary.\n\t\t\tput(ShippingOriginBranchDict,line._document_number,line.shippingOriginBranchCode_line);\n\t\t\t\n\t\t\tif(NOT((line.netPriceEach_line <> line.previousNetPriceEach_line) AND (line.extendedNetPrice_line <> line.previousExtendedNetPrice_line))){\n\t\t\t\t//Set Flag for change in net each Price\n\t\t\t\tif(line.netPriceEach_line <> line.previousNetPriceEach_line){\n\t\t\t\t\tnetEachPriceFlag = true;\n\t\t\t\t\ttmp = tmp + line._document_number + \"~extNetPriceChangedFlag_line~\" + \"false|\";\n\t\t\t\t\textNetPriceChangedFlag = false;\n\t\t\t\t\tput(extNetPriceChangedDict, line._document_number, extNetPriceChangedFlag);\n\n\t\t\t\t}\n\n\t\t\t\t//Set Flag for change in ext net Price\n\t\t\t\tif(line.extendedNetPrice_line <> line.previousExtendedNetPrice_line){\n\t\t\t\t\textNetPriceFlag = true;\n\t\t\t\t\ttmp = tmp + line._document_number + \"~extNetPriceChangedFlag_line~\" + \"true|\";\n\t\t\t\t\textNetPriceChangedFlag = true;\n\t\t\t\t\tput(extNetPriceChangedDict, line._document_number, extNetPriceChangedFlag);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//If both are true then this is a new quote and prices should be calculated differently, leave flags false\n\t\t\tif((line.netPriceEach_line <> line.previousNetPriceEach_line) AND (line.extendedNetPrice_line <> line.previousExtendedNetPrice_line)){\n\t\t\t\textNetPriceFlag = false;\n\t\t\t\tnetEachPriceFlag = false;\n\t\t\t}\n\n\t\t\tput(netEachPriceDict,line._document_number,netEachPriceFlag);\n\t\t\tput(extNetPriceDict,line._document_number,extNetPriceFlag);\n\t\t\tput(extNetPriceValue,line._document_number, line.extendedNetPrice_line);\n\n\t\t\t//Set Flag for change in quantity\n\t\t\tif(line._price_quantity <> line.oldQuantity_line){\n\t\t\t\tqtyChangFlag = true;\n\t\t\t}\n\t\t\tif(sourceSystem == \"ATG\" AND line.netPriceEach_line == 0.00){\n\t\t\t\tqtyChangFlag = true;\n\t\t\t}\n\t\t\t\n\t\t\tput(qtyChangDict,line._document_number,qtyChangFlag);\n\n\t\t\t//Added if statements per case 183338 by Robert Faigao.\n\t\t\tif(containskey(qtyChangParentDict, line._parent_doc_number)){\t//Check the dictionary to see if the parent doc number exists\n\t\t\t\tif(NOT(get(qtyChangParentDict, line._parent_doc_number))){\t//Check if the value for the current parent doc is false, if it is true, don't do anything\n\t\t\t\t\tput(qtyChangParentDict, line._parent_doc_number, qtyChangFlag);\t//Replace it with the current value\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(line._parent_doc_number <> \"\"){\n\t\t\t\t\tput(qtyChangParentDict, line._parent_doc_number, qtyChangFlag);\t//If it doesn't exist, add it to the dictionary\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(manualEstimateModelFlag and containskey(manualEstimateDocNumDict, line._parent_doc_number)){\n\t\t\t\ttmp =  tmp + line._document_number + \"~approval_line~true|\";\n\t\t\t}else{\n\t\t\t\ttmp =  tmp + line._document_number + \"~approval_line~false|\";\n\t\t\t}\n\t\t\t\n\t\t\toriginalQty = line.originalPartQty_line;\n\t\t\t\n\t\t\tif(inputActionName <> \"reconfigure\"){\n\t\t\t\ttmp = tmp\t+ line._document_number + \"~originalPartQty_line~\" + string(line._price_quantity) + \"|\";\n\t\t\t}\n\t\t\t\n\t\t\tif(line._price_quantity <> originalQty OR saleType == \"External Processing\" OR hiddenSaleType == \"Labor\") {  qtyChangedDocs = qtyChangedDocs + \"~\" + line._document_number + \"~\"; }\n\t\t\tconditionalSaleType = get(itemSaleTypeDict,line._document_number);\n\t\t\t\n\t\t\t//GATHER DOCUMENT NUMBER OF ALL LINES FOR WHICH CUSTOM PROCESSING WAS DONE. 11142019 Change 1\n\t\t\tif (conditionalSaleType == \"Custom Product\"){ \t\n\t\t\t\tcustomProcessingModels = customProcessingModels + \"~\" + line._parent_doc_number + \"~\"; \n\t\t\t\tPRINT \"CONDITIONALSALETYPE2\";\n\t\t\t\tprint conditionalSaleType;\n\t\t\t}\t\n\t\t\t//GATHER DOCUMENT NUMBERS OF ALL LINES INVOLVED IN PROCESSING 11142019 Change 2\n\t\t\t\n\t\t\telif (conditionalSaleType == \"Internal Processing\" OR conditionalSaleType == \"Processed Closest to Customer\" OR conditionalSaleType == \"Processed Optimal\" OR conditionalSaleType == \"Processed Specific Branch\" OR conditionalSaleType == \"Processed Best Available\" or conditionalSaleType == \"Accsy\" or conditionalSaleType == \"External Processing\" )  { \n\t\t\t\tinternalProcessingModels = internalProcessingModels + \"~\" + line._parent_doc_number + \"~\";\n\t\t\t}\n\t\t\telif (conditionalSaleType == \"Stock Only\") {\t\t\t\n\t\t\t\tstockonlyOnModel = stockonlyOnModel + \"~\" + line._parent_doc_number + \"~\"; \n\t\t\t}\n\n\t\t\tput(itemNumberDict, line._sequence_number, line._part_number);\n\t\t\t\n\t\t\t//=====READ WEIGHT OF EACH LINE FROM COMMENTS IN CONFIGURATION===============\n\t\t\tCutWidthArray = util.getPartInformation(lineCommentFromConfig, \"CUT_WID\");\n\t\t\tCutLengthArray = util.getPartInformation(lineCommentFromConfig, \"CUT_LEN\");\n\t\t\t\n\t\t\tif(sizeofarray(CutWidthArray) > 0 AND isnumber(CutWidthArray[0])){\n\t\t\t\tCutWidth = atof(CutWidthArray[0]);\t\t\t\n\t\t\t}\n\t\t\tif(sizeofarray(CutLengthArray) > 0 AND isnumber(CutLengthArray[0])){\n\t\t\t\tCutLength = atof(CutLengthArray[0]);\n\t\t\t}\t\n\t\t\t\n\t\t\tweightArray = util.getPartInformation(lineCommentFromConfig, \"WEIGHT\");\n\t\t\tunitWeightArray = util.getPartInformation(lineCommentFromConfig, \"UNIT_WEIGHT\");\n\t\t\t\n\t\t\ttotalWeight = 0.0;\n\t\t\t//If size of unitWeightArray is > 0, i.e. it is a stock item. Hence get the weight of item from item comment section and multiply with item quantity\n\t\t\tif(sizeofarray(unitWeightArray) > 0 AND isnumber(unitWeightArray[0])){\n\t\t\t\ttotalWeight = ceil(line._price_quantity * atof(unitWeightArray[0]));\n\t\t\t}elif(sizeofarray(weightArray) > 0 AND isnumber(weightArray[0])){\n\t\t\t\ttotalWeight = ceil(atof(weightArray[0]));\n\t\t\t}\n\t\t\t\n\t\t\tif(hiddenSaleType == \"Supplier Part\" OR (hiddenSaleType == \"Custom\" AND line.cutList_line)){\n\t\t\t\tcutLineSQF = 0.0;\n\t\t\t\tif(hiddenSaleType == \"Supplier Part\"){\n\t\t\t\t\tcutLineSQF = line._price_quantity * (CutWidth) * (CutLength);\n\t\t\t\n\t\t\t\t\ttotalSQFT = cutLineSQF;\n\t\t\t\t\tif(containsKey(modelSQFTDict,line._parent_doc_number)){\n\t\t\t\t\t\ttotalSQFT =  totalSQFT + get(modelSQFTDict,line._parent_doc_number);\n\t\t\t\t\t}\n\t\t\t\t\tput(modelSQFTDict,line._parent_doc_number,totalSQFT);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(findinArray(vendorParentDocArray,line._parent_doc_number) <> -1 AND ((_system_current_step_var <> \"pending_process_bmClone_1\" AND _system_current_step_var <> \"pending_process\" AND _system_current_step_var <> \"start_step\" AND inputActionName <> \"unLockQuote\") OR inputActionName == \"lockQuote\")){\n\t\t\t\t\tif(line.cutList_line == true){\n\t\t\t\t\t\ttotalWeight = line.vendorWeight_line;\n\t\t\t\t\t}elif(line.modelSQFT_line <> 0){\n\t\t\t\t\t\tvendorWeightvalue = 0.0;\n\t\t\t\t\t\tif(isNumber(vendorWeightArray[findinArray(vendorParentDocArray,line._parent_doc_number)])){\n\t\t\t\t\t\t\tvendorWeightvalue = atof(vendorWeightArray[findinArray(vendorParentDocArray,line._parent_doc_number)]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotalWeight = ceil((cutLineSQF/line.modelSQFT_line) * vendorWeightvalue);\n\t\t\t\t\t\t\n\t\t\t\t\t\tusedParentWeight = 0.0;\n\t\t\t\t\t\tif(containsKey(itemTotalWeightDict,line._parent_doc_number)){\n\t\t\t\t\t\t\tusedParentWeight = get(itemTotalWeightDict,line._parent_doc_number);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(vendorWeightvalue < usedParentWeight+totalWeight){\n\t\t\t\t\t\t\ttotalWeight = vendorWeightvalue - usedParentWeight;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tput(itemTotalWeightDict,line._parent_doc_number,usedParentWeight+totalWeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tput(itemTotalWeightDict, line._document_number, totalWeight);\n\t\t\t// ===========================================================================\n\t\t\t\n\t\t\t\t\t//Add Cut requirement information to array Kyle 4/29/14 itemTotalWeightDict//string(get(model_Weight_dict,get(modelSeqDocNumDict, count)))\n\t\t\t//if(line.saleType_line == \"Weld Dimension\" OR line.saleType_line == \"Cut Requirement\" OR line.saleType_line == \"Cut Dimension\" OR line.saleType_line == \"Banding Dimension\" OR line.saleType_line == \"Trench Cut Dimension\" OR line.saleType_line == \"Finished Dimensions\")\n\t\t\t//print \"*************DEBUG formattedFinalDimensions_line: conditionalSaleType **********\";\n\t\t\t//print conditionalSaleType;\n\t\t\t//print hiddenSaleType;\n\t\t\t//print partNum;\n\t\t\t\n\t\t\t//if(conditionalSaleType == \"Welding Cut Requirement\" OR conditionalSaleType == \"JDE Cut Requirement\" OR conditionalSaleType == \"Banding Cut Requirement\" OR conditionalSaleType == \"Trench Cut Requirement\" OR conditionalSaleType == \"Cut Requirements\" OR conditionalSaleType == \"Cut Requirement\" OR conditionalSaleType == \"Internal Processing\" OR conditionalSaleType == \"External Processing\"){\n\t\t\t\n\t\t\t//CPQS - comented above to add Custom & Non-Stock sale types\n\t\t\tif(conditionalSaleType == \"Welding Cut Requirement\" OR conditionalSaleType == \"JDE Cut Requirement\" OR conditionalSaleType == \"Banding Cut Requirement\" OR conditionalSaleType == \"Trench Cut Requirement\" OR conditionalSaleType == \"Cut Requirements\" OR conditionalSaleType == \"Cut Requirement\" OR conditionalSaleType == \"Internal Processing\" OR conditionalSaleType == \"External Processing\" OR conditionalSaleType == \"Custom Product\" OR find(conditionalSaleType,\"Processed\") <> -1 OR conditionalSaleType == \"Supplier Part\"/*conditionalSaleType ==\"Processed Closest to Customer\" OR conditionalSaleType ==\"Processed Optimal\" OR conditionalSaleType ==\"Processed Specific Branch\" OR conditionalSaleType ==\"Processed Best Available\" or conditionalSaleType ==\"Processed Stock\"*/){\n\t\t\t\tparentSequenceNumber = atoi(get(parentSeqNumDict, line._parent_doc_number));\n\t\t\t\t\n\t\t\t\ttempLineItemComment = replace(line._line_item_comment,\"TRENCH\",\"Trench\");\n\t\t\t\tcommentStr = \"LINE_WEIGHT::\" + string(totalWeight) + \"$$PART_NUMBER\" + \"::\" + line._part_number + \"$$\" + \"QUANTITY::\" + string(line._price_quantity) + \"$$\" + tempLineItemComment + \"$$DESCRIPTION::\" + line._part_desc;\n\t\t\t\tif(containsKey(infoForCutLinesDict, parentSequenceNumber)){\n\t\t\t\t\toldVal = get(infoForCutLinesDict, parentSequenceNumber);\n\t\t\t\t\tnewVal = oldVal + \"##\" + commentStr;\n\t\t\t\t\tput(infoForCutLinesDict,parentSequenceNumber,newVal);\t\n\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tput(infoForCutLinesDict,parentSequenceNumber,commentStr);\n\t\t\t\t\t//put(cutLineDocNumDict,parentSequenceNumber,line._document_number);\n\t\t\t\t\tappend(cutLineParentdocArray,line._parent_doc_number);\n\t\t\t\t}\n\t\t\t\tif(find(conditionalSaleType,\"Processed\") == -1){\n\t\t\t\t\tput(eachCutLineDict,line._document_number,commentStr);\n\t\t\t\t}\n\t\t\t\t//model# part# comment string   parentDocNumDict\n\t\t\t}\n\t\t\t//put(noncutLineDocNumDict,parentSequenceNumber,line._document_number);\t\n\t\t\tput(lineOrderDict, line._sequence_number, atoi(line._document_number));//Add all lines to OrderDict to have model # set\n\t\t\t\n\t\t\t//=============ADD EACH LINE WEIGHT IN TO THEIR RESPECTIVE MODEL WEIGHT=======.\n\t\t\t\n\t\t\tif(hiddenSaleType <> \"Stock\" AND hiddenSaleType <> \"Sample\"){\n\t\t\t\tif(containsKey(model_Weight_dict, line._parent_doc_number)){\n\t\t\t\t\texistingModelWeight = integer(get(model_Weight_dict, line._parent_doc_number));\n\t\t\t\t\tupdatedModelWeight = existingModelWeight + totalWeight;\n\t\t\t\t\tput(model_Weight_dict, line._parent_doc_number, integer(updatedModelWeight));\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tput(model_Weight_dict, line._parent_doc_number, integer(totalWeight));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//=============ADD EACH LINE QUANTITY IN TO THEIR RESPECTIVE MODEL QUANTITY=======.\n\t\t\tif(hiddenSaleType <> \"Stock\" AND hiddenSaleType <> \"Sample\"){\n\t\t\t\tif(containsKey(model_Quantity_Dict, line._parent_doc_number)){\n\t\t\t\t\texistingModelQuantity = integer(get(model_Quantity_Dict, line._parent_doc_number));\n\t\t\t\t\tupdatedModelQuantity = existingModelQuantity + line._price_quantity;\n\t\t\t\t\tput(model_Quantity_Dict, line._parent_doc_number, integer(updatedModelQuantity));\n\t\t\t\t}else{\n\t\t\t\t//if(hiddenSaleType <> \"Stock\" AND hiddenSaleType <> \"Sample\"){\n\t\t\t\t\tput(model_Quantity_Dict, line._parent_doc_number, integer(line._price_quantity));\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t//=============ADD EACH LINE QUANTITY IN TO THEIR RESPECTIVE MODEL QUANTITY=======.\n\t\t\tput(model_eachQuantity_Dict, line._document_number, integer(line._price_quantity));\n\t\t\t//============================================================================\n\t\t\t\n\t\t\t//=============ADD EACH LINE PRICE IN TO THEIR RESPECTIVE MODEL SUBTOTAL=======.\n\t\t\t/* if(line.extendedNetPrice_line <> line.previousExtendedNetPrice_line){\n\t\t\t\tif(containsKey(model_Price_Dict, line._parent_doc_number)){\n\t\t\t\t\texistingModelPrice = get(model_Price_Dict, line._parent_doc_number);\n\t\t\t\t\tupdatedModelPrice = existingModelPrice + line.previousExtendedNetPrice_line;\n\t\t\t\t\tput(model_Price_Dict, line._parent_doc_number, updatedModelPrice);\n\t\t\t\t}else{\n\t\t\t\t\tput(model_Price_Dict, line._parent_doc_number, line.previousExtendedNetPrice_line);\n\t\t\t\t}\n\t\t\t}else{ */\n\t\t\tif(hiddenSaleType <> \"Stock\" AND hiddenSaleType <> \"Sample\"){\n\t\t\t\tif(containsKey(model_Price_Dict, line._parent_doc_number)){\n\t\t\t\t\texistingModelPrice = get(model_Price_Dict, line._parent_doc_number);\n\t\t\t\t\tupdatedModelPrice = existingModelPrice + line.extendedNetPrice_line;\n\t\t\t\t\tput(model_Price_Dict, line._parent_doc_number, updatedModelPrice);\n\t\t\t\t}else{\n\t\t\t\t\t//if(hiddenSaleType <> \"Stock\" AND hiddenSaleType <> \"Sample\"){\n\t\t\t\t\t\tput(model_Price_Dict, line._parent_doc_number, line.extendedNetPrice_line);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Add Current list price to currentListPriceDict dictionary to revert net price - Case #00125529\n\t\t\tput(currentListPriceDict, line._document_number, line.listPrice_line);\n\t\t\t\n\t\t\t//=============PUT COST EACH LINE IN DICT==================================\n\t\t\tput(CostEa_lineDict, line._document_number, line.costEa_line);\n\t\t\t\n\t\t\t//===========GET LABOR COST FOR COMMENTS IN CONFIG=========================\n\t\t\tlaborCost = 0.0;\n\t\t\tlaborCostArray = util.getPartInformation(lineCommentFromConfig, \"LABOR_COST\");\n\t\t\tif(sizeofarray(laborCostArray) > 0 AND isnumber(laborCostArray[0])){\n\t\t\t\tlaborCost = atof(laborCostArray[0]);\n\t\t\t\tput(CostEa_lineDict, line._document_number, laborCost);\n\t\t\t}\n\t\t\t\n\t\t\t//================READ EP COST FROM CONFIG===================================\n\t\t\texternalCost = 0.0;\t\t\n\t\t\texternalCostArray = util.getPartInformation(lineCommentFromConfig, \"EP_COST\");\n\t\t\tif(sizeofarray(externalCostArray) > 0 AND isnumber(externalCostArray[0])){\n\t\t\t\texternalCost = atof(externalCostArray[0]);\n\t\t\t\tput(CostEa_lineDict, line._document_number, externalCost);\t\n\t\t\t}\t\n\t\t\t\t\t\n\t\t\t//===========READ ALL LINE SPECIFIC INFORMATION FROM COMMENTS IN CONFIG AND UPDATE LINE LEVEL ATTRIBUTES - START===================\n\t\t\tif(CutLength <> line.length_line){\n\t\t\t\tif(containskey(qtyChangParentDict, line._parent_doc_number)){\t//Check the dictionary to see if the parent doc number exists\n\t\t\t\t\tif(NOT(get(qtyChangParentDict, line._parent_doc_number))){\t//Check if the value for the current parent doc is false, if it is true, don't do anything\n\t\t\t\t\t\tput(qtyChangParentDict, line._parent_doc_number, true);\t//Replace it with the current true if since the cut lengths differ\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(CutLength <> line.length_line OR CutWidth <> line.width_line){\n\t\t\t\tput(changeParentParametersDict,line._parent_doc_number,true);\n\t\t\t}\n\t\t\tput(cutLineWidthDict,line._document_number,CutWidth);\n\t\t\tput(cutLineLengthDict,line._document_number,CutLength);\n\t\t\t\n\t\t\tif(hiddenSaleType == \"Cut Dimension\" OR hiddenSaleType == \"Supplier Part\"){\n\t\t\t\tsupplierProcessedVal = getconfigattrvalue(line._parent_doc_number, \"customProcessed\");\n\t\t\t\tif(NOT isNull(supplierProcessedVal) AND ((supplierProcessedVal == \"Supplier Processed\" AND hiddenSaleType == \"Cut Dimension\") OR (hiddenSaleType == \"Supplier Part\" AND supplierProcessedVal == \"McNICHOLS Processed\"))){\n\t\t\t\t\tcutSizeCount = 1;\n\t\t\t\t\tif(containsKey(cutLineCountDict,line._parent_doc_number)){\n\t\t\t\t\t\tcutSizeCount = atoi(get(cutLineCountDict,line._parent_doc_number))+1;\n\t\t\t\t\t}\n\t\t\t\t\tput(cutLineCountDict,line._parent_doc_number,String(cutSizeCount));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//concat issue\n\t\t\ttmp=tmp + line._document_number + \"~width_line~\" + string(CutWidth) + \"|\"\n\t\t\t+ line._document_number + \"~length_line~\" + string(CutLength) + \"|\"; \n\t\t\t\n\t\t\tcutTypeArray = util.getPartInformation(lineCommentFromConfig, \"CUT_TYPE\");\n\t\t\tbandingArray = util.getPartInformation(lineCommentFromConfig, \"BANDING\");\n\t\t\tfabricationArray = util.getPartInformation(lineCommentFromConfig, \"FABRICATION\");\n\t\t\tsourceStockPNArray = util.getPartInformation(lineCommentFromConfig, \"SRC_STK_PN\");\n\t\t\tsourceStockPNQtyArray = util.getPartInformation(lineCommentFromConfig, \"STK_QTY\");\n\t\t\tisDropUsedArray = util.getPartInformation(lineCommentFromConfig, \"IS_DROP_USED\");\n\t\t\tcutSeqArray = util.getPartInformation(lineCommentFromConfig, \"CUT_SEQ\");\n\t\t\tworkCenterCodeArray = util.getPartInformation(lineCommentFromConfig, \"WC_CODE\");\n\t\t\tePOutboundFreightArray = util.getPartInformation(lineCommentFromConfig, \"EP_OB_FRT\");\n\t\t\tnumberOfHoursArray = util.getPartInformation(lineCommentFromConfig, \"NUM_LAB_HRS\");\n\t\t\tsequenceCodeArray = util.getPartInformation(lineCommentFromConfig, \"SEQ_CODE\");\n\t\t\texternalProcessingCostArray = util.getPartInformation(lineCommentFromConfig, \"EP_COST\");\n\t\t\tlinePriorityArray = util.getPartInformation(lineCommentFromConfig, \"LINE_PRIORITY\");\n\t\t\tePVendorNumberArray = util.getPartInformation(lineCommentFromConfig, \"EP_VEN_NUM\");\n\t\t\tePInboundFreightArray = util.getPartInformation(lineCommentFromConfig, \"EP_IB_FRT\");\n\t\t\tspecialInstructionArray = util.getPartInformation(lineCommentFromConfig, \"SP_INST\");\t\n\t\t\tcustomVendorNumberArray = util.getPartInformation(lineCommentFromConfig, \"CUST_VEN_NUM\");\n\t\t\tcustomInboundFreightArray = util.getPartInformation(lineCommentFromConfig, \"CUST_IB_FRT\");\n\t\t\tcustomBranchNumberArray = util.getPartInformation(lineCommentFromConfig, \"CUST_BR_NUM\");\n\t\t\t//3376 - rgauthier\n\t\t\tsupplierInstructionArray = util.getPartInformation(lineCommentFromConfig, \"SU_INST\");\n\t\t\t\t\n\t\t\tcutType = \"\";\n\t\t\tif(sizeofarray(cutTypeArray) > 0){\n\t\t\t\tcutType = cutTypeArray[0];\n\t\t\t}\n\t\t\tbanding = \"\";\n\t\t\tif(sizeofarray(bandingArray) > 0){\n\t\t\t\tPRINT \"BANDING111111111111111111111111111111111111111111111111111111111\";\n\t\t\t\tPRINT banding;\n\t\t\t\tbanding = bandingArray[0];\n\t\t\t\tprint \"banding\";\n\t\t\t\tprint banding;\n\t\t\t}\n\t\t\tfabrication = \"\";\n\t\t\tif(sizeofarray(fabricationArray) > 0){\n\t\t\t\tfabrication = fabricationArray[0];\n\t\t\t\tprint \"fabrication\";\n\t\t\t\tprint fabrication;\n\t\t\t}\n\t\t\t\n\t\t\tsourceStockPN = \"\";\n\t\t\tif(sizeofarray(sourceStockPNArray) > 0){\n\t\t\t\tsourceStockPN = sourceStockPNArray[0];\n\t\t\t}\n\n\t\t\tif((hiddenSaleType == \"Trench Cut Requirement\" OR hiddenSaleType == \"Trench Cut Dimension\") AND multipieceConstructionFlag == false AND containsKey(parentPartWeightDict,line._parent_doc_number)){\n\t\t\t\ttempParentWidth = get(parentPartWeightDict,line._parent_doc_number);\n\t\t\t\tif(tempParentWidth < CutWidth){\n\t\t\t\t\tmultipieceConstructionFlag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsourceStockPNQty = 0;\n\t\t\tif(sizeofarray(sourceStockPNQtyArray) > 0 AND isnumber(sourceStockPNQtyArray[0])){\n\t\t\t\tsourceStockPNQty = Integer(atof(sourceStockPNQtyArray[0]));\n\t\t\t}\n\t\t\tisDropUsed = false;\n\t\t\tif(sizeofarray(isDropUsedArray) > 0 AND isDropUsedArray[0] <> \"0\"){\n\t\t\t\tisDropUsed = true;\n\t\t\t}\n\t\t\thasInfill = false;\n\t\t\tif(sizeofarray(fabricationArray) > 0 AND fabricationArray[0] <> \"0\" AND fabrication == \"Framing\"){\n\t\t\t\thasInfill = true;\n\t\t\t\tprint \"hasInfill\";\n\t\t\t\tprint hasInfill;\n\t\t\t}\n\t\t\tif(sizeofarray(fabricationArray) > 0 AND fabricationArray[0] <> \"0\" AND fabrication == \"Framing\"){\n\t\t\t\tput(infillDict,line._document_number,true);\n\t\t\t\tput(infillDictQuote,line._parent_doc_number,true);\n\t\t\t\t\n\t\t\t}\n\t\t\tprint \"INFILLDICT\";\n\t\t\tprint infillDict;\n\t\t\tprint \"INFILLQUOTEDICT\";\n\t\t\tprint infillDictQuote;\n\t\t\t\n\t\t\tcutSequence = \"\";\n\t\t\tif(sizeofarray(cutSeqArray) > 0){\n\t\t\t\tcutSequence = cutSeqArray[0];\n\t\t\t}\n\t\t\tworkCenterCode = \"\";\n\t\t\tif(sizeofarray(workCenterCodeArray) > 0){\n\t\t\t\tworkCenterCode = workCenterCodeArray[0];\n\t\t\t}\n\n\t\t\tePVendorNumber = \"\";\n\t\t\tif(sizeofarray(ePVendorNumberArray) > 0){\n\t\t\t\tePVendorNumber = ePVendorNumberArray[0];\n\t\t\t}\n\t\t\tePInboundFreight = 0.0;\n\t\t\tif(sizeofarray(ePInboundFreightArray) > 0 AND isnumber(ePInboundFreightArray[0])){\n\t\t\t\tePInboundFreight = atof(ePInboundFreightArray[0]);\n\t\t\t}\n\t\t\tePOutboundFreight = 0.0;\n\t\t\tif(sizeofarray(ePOutboundFreightArray) > 0 AND isnumber(ePOutboundFreightArray[0])){\n\t\t\t\tePOutboundFreight = atof(ePOutboundFreightArray[0]);\n\t\t\t}\n\t\t\tnumberOfHours = 0.0;\n\t\t\tif(sizeofarray(numberOfHoursArray) > 0 AND isnumber(numberOfHoursArray[0])){\n\t\t\t\tnumberOfHours = atof(numberOfHoursArray[0]);\n\t\t\t}\t\t\n\t\t\tsequenceCode = \"\";\n\t\t\tif(sizeofarray(sequenceCodeArray) > 0){\n\t\t\t\tsequenceCode = sequenceCodeArray[0];\n\t\t\t}\t\t\n\t\t\texternalProcessingCost = 0.0;\n\t\t\tif(sizeofarray(externalProcessingCostArray) > 0 AND isnumber(externalProcessingCostArray[0])){\n\t\t\t\texternalProcessingCost = atof(externalProcessingCostArray[0]);\n\t\t\t}\t\n\t\t\tlinePriority = 99;\n\t\t\tif(sizeofarray(linePriorityArray) > 0 AND isnumber(linePriorityArray[0])){\n\t\t\t\tlinePriority = atoi(linePriorityArray[0]);\n\t\t\t}\n\t\t\t\n\t\t\tif(quoteDescLinePriority == -1 OR quoteDescLinePriority > linePriority) {\n\t\t\t\tquoteDescription = line._part_desc;\n\t\t\t\tquoteDescLinePriority = linePriority;\n\t\t\t}\n\t\t\t\n\t\t\tif(sizeofarray(specialInstructionArray) > 0){\n\t\t\t\tspecialInstructionsFromComment = specialInstructionArray[0];\n\t\t\t\tspecialInstructionsFromComment = replace(specialInstructionsFromComment,\"DOUBLE_QUOTE_IDENTIFIER\", \"\\\"\");\t\t\t\n\t\t\t\tspecialInstructionsFromComment = replace(specialInstructionsFromComment,\"DOUBLE_STAR_IDENTIFIER\", \"**\");\n\t\t\t\tspecialInstructionsFromComment = replace(specialInstructionsFromComment,\"DOUBLE_DOLLAR_IDENTIFIER\", \"$$\");\n\t\t\t\tspecialInstructionsFromComment = replace(specialInstructionsFromComment,\"DOUBLE_COLON_IDENTIFIER\", \"::\");\n\t\t\t\tspecialInstructionsFromComment = replace(specialInstructionsFromComment,\"DOUBLE_HASH_IDENTIFIER\", \"##\");\n\t\t\t\tspecialInstructionsFromComment = replace(specialInstructionsFromComment,\"DOUBLE_CAP_IDENTIFIER\", \"^^\");\n\t\t\t\tspecialInstructionsFromComment = replace(specialInstructionsFromComment,\"SINGLE_STAR_IDENTIFIER\", \"*\");\n\t\t\t\tspecialInstructionsFromComment = replace(specialInstructionsFromComment,\"DOUBLE_AT_IDENTIFIER\", \"@@\");\n\t\t\t\ttmp=tmp + line._document_number + \"~specialInstructions_line~\" + specialInstructionsFromComment + \"|\";\n\t\t\t}\n\t\t\t\n\t\t\t//3376 - rgauthier\n\t\t\tif(sizeofarray(supplierInstructionArray) > 0){\n\t\t\t\tsupplierInstructionsFromComment = supplierInstructionArray[0];\n\t\t\t\tsupplierInstructionsFromComment = replace(supplierInstructionsFromComment,\"DOUBLE_QUOTE_IDENTIFIER\", \"\\\"\");\t\t\t\n\t\t\t\tsupplierInstructionsFromComment = replace(supplierInstructionsFromComment,\"DOUBLE_STAR_IDENTIFIER\", \"**\");\n\t\t\t\tsupplierInstructionsFromComment = replace(supplierInstructionsFromComment,\"DOUBLE_DOLLAR_IDENTIFIER\", \"$$\");\n\t\t\t\tsupplierInstructionsFromComment = replace(supplierInstructionsFromComment,\"DOUBLE_COLON_IDENTIFIER\", \"::\");\n\t\t\t\tsupplierInstructionsFromComment = replace(supplierInstructionsFromComment,\"DOUBLE_HASH_IDENTIFIER\", \"##\");\n\t\t\t\tsupplierInstructionsFromComment = replace(supplierInstructionsFromComment,\"DOUBLE_CAP_IDENTIFIER\", \"^^\");\n\t\t\t\tsupplierInstructionsFromComment = replace(supplierInstructionsFromComment,\"SINGLE_STAR_IDENTIFIER\", \"*\");\n\t\t\t\tsupplierInstructionsFromComment = replace(supplierInstructionsFromComment,\"DOUBLE_AT_IDENTIFIER\", \"@@\");\n\t\t\t\ttmp=tmp + line._document_number + \"~ePSupplierInstructions_line~\" + supplierInstructionsFromComment + \"|\";\n\t\t\t}\n\t\t\t\n\t\t\tcustomVendorNumber = \"\";\n\t\t\tif(sizeofarray(customVendorNumberArray) > 0){\n\t\t\t\ttmp=tmp + line._document_number + \"~customVendorNumber_line~\" + customVendorNumberArray[0] + \"|\";\n\t\t\t}\t\n\t\t\tcustomInboundFreight = 0.0;\n\t\t\tif(sizeofarray(customInboundFreightArray) > 0 AND isnumber(customInboundFreightArray[0])){\n\t\t\t\ttmp=tmp + line._document_number + \"~customInboundFreight_line~\" + string(round(atof(customInboundFreightArray[0]), 2)) + \"|\";\n\t\t\t}\n\t\t\tcustomBranchNumber = \"\";\n\t\t\tif(sizeofarray(customBranchNumberArray) > 0){\n\t\t\t\ttmp=tmp + line._document_number + \"~customBranch_line~\" + customBranchNumberArray[0] + \"|\";\n\t\t\t}\n\t\t\t\n\t\t\tproductIdentifier = \"\";\t\n\t\t\tproductIdentifier = substring(line._part_number, 0, 8);\n\t\t\t//concat issue\t\t\n\t\t\ttmp=tmp + line._document_number + \"~cutType_line~\" + cutType + \"|\"\n\t\t\t+ line._document_number + \"~fabrication_line~\" + fabrication + \"|\"\n\t\t\t+ line._document_number + \"~banding_line~\" + banding + \"|\"\n\t\t\t+ line._document_number + \"~sourceStockPartNumber_line~\" + sourceStockPN + \"|\"\n\t\t\t+ line._document_number + \"~sourceStockQuantity_line~\" + string(sourceStockPNQty) + \"|\"\n\t\t\t+ line._document_number + \"~cutSequence_line~\" + cutSequence + \"|\"\n\t\t\t+ line._document_number + \"~workCenter_line~\" + workCenterCode + \"|\"\n\t\t\t+ line._document_number + \"~vendorNumber_line~\" + ePVendorNumber + \"|\"\n\t\t\t+ line._document_number + \"~externalCost_line~\" + string(externalProcessingCost) + \"|\"\n\t\t\t+ line._document_number + \"~numberOfHours_line~\" + string(numberOfHours) + \"|\"\n\t\t\t+ line._document_number + \"~sequence_line~\" + sequenceCode + \"|\"\n\t\t\t+ line._document_number + \"~lineComment_line~\" + lineCommentFromConfig + \"|\"\n\t\t\t+ line._document_number + \"~customSequenceNumber_line~\" + string(linePriority) + \"|\"\n\t\t\t+ line._document_number + \"~shippingOriginBranchCode_line~\" + recBranchNum + \"|\"\n\t\t\t+ line._document_number + \"~branchShortName_line~\" + recBranchName + \"|\"\n\t\t\t+ line._document_number + \"~productIdentifier_line~\" + productIdentifier + \"|\"\n\t\t\t+ line._document_number + \"~dropsUsed_line~\" + string(isDropUsed) + \"|\"\n\t\t\t+ line._document_number + \"~infillPanel_line~\" + string(hasInfill) + \"|\";\n\t\t\tprint \"tmp\";\n\t\t\tprint tmp;\n\t\tif(_system_current_step_var == \"pending_process_bmClone_1\" OR _system_current_step_var == \"pending_process\" OR _system_current_step_var == \"start_step\" OR hiddenSaleType <> \"External\" OR inputActionName == \"unLockQuote\"){\n\t\t\t\ttmp = tmp + line._document_number + \"~EPInboundFreight_line~\" + string(ePInboundFreight) + \"|\"\n\t\t\t\t+ line._document_number + \"~EPOutboundFreight_line~\" + string(round(ePOutboundFreight, 2)) + \"|\"\n\t\t\t\t+ line._document_number + \"~freight_line~\" + string(ePInboundFreight + ePOutboundFreight) + \"|\";\n\t\t\t}\n\t\t\n\t\t\t/*if(isDropUsed == \"0\"){\n\t\t\t\ttmp=tmp + line._document_number + \"~dropsUsed_line~\" + string(false) + \"|\";\n\t\t\t}else{\n\t\t\t\ttmp=tmp + line._document_number + \"~dropsUsed_line~\" + string(isDropUsed) + \"|\";\n\t\t\t}*/\n\t\t\t//===========READ ALL LINE SPECIFIC INFORMATION FROM COMMENTS IN CONFIG AND UPDATE LINE LEVEL ATTRIBUTES - END===================\n\t\t}\n\t\telse {\n\t\t\t/**\n\t\t\t** This will be a model section to read data from the system\n\t\t\t**/\n\t\t\t\n\t\t\t//Added by Jenna Suarez 4/15 for clean up\n\t\t\ttmp = tmp + line._document_number + \"~extendedNetPrice_line~\" + string(round(100.00, 2)) + \"|\";\n\t\t\tput(modelOrderDict, line._sequence_number, atoi(line._document_number));//Add all models to OrderDict to have model # set\n\t\t\tparentSequenceNumber = line._sequence_number;\n\t\t\tput(parentSeqNumDict, line._document_number, string(line._sequence_number));\n\t\t\tput(itemNumberDict, line._sequence_number, line._part_number);\n\t\t\tput(modelSeqDocNumDict, line._sequence_number, line._document_number);\n\t\t\tput(docNumTypeDict, line._document_number, model);\n\t\t\tappend(eachDocNumList, line._document_number);\n\t\t\tput(modelListPriceDict, line._document_number, line._price_list_price_each);\n\t\t\tput(qtyDict, line._document_number, line._price_quantity);\n\t\t\tput(discountDict, line._document_number, line.discount_line);\n\t\t\tput(discountTypeDict, line._document_number, line.discountType_line);\n\t\t\tput(customGroupDict, line._document_number, line.customGroup_line);\n\t\t\tput(lockStandardDiscountDict, line._document_number, line.lockStandardDiscount_line);\n\t\t\tput(netPriceDict, line._document_number, line.netPriceEach_line);\n\t\t\tput(docNum_GroupNum_dict, line._document_number, line.customGroup_line);\n\t\t\tput(netEachPriceDict,line._document_number,netEachPriceFlag);\n\t\t\tput(extNetPriceDict,line._document_number,extNetPriceFlag);\n\t\t\tput(extNetPriceValue,line._document_number, line.extendedNetPrice_line);\n\t\t\t\n\t\t\t\n\t\t\t//put(netPriceDict, line._document_number, line._price_list_price_each);\n\t\t\t//If atleast one model has ManualEstimate = Yes Submit for OM Approval then set the manualEstimateModelFlag to TRUE. \n\t\t\t/* if((getconfigattrvalue(line._document_number,\"manualEstimate_Process\") == \"Yes Submit for OM Approval\") \n\t\t\tOR  (getreasonstatus(\"manualEstimateApprovalPending\") == BM_REASON_STATUS_PENDING)){\n\t\t\t\tmanualEstimateModelFlag = true;\n\t\t\t} */\n\t\t\t//if(inputActionName == \"submit\" AND (getconfigattrvalue(line._document_number,\"manualEstimate_Process\") == \"Yes Submit for OM Approval\")) \n\t\t\t//============DETERMINE IF MANUAL ESTIMATE APPROVAL IS REQUIRED FOR THE MODEL=========================\n\t\t\t//changed the config attribute to get per case 182628, and make sure that it isn't already approved\n\t\t\tif((getconfigattrvalue(line._document_number,\"manualEstimateActualSystemResult\") == \"Yes Submit for OM Approval\" OR getconfigattrvalue(line._document_number,\"manualEstimateActualSystemResult\") == \"Approval Pending\")\n\t\t\tAND getconfigattrvalue(line._document_number,\"manualEstimate_Process\") <> \"Yes-Approved\")\n\t\t\t{\n\t\t\t\tmanualEstimateModelFlag = true;\n\t\t\t\tput(manualEstimateDocNumDict,line._document_number,line._document_number);\n\t\t\t}\n\t\t\t//print \"***** opsInstruction_line DEBUG ***\";\n\t\t\tif(NOT(ISNULL(getconfigattrvalue(line._document_number,\"opsInstructions_Process\")))){\n\t\t\t\ttmp=tmp + line._document_number + \"~opsInstruction_line~\" + getconfigattrvalue(line._document_number,\"opsInstructions_Process\") + \"|\";\n\t\t\t}\n\t\t\t//print tmp;\n\t\t\t//====================================================================================================\n\t\t\testimatorType = getconfigattrvalue(line._document_number, \"estimatorType\");\n\t\t\t\n\t\t\texternalProcesTypes = getconfigattrvalue(line._document_number, \"externalProcess_externalProcessArray\");\n\t\t\tprocessingType = getconfigattrvalue(line._document_number, \"processingType\");\n\t\t\t//==============GATHER ALL CUSTOM MODEL LINE DOCUMENT NUMBERS============================\n\t\t\tif(estimatorType == \"Custom\") { \n\t\t\t\tcustomModel = customModel + \"~\" + line._document_number + \"~\";\n\t\t\t\t\n\t\t\t\tisSupplierProcessed = getconfigattrvalue(line._document_number, \"customProcessed\");\n\t\t\t\t//print \"***DEBUG isSupplierProcessed***********\";\n\t\t\t\t//print isSupplierProcessed;\n\t\t\t\tif(isNull(isSupplierProcessed) OR isSupplierProcessed == \"McNICHOLS Processed\"){\n\t\t\t\t\tisSupplierProcessed = \"false\";\n\t\t\t\t}else{\n\t\t\t\t\tisSupplierProcessed = \"true\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(requireProcess == false AND (isSupplierProcessed == \"false\" OR externalProcesTypes <> \"\")){\n\t\t\t\t\trequireProcess = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcustomModelWeight = getconfigattrvalue(line._document_number, \"customProcessWeight\");\n\t\t\t\t//External Processing value\n\t\t\t\tif(inputActionName == \"lockQuote\" AND externalProcesTypes <> \"\"/* AND isNumber(customModelWeight) AND atof(customModelWeight) <> line.vendorWeight_line*/){\n\t\t\t\t\tcustomFreightDataDict = commerce.getFreightSoapCall(line._document_number,customFreightDataDict,\"\");\n\t\t\t\t}\n\t\t\t\tput(supplierProcessedDict,line._document_number,isSupplierProcessed);\n\t\t\t}\n\t\t\t\n\t\t\t//=======================================================================================\n\t\t\tcustomGroups = customGroups + 1;\n\t\t\t\n\t\t\t//===========GET PROCESSING SPECIFIC INFORMATION FROM EACH CONFIGURATION - START==================\n\t\t\tspecialInstructions = getconfigattrvalue(line._document_number, \"specialInstructions_process\");\n\t\t\tcutStrategy = getconfigattrvalue(line._document_number, \"cutStrategy\");\n\t\t\tnumberOfProcessedSheets = atoi(getconfigattrvalue(line._document_number, \"numberOfProcessedSheets\"));\n\t\t\tproductIdentifier = \"\";\n\t\t\tmodelType = \"Configured Model\";\t\n\n\t\t\tif(estimatorType == \"Custom\" AND NOT isNull(getconfigattrvalue(line._document_number, \"customProductIdentifier\"))){\n\t\t\t\tproductIdentifier = getconfigattrvalue(line._document_number, \"customProductIdentifier\");\n\t\t\t}elif(numberOfProcessedSheets > 0 OR processingType == \"External Only\"){\n\t\t\t\tproductIdentifier = substring(getconfigattrvalue(line._document_number, \"processingSheet\"), 0, 8);\n\t\t\t}\n\t\t\t\n\t\t\tif(NOT isNull(getconfigattrvalue(line._document_number, \"selectedSheetsString\"))){\n\t\t\t\tselectedPartsArray = util.getPartInformation(getconfigattrvalue(line._document_number, \"selectedSheetsString\"),\"PART_NUMBER\");\n\t\t\t\tselectedPartsSaleTypeArray = util.getPartInformation(getconfigattrvalue(line._document_number, \"selectedSheetsString\"),\"SALE_TYPE\");\n\t\t\t\ttempIndex = 0;\n\t\t\t\tfor eachPart in selectedPartsArray{\n\t\t\t\t\tif(find(selectedPartsSaleTypeArray[tempIndex], \"Processed\") <> -1){\n\t\t\t\t\t\tselectedPartsRecordSet = bmql(\"select custom_field5 from _parts where part_number=$eachPart\");\n\t\t\t\t\t\tfor eachrecord in selectedPartsRecordSet{\n\t\t\t\t\t\t\tif(NOT isNull(get(eachrecord,\"custom_field5\"))){\n\t\t\t\t\t\t\t\tput(parentPartWeightDict,line._document_number,getFloat(eachrecord,\"custom_field5\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ttempIndex = tempIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tshipDrops = getconfigattrvalue(line._document_number, \"shipDrops\");\n\t\t\ttolerance = getconfigattrvalue(line._document_number, \"tolerance\");\n\t\t\t//tmp = tmp + line._document_number + \"~tolerance_line~\" + tolerance + \"|\";\t\n\t\t\t\n\t\t\t//=============ADD EACH LINE TOLERANCE IN TO THEIR RESPECTIVE MODEL QUANTITY=======//\n\t\t\tput(model_Tolerance_Dict, line._document_number, tolerance);\n\t\t\t//print \"Model Tolerance Dict\";\n\t\t\t//print model_Tolerance_Dict;\n\t\t\t\n\t\t\tif((NOT isNull(getconfigattrvalue(line._document_number, \"estimatorType\")) AND NOT isNull(getconfigattrvalue(line._document_number, \"includeEndPlates\"))) AND (getconfigattrvalue(line._document_number, \"estimatorType\") == \"Kits\" AND getconfigattrvalue(line._document_number, \"includeEndPlates\") <> \"Yes\")){\n\t\t\t\tput(model_EndPlates_Dict,line._document_number,\"true\");\n\t\t\t}else{\n\t\t\t\tput(model_EndPlates_Dict,line._document_number,\"false\");\n\t\t\t}\n\t\t\t//modelSpecialInstructions = getconfigattrvalue(line._document_number, \"specialInstructions\");\n\t\t\tput(infoForLineSortDict, line._document_number, productIdentifier);\n\t\t\t//put(model_SpecInst_Dict, line._document_number, specialInstructions);\n\n\t\t\t\n\t\t\ttmp = tmp + line._document_number + \"~specialInstructions_line~\" + specialInstructions + \"|\";\n\t\t\tif(shipDrops == \"Yes\"){\n\t\t\t\ttmp = tmp + line._document_number + \"~shipDrops_line~\" + string(true) + \"|\";\n\t\t\t}else{\n\t\t\t\ttmp = tmp + line._document_number + \"~shipDrops_line~\" + string(false) + \"|\";\n\t\t\t}\n\t\t\t\n\t\t\tif((shipDrops == \"No\" AND line.shipDrops_line == true) OR (shipDrops == \"Yes\" AND line.shipDrops_line == false)){\n\t\t\t\tput(shipDropChangeDict,line._document_number,line._document_number);\n\t\t    }\n\t\t\t//concat issue\n\t\t\ttmp = tmp + line._document_number + \"~cutStrategy_line~\" + cutStrategy + \"|\"\n\t\t\t+ line._document_number + \"~productIdentifier_line~\" + productIdentifier + \"|\"\n\t\t\t+ line._document_number + \"~lineType_line~\" + modelType + \"|\";\n\t\t\t\n\t\t\tconfigLineSeqNumber = \"1\";\n\t\t\tif(NOT isNull(getconfigattrvalue(line._document_number, \"linePriority\"))){\n\t\t\t\tconfigLineSeqNumber = getconfigattrvalue(line._document_number, \"linePriority\");\n\t\t\t}\n\n\t\t\ttmp=tmp + line._document_number + \"~customSequenceNumber_line~\" + configLineSeqNumber + \"|\";\n\t\t\t//===========GET PROCESSING SPECIFIC INFORMATION FROM EACH CONFIGURATION - END==================\n\t\t}\n\t\t\n\t\t//=================TRACK ALL PART NUMBERS FOR EACH LINE AND PREPARE XML NODES TO BE INCLUDED IN THE ITEM AVAILABILITY CALL - START=========================\n\t\t//added by anguemnang the 04.07.2012 to update SOAP Call\n\t\t//if(inputActionName = \"default\"){\n\t\t\t//Prepare xml string to be used in WS request.\n\t\t\t//if(line._part_number <> \"\")\n\t\t\tif(line._part_number <> \"\" AND len(line._part_number) >= 6 AND substring(line._part_number, -2) <> \"SA\" AND line._part_custom_field26 <> \"Fabricated Active\" AND line._part_custom_field26 <> \"Special Order\")\n\t\t\t{\n\t\t\t\t//Add Accsy parts to this\n\t\t\t\t//if(find(saleType, \"Stock Only\") <> -1 OR find(saleType, \"Processed\") <> -1){\n\t\t\t\tif(find(saleType, \"Stock Only\") <> -1 OR find(saleType, \"Processed\") <> -1 OR find(saleType, \"Accsy\") <> -1){\n\t\t\t\t\tPartNumberXML=PartNumberXML+\"<item1:ItemNumber>\"+line._part_number+\"<\/item1:ItemNumber>\";\n\t\t\t\t\t//print \"adding \" + line._part_number+ \" to sequence dict \" + string(line._sequence_number);\n\t\t\t\t\tput(SeqNumber_PartOrderDict,string(line._sequence_number),PartOrder);\n\t\t\t\t\tPartOrder = PartOrder+1;\n\t\t\t\t\t\n\t\t\t\t\tif(findinarray(partsForPricingTableArray, line._part_number) == -1){\n\t\t\t\t\t\tappend(partsForPricingTableArray, line._part_number);\n\t\t\t\t\t\tput(partsForPricingTableDict, line._sequence_number, line._part_number);\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\t\n\t\t//}\n\t\t\n\t\t//=================PUT RETURN STRING INTO RETURN ARRAY ====================================================================================================\n\t\tif(counter >= 1000){\n\t\t\ttemp = join(returnarray,\"\");\n\t\t\treturnarray = returnemptyarray;\n\t\t\treturnarray[0] = temp;\n\t\t\tcounter = 1;\n\t\t}\n\t\tif(tmp <> \"\"){\n\t\t\treturnarray[counter] = tmp;\n\t\t\tcounter = counter + 1;\n\t\t}\n\t\t//=================TRACK ALL PART NUMBERS FOR EACH LINE AND PREPARE XML NODES TO BE INCLUDED IN THE ITEM AVAILABILITY CALL - END===========================\n\t}\n\t\n\tresTiming1 = start - getcurrenttimeinmillis();\n\tresTimingString = resTimingString + \"\\nLine 621: \" + string(resTiming1);\n\tstart = getcurrenttimeinmillis();\n\n\t//============SET MODEL # ORDER TO DISPLAY - KYLE DIXON 4/17/14=============//Sets table information in same order as Models\n\t//============SET FINAL DIMENSIONS/CUTS TEXT ATTRIBUTES - JENNA SUAREZ 5/14/14===========//\n\tinfoString = \"\";\n\tfinalCuts = \"\";\n\tfinalDimensions = \"\";\n\tcutType = \"\";\n\tcutQuantity = \"\";\n\tcutWidths = \"\";\n\tcutLengths = \"\";\n\tcutSpInst = \"\";\n\tfabrication = \"\";\n\thasFraming = \"\";\n\tmodelCount = 1;\n\tcount = 0;\n\tcutCount = 0;\n\ttempModelCount = modelCount;\n\ttotalQuantity = 0;\n\texternalProcessing = \"\";\n\tlabor = \"\";\n\tbanding = \"\";\n\tfabrication = \"\";\n\thasFab = false;\n\tsupplierFinalCuts = \"\";\n\n\tloopArr = Integer[numOfLines + 1];\n\n\tfor each in loopArr{\n\t\ttmp = \"\";\n\t\t\n\t\t//set cutSizeCount\n\t\t//tmp = tmp + \"1~cutSize_quote~\" + string(cutSizeCount) + \"|\";\n\t\t\n\t\tif(containskey(partsForPricingTableDict, count)){\n\t\t\tappend(partsForPricingTableArr, get(partsForPricingTableDict, count));\n\t\t}\n\t\t\n\t\t//print \"*************DEBUG formattedFinalDimensions_line only for those in infoForCutLinesDict, model_Weight_dict**********\";\n\t\t//print infoForCutLinesDict;\n\t\t//print model_Weight_dict;\n\t\t//print modelSeqDocNumDict;\n\t\t//print \"$$PARENT_PART::\" + get(itemNumberDict, count + 1);\n\t\tPRINT \"INFOFORCUTLINESDICT\";\n\t\tprint infoForCutLinesDict;\n\t\n\t\tif(containskey(infoForCutLinesDict, count) AND (containsKey(model_Weight_dict,get(modelSeqDocNumDict, count)))){\n\t\t\t\n\t\t\t//append(infoForCutLinesArr, \"MODEL_WEIGHT::\" + string(get(model_Weight_dict,get(modelSeqDocNumDict, count))) + \"$$GROUP_NUMBER::\" + string(modelCount) + \"$$PARENT_PART::\" + get(itemNumberDict, count + 1) + \"$$\" + get(infoForCutLinesDict, count) + \"##\");\n\t\t\tput(modelCutDataDict,get(modelSeqDocNumDict, count),\"MODEL_WEIGHT::\" + string(get(model_Weight_dict,get(modelSeqDocNumDict, count))) + \"$$GROUP_NUMBER::\" + string(modelCount) + \"$$PARENT_PART::\" + get(itemNumberDict, count + 1));\n\t\t\tprint \"**********I'm here for final dimensions & cuts*************\";\n\t\t\tif(tempModelCount <> modelCount){\n\t\t\t\tfinalCuts = \"\";\n\t\t\t\tfinalDimensions = \"\";\n\t\t\t\ttotalQuantity = 0;\n\t\t\t\tlabor = \"\";\n\t\t\t\texternalProcessing = \"\";\n\t\t\t\tbanding = \"\";\n\t\t\t\ttempModelCount = modelCount;\n\t\t\t\tfabrication = \"\";\n\t\t\t\thasFab = false;\n\t\t\t\tsupplierFinalCuts = \"\";\n\t\t\t\thasFraming = \"\";\n\t\t\t}\n\t\t\t\n\t\t\t// Added by Jenna Suarez 5/15 for line level attiributes:\n\t\t\tinfoString = \"MODEL_WEIGHT::\" + string(get(model_Weight_dict,get(modelSeqDocNumDict, count))) + \"$$GROUP_NUMBER::\" + string(modelCount) + \"$$PARENT_PART::\" + get(itemNumberDict, count + 1) + \"$$\" + get(infoForCutLinesDict, count) + \"##\";\n\t\t\t\n\t\t\t/*tempModelSpInst = \"\";\n\t\t\tif(containsKey(model_SpecInst_Dict,get(modelSeqDocNumDict, count))){\n\t\t\t\ttempModelSpInst = get(model_SpecInst_Dict,get(modelSeqDocNumDict, count));\n\t\t\t\t//print tempModelSpInst;\n\t\t\t\t//print \"**********about to set final dimensions***********\";\n\t\t\t\n\t\t\t\tif(tempModelSpInst <> \"\"){\n\t\t\t\t\tfinalDimensions = finalDimensions + \"Special Instructions:^\" + tempModelSpInst + \"^\";\n\t\t\t\t\tfinalCuts = finalCuts + \"Special Instructions:^\" + tempModelSpInst + \"^\";\n\t\t\t\t}\n\t\t\t}*/\n\t\t\toptInstDict = commerce.getOpsInstructionsData(modelSeqDocNumDict, count);\n\t\t\tif(containsKey(optInstDict,\"SpecInstFinalDimensions_key\") AND actionName <> \"view_rfq\"){\n\t\t\t\tfinalDimensions = finalDimensions+get(optInstDict,\"SpecInstFinalDimensions_key\");\n\t\t\t\tfinalCuts = finalDimensions;\n\t\t\t}\n\t\t\tif(containsKey(optInstDict,\"OptInstFinalDimensions_key\")){\n\t\t\tfinalDimensions = finalDimensions+get(optInstDict,\"OptInstFinalDimensions_key\");\n\t\t\t//finalCuts = finalDimensions;\t\n\t\t\t}\n\t\t\t\n\t\t\tparentParts = split(infoString, \"PARENT_PART:\");\n\t\t\t//print \"****DEBUG finaldimensions********\";\n\t\t\t//print parentParts;\n\t\t\tfor eachParentPart in parentParts{\n\t\t\t\tcuts = split(eachParentPart, \"PART_NUMBER:\");\n\t\t\t\tcutCount = 1;\n\t\t\t//if the word TRENCH is part of the parent part\t\n\t\t\t\tif(find(eachParentPart, \"TRENCH\") <> -1 or find(eachParentPart, \"Custom Product\") <> -1){\n\t\t\t\t\tuseSupplierParts = false;\n\t\t\t\t\tif(find(eachParentPart, \"Custom Product\") <> -1){\n\t\t\t\t\t\ttempParentDocNum = \"\";\n\t\t\t\t\t\tif(containskey(lineOrderDict, count)){\n\t\t\t\t\t\t\ttempDocNum = String(get(lineOrderDict, count));\n\t\t\t\t\t\t\tif(containsKey(parentDocNumDict, tempDocNum)){\n\t\t\t\t\t\t\t\ttempParentDocNum = get(parentDocNumDict, tempDocNum);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}elif(containskey(modelOrderDict, count)){\n\t\t\t\t\t\t\ttempParentDocNum = String(get(modelOrderDict, count));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(tempParentDocNum <> \"\" AND containsKey(supplierProcessedDict, tempParentDocNum)){\n\t\t\t\t\t\t\tif(get(supplierProcessedDict, tempParentDocNum) == \"false\"){\n\t\t\t\t\t\t\t\tuseSupplierParts = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor eachCut in cuts{\n\t\t\t\t\t\teachCutsArr=split(eachCut,\"$$\");\n\t\t\t\t\t\tif(find(eachCut, \"TRENCH\") <> - 1 or (find(eachParentPart, \"Custom Product\") <> -1 and (find(eachCut, \":JDECR\") <> - 1  OR find(eachCut, \":Supplier Part\") <> - 1))){\n\t\t\t\t\t\t\tcutCount = cutCount +1;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//print eachCutArr;\n\t\t\t\t\t\t\tfor eachCuts in eachCutsArr{\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Set Banding for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"BANDING::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"BANDING::\");\n\t\t\t\t\t\t\t\tbanding= substring(eachCuts,tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set Cut Type for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"CUT_TYPE::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"CUT_TYPE::\");\n\t\t\t\t\t\t\t\tcutType = substring(eachCuts, tempStart+10);\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\t//Set Quantity for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"QUANTITY::\")<>-1){\n\t\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"QUANTITY::\");\n\t\t\t\t\t\t\t\t\tcutQuantity = substring(eachCuts, tempStart+10);\n\t\t\t\t\t\t\t\t\tif(tempStart <> -1 AND isnumber(cutQuantity)){\n\t\t\t\t\t\t\t\t\t\ttotalQuantity = totalQuantity + atoi(cutQuantity);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set Length for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"CUT_LEN::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"CUT_LEN::\");\n\t\t\t\t\t\t\t\tcutLengths = substring(eachCuts, tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set Special Instructions for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"SP_INST::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"SP_INST::\");\n\t\t\t\t\t\t\t\tcutSpInst = substring(eachCuts, tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Set Width for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"CUT_WID::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"CUT_WID::\");\n\t\t\t\t\t\t\t\tcutWidths = substring(eachCuts, tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set Fabrication for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts, \"FABRICATION::\") <> -1){\n\t\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"FABRICATION::\");\n\t\t\t\t\t\t\t\t\tfabrication = substring(eachCuts, tempStart+13);\n\t\t\t\t\t\t\t\t\tprint \"FABRICATION HERE\";\n\t\t\t\t\t\t\t\t\tprint fabrication;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinalDimensions = finalDimensions + cutQuantity + \" at \" + cutWidths + \"'' width x \" + cutLengths + \"'' length - \" + lower(cutType) + \" cut\";\n\t\t\t\t\t\t\tif(useSupplierParts AND find(eachCut, \":Supplier Part\") <> - 1){\n\t\t\t\t\t\t\t\tsupplierFinalCuts = supplierFinalCuts + cutQuantity + \" at \" + cutWidths + \"'' width x \" + cutLengths + \"'' length - \" + lower(cutType) + \" cut\";\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tfinalCuts = finalCuts + cutQuantity + \" at \" + cutWidths + \"'' width x \" + cutLengths + \"'' length - \" + lower(cutType) + \" cut\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(cutSpInst <> \"\"){\n\t\t\t\t\t\t\t\t//Modify string to replace the identifiers\n\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_QUOTE_IDENTIFIER\", \"\\\"\");\t\t\t\n\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_STAR_IDENTIFIER\", \"**\");\n\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_DOLLAR_IDENTIFIER\", \"$$\");\n\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_COLON_IDENTIFIER\", \"::\");\n\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_HASH_IDENTIFIER\", \"##\");\n\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_CAP_IDENTIFIER\", \"^^\");\n\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"SINGLE_STAR_IDENTIFIER\", \"*\");\n\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_AT_IDENTIFIER\", \"@@\");\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//finalDimensions = finalDimensions + \", Special Instructions: \" + cutSpInst;\n\t\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \", \" + cutSpInst;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(useSupplierParts AND find(eachCut, \":Supplier Part\") <> - 1){\n\t\t\t\t\t\t\t\t\t//supplierFinalCuts = supplierFinalCuts + \", Special Instructions: \" + cutSpInst;\n\t\t\t\t\t\t\t\t\tsupplierFinalCuts = supplierFinalCuts + \", \" + cutSpInst;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t//finalCuts = finalCuts + \", Special Instructions: \" + cutSpInst;\n\t\t\t\t\t\t\t\t\tfinalCuts = finalCuts + \", \" + cutSpInst;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(banding <> \"\" AND banding <> \"N/A\"){\n\t\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \", \" + banding + \" Banding\";\n\t\t\t\t\t\t\t\tif(useSupplierParts AND find(eachCut, \":Supplier Part\") <> - 1){\n\t\t\t\t\t\t\t\t\tsupplierFinalCuts = supplierFinalCuts + \", \" + banding + \" Banding\";\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tfinalCuts = finalCuts + \", \" + banding + \" Banding\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(fabrication <> \"\" AND fabrication <> \"None\" AND fabrication <> \"N/A\"){\n\t\t\t\t\t\t\t\tprint \"FABRICATION NOT NONE\";\n\t\t\t\t\t\t\t\tprint fabrication;\n\t\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \", fabrication: \" + fabrication;\n\t\t\t\t\t\t\t\tif(useSupplierParts AND find(eachCut, \":Supplier Part\") <> - 1){\n\t\t\t\t\t\t\t\t\tsupplierFinalCuts = supplierFinalCuts + \", fabrication: \" + fabrication;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tfinalCuts = finalCuts + \", fabrication: \" + fabrication;\n\t\t\t\t\t\t\t\t\tprint \"FABRICATION SUPPLIER PARTS\";\n\t\t\t\t\t\t\t\t\tprint fabrication;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \"^\";\n\t\t\t\t\t\t\tif(useSupplierParts AND find(eachCut, \":Supplier Part\") <> - 1 AND supplierFinalCuts <> \"\"){\n\t\t\t\t\t\t\t\tsupplierFinalCuts = supplierFinalCuts + \"^\";\n\t\t\t\t\t\t\t}elif(finalCuts <> \"\"){\n\t\t\t\t\t\t\t\tfinalCuts = finalCuts + \"^\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(find(finalDimensions, \"LINE_WEIGHT\") <> -1){\n\t\t\t\t\t\t\t\tfinalDimensions = \"\";\n\t\t\t\t\t\t\t\tfinalCuts = \"\";\n\t\t\t\t\t\t\t\tsupplierFinalCuts = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}elif(find(eachCut, \"Internal Processing\") <> -1){\n\t\t\t\t\t\t\tif(labor == \"\"){\n\t\t\t\t\t\t\t\tlabor = \"Internal Processing: ^\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//Set Labor Description for this cut\n\t\t\t\t\t\t\ttempStart = find(eachCut, \"$$DESCRIPTION::\");\n\t\t\t\t\t\t\ttempEnd = find(eachCut, \"##LINE_WEIGHT\");\n\t\t\t\t\t\t\ttempLabor = substring(eachCut, tempStart+15, tempEnd);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlabor = labor + \"  - \" + tempLabor + \"^\";\n\n\t\t\t\t\t\t}elif(find(eachCut, \"External Processing\") <> -1){\n\t\t\t\t\t\t\tif(externalProcessing == \"\"){\n\t\t\t\t\t\t\t\texternalProcessing = \"External Processing: ^\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//eachCutsArr=split(eachCut,\"$$\");\n\t\t\t\t\t\t\t//print eachCutArr;\n\t\t\t\t\t\t\tfor eachCuts in eachCutsArr{\n\t\t\t\t\t\t\t\t//Set Special Instructions for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"SP_INST::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"SP_INST::\");\n\t\t\t\t\t\t\t\tcutSpInst= substring(eachCuts,tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set EP Description for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"DESCRIPTION::\")<>-1){\n\t\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"DESCRIPTION::\");\n\t\t\t\t\t\t\t\t\ttempEnd = find(eachCuts, \"##\");\n\t\t\t\t\t\t\t\t\ttempEP = substring(eachCuts, tempStart+13,tempEnd);\n\t\t\t\t\t\t\t\t\texternalProcessing = externalProcessing + \"  - \" + tempEP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(cutSpInst <> \"\"){\n\t\t\t\t\t\t\t\t\t//Modify string to replace the identifiers\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_QUOTE_IDENTIFIER\", \"\\\"\");\t\t\t\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_STAR_IDENTIFIER\", \"**\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_DOLLAR_IDENTIFIER\", \"$$\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_COLON_IDENTIFIER\", \"::\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_HASH_IDENTIFIER\", \"##\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_CAP_IDENTIFIER\", \"^^\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"SINGLE_STAR_IDENTIFIER\", \"*\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_AT_IDENTIFIER\", \"@@\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//externalProcessing = externalProcessing + \", Special Instructions: \" + cutSpInst;\n\t\t\t\t\t\t\t\t\texternalProcessing = externalProcessing + \", \" + cutSpInst;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}//CPQS - finaldimensions for custom lines - they containng JDECR from config - START\n\t\t\t\t/*elif(find(eachParentPart, \"Custom Product\") <> -1){\n\t\t\t\t\tfor eachCut in cuts{\n\t\t\t\t\t\tif(find(eachCut, \":JDECR\") <> - 1){\n\t\t\t\t\t\t\t//Set Banding for this cut\n\t\t\t\t\t\t\ttempStart = find(eachCut, \"BANDING::\");\n\t\t\t\t\t\t\ttempEnd = find(eachCut, \"$$FABRICATION\");\n\t\t\t\t\t\t\tbanding = substring(eachCut, tempStart+9, tempEnd);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Set Cut Type for this cut\n\t\t\t\t\t\t\ttempStart = find(eachCut, \"CUT_TYPE::\");\n\t\t\t\t\t\t\ttempEnd = find(eachCut, \"$$IS_DROP_USED::\");\n\t\t\t\t\t\t\tcutType = substring(eachCut, tempStart+10, tempEnd);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Set Quantity for this cut\n\t\t\t\t\t\t\ttempStart = find(eachCut, \"QUANTITY::\");\n\t\t\t\t\t\t\ttempEnd = find(eachCut, \"$$SALE_TYPE::\");\n\t\t\t\t\t\t\tcutQuantity = substring(eachCut, tempStart+10, tempEnd);\n\t\t\t\t\t\t\tif(tempStart <> -1 AND isnumber(cutQuantity)){\n\t\t\t\t\t\t\t\ttotalQuantity = totalQuantity + atoi(cutQuantity);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//Set Width for this cut\n\t\t\t\t\t\t\ttempStart = find(eachCut, \"CUT_WID::\");\n\t\t\t\t\t\t\ttempEnd = find(eachCut, \"$$CUT_LEN::\");\n\t\t\t\t\t\t\tcutWidths = substring(eachCut, tempStart+9, tempEnd);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Set Length for this cut\n\t\t\t\t\t\t\ttempStart = find(eachCut, \"CUT_LEN::\");\n\t\t\t\t\t\t\ttempEnd = find(eachCut, \"$$CUT_TYPE::\");\n\t\t\t\t\t\t\tcutLengths = substring(eachCut, tempStart+9, tempEnd);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfinalDimensions = finalDimensions + cutQuantity + \" at \" + cutWidths + \"'' width x \" + cutLengths + \"'' length - \" + lower(cutType) + \" cut\";\n\t\t\t\t\t\t\tfinalCuts = finalCuts + cutQuantity + \" at \" + cutWidths + \"'' width x \" + cutLengths + \"'' length - \" + lower(cutType) + \" cut\";\n\t\t\t\t\t\t\t\tif(banding <> \"\" AND banding <> \"N/A\"){\n\t\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \", \" + banding + \" Banding\";\n\t\t\t\t\t\t\t\tfinalCuts = finalCuts + \", \" + banding + \" Banding\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \"^\";\n\t\t\t\t\t\t\tfinalCuts = finalCuts + \"^\";\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\t\n\t\t\t\t}*///CPQS - finaldimensions for custom lines - they containng JDECR from config - END\n\t\t\t\telse{\n\t\t\t\t\n\t\t\t\t\tfor eachCut in cuts{\n\t\t\t\t\t\teachCutsArr=split(eachCut,\"$$\");\t\t\t\t\t\t\n\t\t\t\t\t\tif(find(eachCut, \":CR\") <> - 1){\n\t\t\t\t\t\t\tcutCount = cutCount +1;\n\t\t\t\t\t\t\tremoveCuts = false; //Added to remove the cut if reconfigure and extra CR001 is in the cuts array. AML\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfor eachCuts in eachCutsArr{\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Set Banding for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"BANDING::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"BANDING::\");\n\t\t\t\t\t\t\t\tbanding= substring(eachCuts,tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set Cut Type for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"CUT_TYPE::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"CUT_TYPE::\");\n\t\t\t\t\t\t\t\tcutType = substring(eachCuts, tempStart+10);\n\t\t\t\t\t\t\t\t}\t\t\t\n\t\t\t\t\t\t\t\t//Set Quantity for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"QUANTITY::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"QUANTITY::\");\n\t\t\t\t\t\t\t\tcutQuantity = substring(eachCuts, tempStart+10);\n\t\t\t\t\t\t\t\t\tif(tempStart <> -1 AND isnumber(cutQuantity)){\n\t\t\t\t\t\t\t\t\t\ttotalQuantity = totalQuantity + atoi(cutQuantity);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set Width for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"CUT_WID::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"CUT_WID::\");\n\t\t\t\t\t\t\t\tcutWidths = substring(eachCuts, tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set Length for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"CUT_LEN::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"CUT_LEN::\");\n\t\t\t\t\t\t\t\tcutLengths = substring(eachCuts, tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set Special Instructions for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"SP_INST::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"SP_INST::\");\n\t\t\t\t\t\t\t\tcutSpInst = substring(eachCuts, tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"FABRICATION::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"FABRICATION::\");\n\t\t\t\t\t\t\t\tfabrication = substring(eachCuts, tempStart+13);\n\t\t\t\t\t\t\t\tprint \"JDE CUT REQ FABRICATION\";\n\t\t\t\t\t\t\t\tprint fabrication;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(eachCuts <> \"\"){\n\t\t\t\t\t\t\t\t\tif(startswith(eachCuts, \"LINE_WEIGHT::\")){//Added if extra CR001 is in cuts array. Will only have CR001 part number and Line_Weight values. AML\n\t\t\t\t\t\t\t\t\t\tremoveCuts = true;\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tremoveCuts = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tinfill = false;\n\t\t\t\t\t\t\t\tif(fabrication == \"Framing\"){\n\t\t\t\t\t\t\t\t\tinfill = true;\n\t\t\t\t\t\t\t\t}\t\n\n\t\t\t\t\t\t\t\tprint \"line.infillPanel_line FOR JDE CUT REQ\";\t\n\t\t\t\t\t\t\t\tprint infill;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfinalDimensions = finalDimensions + cutQuantity + \" at \" + cutWidths + \"'' width x \" + cutLengths + \"'' length - \" + lower(cutType) + \" cut\";\n\t\t\t\t\t\t\t\tfinalCuts = finalCuts + cutQuantity + \" at \" + cutWidths + \"'' width x \" + cutLengths + \"'' length - \" + lower(cutType) + \" cut\";\n\t\n\t\t\t\t\t\t\t\tif(cutSpInst <> \"\"){\n\t\t\t\t\t\t\t\t\t//Modify string to replace the identifiers\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_QUOTE_IDENTIFIER\", \"\\\"\");\t\t\t\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_STAR_IDENTIFIER\", \"**\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_DOLLAR_IDENTIFIER\", \"$$\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_COLON_IDENTIFIER\", \"::\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_HASH_IDENTIFIER\", \"##\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_CAP_IDENTIFIER\", \"^^\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"SINGLE_STAR_IDENTIFIER\", \"*\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_AT_IDENTIFIER\", \"@@\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//finalDimensions = finalDimensions + \", Special Instructions: \" + cutSpInst;\n\t\t\t\t\t\t\t\t\t//finalCuts = finalCuts + \", Special Instructions: \" + cutSpInst;\n\t\t\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \", \" + cutSpInst;\n\t\t\t\t\t\t\t\t\tfinalCuts = finalCuts + \", \" + cutSpInst;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(banding <> \"\" AND banding <> \"N/A\"){\n\t\t\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \", \" + banding + \" Banding\";\n\t\t\t\t\t\t\t\t\tfinalCuts = finalCuts + \", \" + banding + \" Banding\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(fabrication <> \"\" AND fabrication <> \"None\" AND fabrication <> \"N/A\"){\n\t\t\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \", fabrication: \" + fabrication;\n\t\t\t\t\t\t\t\t\tfinalCuts = finalCuts + \", fabrication: \" + fabrication;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfinalDimensions = finalDimensions + \"^\";\n\t\t\t\t\t\t\t\tfinalCuts = finalCuts + \"^\";\n\t\t\t\t\t\t\t\t//Added check to see if anything besides the Line Weight is in the array. If not then just return blank. AML\n\t\t\t\t\t\t\t\tif(find(finalDimensions, \"LINE_WEIGHT\") <> -1 OR removeCuts == true){\n\t\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t\t\tfinalCuts = \"\";\n\t\t\t\t\t\t\t\t\t\tfinalDimensions = \"\";\n\t\t\t\t\t\t\t\t\t**/\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\ttempFinalDimArray = split(finalDimensions,\"^\");\n\t\t\t\t\t\t\t\t\ttempFinalCutsArray = split(finalCuts,\"^\");\n\t\t\t\t\t\t\t\t\tsizeTFDimArr = sizeofarray(tempFinalDimArray);\n\t\t\t\t\t\t\t\t\tsizeTFCutsArr = sizeofarray(tempFinalCutsArray);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif(sizeTFDimArr>2){ //Must find the extra CR001 in array. Sometimes special instructions are on the 1st index.\n\t\t\t\t\t\t\t\t\t\tremove(tempFinalDimArray, sizeTFDimArr-2); //Remove the extra CR001 from teh array\n\t\t\t\t\t\t\t\t\t\tfinalDimensions = join(tempFinalDimArray, \"^\"); //Combine the FInal Cuts with delimiter of ^\n\t\t\t\t\t\t\t\t\t\t//finalCuts = join(tempFinalDimArray, \"^\"); //Combine the FInal Cuts with delimiter of ^\n\t\t\t\t\t\t\t\t\t\t//Removed this due to not needing to add an extra//finalCuts = finalCuts + \"^\"; //Add an extra delimieter of ^ at the end (since we always add one for items that aren't blank)\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\tfinalDimensions = \"\"; //If there's only two items in array. It will be [Cr001, ]. The second index will always be blank. Just return blank then\n\t\t\t\t\t\t\t\t\t\t//finalCuts = \"\"; //If there's only two items in array. It will be [Cr001, ]. The second index will always be blank. Just return blank then\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif(sizeTFCutsArr>2){\n\t\t\t\t\t\t\t\t\t\tremove(tempFinalCutsArray, sizeTFCutsArr-2); //Remove the extra CR001 from teh array\n\t\t\t\t\t\t\t\t\t\tfinalCuts = join(tempFinalCutsArray, \"^\"); //Combine the FInal dims with delimiter of ^\n\t\t\t\t\t\t\t\t\t\tfinalDimensions = join(tempFinalCutsArray, \"^\"); //Combine the FInal dims with delimiter of ^\n\t\t\t\t\t\t\t\t\t\t//Removed this due to not needing to add an extra//finalDimensions = finalDimensions + \"^\"; //Add an extra delimieter of ^ at the end (since we always add one for items that aren't blank)\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t//finalDimensions = \"\"; //If there's only two items in array. It will be [Cr001, ]. The second index will always be blank. Just return blank then\n\t\t\t\t\t\t\t\t\t\tfinalCuts = \"\"; //If there's only two items in array. It will be [Cr001, ]. The second index will always be blank. Just return blank then\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}elif(find(eachCut, \"Internal Processing\") <> -1){\n\t\t\t\t\t\t\tif(labor == \"\"){\n\t\t\t\t\t\t\t\tlabor = \"Internal Processing: ^\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//Set Labor Description for this cut\n\t\t\t\t\t\t\ttempStart = find(eachCut, \"$$DESCRIPTION::\");\n\t\t\t\t\t\t\ttempEnd = find(eachCut, \"##LINE_WEIGHT\");\n\t\t\t\t\t\t\ttempLabor = substring(eachCut, tempStart+15, tempEnd);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlabor = labor + \"  - \" + tempLabor + \"^\";\n\n\t\t\t\t\t\t}elif(find(eachCut, \"External Processing\") <> -1){\n\t\t\t\t\t\t\tif(externalProcessing == \"\"){\n\t\t\t\t\t\t\t\texternalProcessing = \"External Processing: ^\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor eachCuts in eachCutsArr{\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Set Special Instructions for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"SP_INST::\")<>-1){\n\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"SP_INST::\");\n\t\t\t\t\t\t\t\tcutSpInst= substring(eachCuts,tempStart+9);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Set EP Description for this cut\n\t\t\t\t\t\t\t\tif(find(eachCuts,\"DESCRIPTION::\")<>-1){\n\t\t\t\t\t\t\t\t\ttempStart = find(eachCuts, \"DESCRIPTION::\");\n\t\t\t\t\t\t\t\t\ttempEnd = find(eachCuts, \"##\");\n\t\t\t\t\t\t\t\t\ttempEP = substring(eachCuts, tempStart+13,tempEnd);\n\t\t\t\t\t\t\t\t\texternalProcessing = externalProcessing + \"  - \" + tempEP;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(cutSpInst <> \"\"){\n\t\t\t\t\t\t\t\t\t//Modify string to replace the identifiers\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_QUOTE_IDENTIFIER\", \"\\\"\");\t\t\t\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_STAR_IDENTIFIER\", \"**\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_DOLLAR_IDENTIFIER\", \"$$\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_COLON_IDENTIFIER\", \"::\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_HASH_IDENTIFIER\", \"##\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_CAP_IDENTIFIER\", \"^^\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"SINGLE_STAR_IDENTIFIER\", \"*\");\n\t\t\t\t\t\t\t\t\tcutSpInst = replace(cutSpInst,\"DOUBLE_AT_IDENTIFIER\", \"@@\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//externalProcessing = externalProcessing + \", Special Instructions: \" + cutSpInst;\n\t\t\t\t\t\t\t\t\texternalProcessing = externalProcessing + \", \" + cutSpInst;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\t//print \"*************DEBUG finalDimensions at last **********\";\n\t\t//print finalDimensions;\n\t\t/*if(containskey(cutLineDocNumDict,count)){\n\t\t\ttmp = tmp + get(cutLineDocNumDict, count) + \"~formattedFinalDimensions_line~\" + finalDimensions + \"|\"\n\t\t\t+ get(cutLineDocNumDict, count) + \"~formattedFinalCuts_line~\" + finalCuts + \"|\"\n\t\t\t+ get(cutLineDocNumDict, count) + \"~laborAndEP_line~\" + externalProcessing + \"|\";\n\t\t}elif(containskey(noncutLineDocNumDict, count)){\n\t\t\ttmp = tmp + get(noncutLineDocNumDict, count) + \"~formattedFinalDimensions_line~\"  + \"|\"\n\t\t\t+ get(noncutLineDocNumDict, count) + \"~formattedFinalCuts_line~\" + \"|\"\n\t\t\t+ get(noncutLineDocNumDict, count) + \"~laborAndEP_line~\" + \"|\";\n\t\t}*/\n\t\tif(containskey(lineOrderDict, count)){\n\t\t\t//concat issue\n\t\t\ttmp = tmp + string(get(lineOrderDict,count)) + \"~modelNumber_line~\" + string(modelCount - 1) + \"|\";\n\t\t\t//+ get(lineSeqDocNumDict, count) + \"~laborAndEP_line~\" + externalProcessing + \"|\";\n\t\t\t\t\n\t\t\tif(containsKey(model_Quantity_Dict, get(parentDocNumDict,get(lineSeqDocNumDict, count))) AND totalQuantity <>0){\n\t\t\t\tput(model_Quantity_Dict, get(parentDocNumDict,get(lineSeqDocNumDict, count)), totalQuantity);\n\t\t\t}\n\t\t\ttempFinalDimensions = \"\";\n\t\t\ttempfinalCuts = \"\";\n\t\t\ttempexternalProcessing = \"\";\n\t\t\ttempSupplierFinalCuts = \"\";\n\t\t\tif(findinarray(cutLineParentdocArray,get(parentDocNumDict,String(get(lineOrderDict,count)))) <> -1){\n\t\t\t\ttempFinalDimensions = finalDimensions;\n\t\t\t\ttempfinalCuts = finalCuts;\n\t\t\t\ttempexternalProcessing = externalProcessing;\n\t\t\t\ttempSupplierFinalCuts = supplierFinalCuts;\n\t\t\t}\n\n\t\t\ttmp = tmp + string(get(lineOrderDict,count)) + \"~formattedFinalDimensions_line~\" + tempFinalDimensions + \"|\"\n\t\t\t\t+ string(get(lineOrderDict,count)) + \"~formattedFinalCuts_line~\" + tempfinalCuts + \"|\"\n\t\t\t\t+ string(get(lineOrderDict,count)) + \"~laborAndEP_line~\" + tempexternalProcessing + \"|\"\n\t\t\t\t+ string(get(lineOrderDict,count)) + \"~formattedSupplierCuts_line~\" + tempSupplierFinalCuts + \"|\";\n\t\t}\n\t\tif(containskey(modelOrderDict, count)){\n\t\t\t//put(modelNumberDict,String(get(modelOrderDict,count)),string(modelCount));\n\t\t\t//concat issue\n\t\t\ttmp = tmp + string(get(modelOrderDict,count)) + \"~modelNumber_line~\" + string(modelCount) + \"|\"\n\t\t\t+ get(modelSeqDocNumDict, count) + \"~formattedFinalDimensions_line~\" + finalDimensions + \"|\"\n\t\t\t+ get(modelSeqDocNumDict, count) + \"~formattedFinalCuts_line~\" + finalCuts + \"|\"\n\t\t\t+ get(modelSeqDocNumDict, count) + \"~laborAndEP_line~\" + externalProcessing + \"|\"\n\t\t\t+ get(modelSeqDocNumDict, count) + \"~formattedSupplierCuts_line~\" + supplierFinalCuts + \"|\";\n\t\t\tmodelCount = modelCount + 1;\n\t\t}\n\t\tcount = count + 1;\n\n\t\t//=================PUT RETURN STRING INTO RETURN ARRAY ====================================================================================================\n\t\tif(counter >= 1000){\n\t\t\ttemp = join(returnarray,\"\");\n\t\t\treturnarray = returnemptyarray;\n\t\t\treturnarray[0] = temp;\n\t\t\tcounter = 1;\n\t\t}\n\t\tif(tmp <> \"\"){\n\t\t\treturnarray[counter] = tmp;\n\t\t\tcounter = counter + 1;\n\t\t}\n\t}\n\n\t//============DETERMINE THE FOB POINT SELECTED IN THE CONFIGURATION=============\n\tfobPointBranchCodeArr = values(ShippingBranchdict);\n\tfor fobPoint in fobPointBranchCodeArr {\n\t\tif (fobPoint <> \"\") {\t\n\t\t\tfobPointBranchCode = fobPoint; \n\t\t\tbreak;\n\t\t}\n\t}\n\t//==============================================================================\n\n\t//=============GET COMPLETE ADDRESS OF THE FOB POINT FROM THE DATA TABLE============\n\tif(fobPointBranchCode <> \"\"){\n\t\t//20141121 - CPQS - Using BMQL of BranchNameRecs\n\t\t//BranchNameRecs = bmql(\"select Branch_Num, Branch_Name, Branch_Zip, Branch_Street, Branch_City, Branch_State, Branch_Country  from BranchNum_Name where Branch_Num =  $fobPointBranchCode\");\n\t\tfor eachRec in BranchNameRecs{\n\t\t\tif(get(eachRec, \"Branch_Num\") == fobPointBranchCode){\n\t\t\t\tfobPointBranch_Name = get(eachRec, \"Branch_Name\"); \n\t\t\t\tfobPointBranch_Zip = get(eachRec, \"Branch_Zip\");\n\t\t\t\tfobPointBranchName_Zip = fobPointBranch_Name + \"-\" + fobPointBranch_Zip;\n\t\t\t\tfobPointBranch_Street = get(eachRec,  \"Branch_Street\");\t\t\n\t\t\t\tfobPointBranch_City = get(eachRec,  \"Branch_City\");\n\t\t\t\tfobPointBranch_State = get(eachRec,  \"Branch_State\");\n\t\t\t\tfobPointBranch_Country = get(eachRec,  \"Branch_Country\");\n\t\t\t}\n\t\t}\n\t}\n\t//==================================================================================\n\n\t/*\n\tif(manualEstimateModelFlag == true){\n\t\t\tmanualEstimateAppRqd_quote = manualEstimateModelFlag;\n\t}*/\n\t//==============GET ALL PARTS INFORMATION FROM THE PARTS DATABASE AND PUT IN DICTIONARIES=================================\n\t//20141121 - CPQS - Combined this BMQL with the below query which is on the same table\n\tPartWeigthRecs=bmql(\"select part_number,price,custom_field1,custom_field2,custom_field3,custom_field4,custom_field5,custom_field6,custom_field22,custom_field24,custom_field25 from _parts where part_number IN $partNumList\");\n\tPartWeightDict=dict(\"float\");\n\tPartSWDict=dict(\"float\");\n\tPartSLDict=dict(\"float\");\n\tPartsCF24Dict=dict(\"string\");\n\tPartsCF25Dict=dict(\"string\");\n\t\n\tfor eachRecord in PartWeigthRecs{\n\t\tif(isnumber(get(eachRecord,\"custom_field22\"))){\n\t\t\tput(PartWeightDict,get(eachRecord,\"part_number\"),atof(get(eachRecord,\"custom_field22\")));\n\t\t}\n\t\tif(isnumber(get(eachRecord,\"custom_field5\"))){\n\t\t\tput(PartSWDict,get(eachRecord,\"part_number\"),atof(get(eachRecord,\"custom_field5\")));\n\t\t}\n\t\tif(isnumber(get(eachRecord,\"custom_field6\"))){\n\t\t\tput(PartSLDict,get(eachRecord,\"part_number\"),atof(get(eachRecord,\"custom_field6\")));\n\t\t}\n\t\t//if(get(eachRecord,\"custom_field24\") <> \"0\"){\n\t\tput(PartsCF24Dict,get(eachRecord,\"part_number\"),get(eachRecord,\"custom_field24\"));\n\t\t//}\n\t\t//if(get(eachRecord,\"custom_field25\") == \"Yes\"){\n\t\tput(PartsCF25Dict,get(eachRecord,\"part_number\"),get(eachRecord,\"custom_field25\"));\n\t\t//}\n\t}\n\t//==========================================================================================================================\n\t//query the DB to get the part list prices.\n\n\t//======================GET THE LIST PRICES OF ALL LINES EXIST ON THE QUOTE FROM DATA TBALE=============================\n\tlistPriceRecSet = recordset();\n\tlistPriceRecSet = bmql(\"SELECT ITEM, Pricebrk_1, Pricebrk_2, Pricebrk_3, Pricebrk_4, Pricebrk_5, Pricebrk_6, Pricebrk_7, Pricebrk_8, Pricebrk_9, Qtybrk_1, Qtybrk_2, Qtybrk_3, Qtybrk_4, Qtybrk_5, Qtybrk_6, Qtybrk_7, Qtybrk_8, Qtybrk_9 FROM BracketologyPartPric WHERE ITEM in $partNumList\");\n\n\t//=====================================================================================================================\n\t/**\n\t\tGet the latest part information from part database\n\t**/\n\t// Get the latest parts data from parts file\n\tif(adminNumDayRefreshPartDB_quote <> -1 and sizeofarray(partNumList) > 0 and currentDate >= updateDate ){\n\t\t//20141121 - CPQS - Combined this BMQL with the above query which is on the same table\n\t\t//partsData = bmql(\"SELECT part_number, price, custom_field1, custom_field2, custom_field3, custom_field4,_part_custom_field24,_part_custom_field25,_part_custom_field20 FROM _parts WHERE part_number IN $partNumList\");\n\t\tpreparts682 = getcurrenttimeinmillis();\n\t\t//for parts in partsData\n\t\tfor parts in PartWeigthRecs{\n\t\t\teachDocNumList = String[];\n\t\t\tpartNum = get(parts, \"part_number\");\n\t\t\teachDocNumList = get(partNumDocDict, partNum);\n\t\t\tpreEachDocNum686 = getcurrenttimeinmillis();\n\t\t\tfor eachDocNum in eachDocNumList{\n\t\t\t\tif (isnumber(get(parts, \"price\"))) {\n\t\t\t\t\tput(listPriceDict, eachDocNum, getfloat(parts, \"price\"));\n\t\t\t\t}\n\t\t\t\tput(field1Dict, eachDocNum, get(parts, \"custom_field1\"));\n\t\t\t\tput(field2Dict, eachDocNum, get(parts, \"custom_field2\"));\n\t\t\t\tput(field3Dict, eachDocNum, get(parts, \"custom_field3\"));\n\t\t\t\tput(field4Dict, eachDocNum, get(parts, \"custom_field4\"));\n\t\t\t\t\n\t\t\t\tput(familyDict, eachDocNum, get(parts, \"custom_field1\"));\n\t\t\t\tif(isnumber(get(parts, \"custom_field2\"))){\n\t\t\t\t\tput(costEachDict, eachDocNum, atof(get(parts, \"custom_field2\")));\n\t\t\t\t}\n\t\t\t\tif(isnumber(get(parts, \"custom_field3\"))){\n\t\t\t\t\tput(maxDiscountDict, eachDocNum, atof(get(parts, \"custom_field3\")));\n\t\t\t\t}\n\t\t\t\tif(isnumber(get(parts, \"custom_field4\"))){\n\t\t\t\t\tput(maintenancePercentDict, eachDocNum, atof(get(parts, \"custom_field4\")));\n\t\t\t\t}\n\t\t\t} \n\t\t\tpreEachDocNum686 = getcurrenttimeinmillis() - preEachDocNum686;\n\t\t}\n\t\tpreparts682 = getcurrenttimeinmillis() - preparts682;\n\t}\n\n\t/**\n\tGet the volumePricing \n\t**/\n\tif(adminVolumePricing_quote <> \"None\" ){\n\t\tlistPriceDict = util.getVolumePricing(partNumList, partNumDocDict, qtyDict, listPriceDict, adminVolumePricing_quote);\n\t} \n\n\t/**\n\tGet the up-to-date max discount threholds\n\t**/\n\tmaxDiscountDict = util.getMaxDiscount(partNumList, partNumDocDict, familyDict, familyList, maxDiscountDict, userGroup);\n\tresTiming1 = start - getcurrenttimeinmillis();\n\tresTimingString = resTimingString + \"\\nLine 727: \" + string(resTiming1);\n\tstart = getcurrenttimeinmillis();\n\t\n\t//===================GET SOAP REQUEST FORMAT FOR ITEM AVAILABILITY CALL FROM FILE MANAGER================\n\tprint \"Loop through all parts line items\"; \n\tlineRes = \"\";\n\tdocNumType = \"\";\n\tprint \"Fields needed to send tax calculation request\";\n\tLineItemInfoXML=\"\";\n\tSiteStr = lower(_system_supplier_company_name);\n\tgetItemInfoxmlURL = \"https://\" + SiteStr +\".bigmachines.com/bmfsweb/\" + SiteStr + \"/image/TIBCOWS/LineItem_info.xml\";  //file location \n\tprint \"LineItemInfoXML\";\n\tprint LineItemInfoXML;\n\tprint \"SiteStr\";\n\tprint SiteStr;\n\tprint \"========================================================================================================\";\n\twstime = getstrdate();\n\tstart_time = getcurrenttimeinmillis();\n\tgetItemInfoxmlFile = urldatabypost(getItemInfoxmlURL,\"\",\"\");  // calls file\n\tend_time = getcurrenttimeinmillis();\n\tvalid_record_date = minusdays(getdate(),days_to_keep);\n\n\tif(WS_isdebug == \"true\" AND sitename == \"DevMcNichols\"){\n\tprint \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\";\n\t\tret = ret +\n\t\twstime + \" Call \" + getItemInfoxmlURL + \" \\n\" + \n\t\t\"--Took: \" + string(end_time-start_time) + \"milliseconds\\n\" +\n\t\t\"--From: \" + \"Action: inputActionName Pricing function at line 737\\n\" + \"======================\\n\";\n\t}\n\n\tresTiming1 = start - getcurrenttimeinmillis();\n\tresTimingString = resTimingString + \"\\nLine 746: \" + string(resTiming1);\n\tstart = getcurrenttimeinmillis();\n\t// Approval Thresholds -- Needed for good User Experience\n\t// Implemented by M. Musa on 14 June 2012.\n\t/*salesLevel = 1;\n\trecs = recordset();\n\tprint \"USER333$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\";\n\t\n\tif(userThatSubmitted_quote == \"\") {\n\t     \n\t\trecs = bmql(\"SELECT SalesLevel FROM SalesUserData WHERE User = $_system_user_login\");print \"Sales Level\" + string(salesLevel)+ _system_user_login;\n\t} else {\n\t\trecs = bmql(\"SELECT SalesLevel FROM SalesUserData WHERE User = $userThatSubmitted_quote\");print userThatSubmitted_quote;\n\t}\n\tfor rec in recs {\n\t\tif (isnumber(get(rec, \"SalesLevel\"))) {\n\t\t\tsalesLevel = atoi(get(rec, \"SalesLevel\"));print \"Sales Level\" + string(salesLevel);\n\t    print \"RECS\";\n\t    print recs;\t\t\n\t\t}\n\t}\n\n\tmarginThreshold = 0.0;\n\tlowerDiscThreshold = 0.0;\n\tupperDiscThreshold = 0.0;\n\tminimumThreshold = 0.0;\n\tnetThreshold = 0.0;*/\n\tmarginThresholdReached = false;\n\tlowerDiscThresholdReached = false;\n\tupperDiscThresholdReached = false;\n\tminimumThresholdReached = false;\n\tnetThresholdReached = false;\n\t\n\t/*recs = bmql(\"SELECT MarginThreshold, LowerDiscThreshold, UpperDiscThreshold, MinimumThreshold, NetThreshold FROM ApprovalThresholds WHERE SalesLevel = $salesLevel\");\n\tfor rec in recs {\n\t\tmarginThreshold = atof(get(rec,\"MarginThreshold\")); print marginThreshold;\n\t\tlowerDiscThreshold = atof(get(rec,\"LowerDiscThreshold\")); print lowerDiscThreshold;\n\t\tupperDiscThreshold = atof(get(rec,\"UpperDiscThreshold\")); print upperDiscThreshold;\n\t\tminimumThreshold = atof(get(rec,\"MinimumThreshold\")); print MinimumThreshold;\n\t\tnetThreshold = atof(get(rec,\"NetThreshold\")); print netThreshold;\n\t}*/\n\tresArr = commerce.thresholdInitialisation();\n\tmarginThreshold = resArr[0];\n\tlowerDiscThreshold = resArr[1];\n\tupperDiscThreshold = resArr[2];\n\tminimumThreshold = resArr[3];\n\tnetThreshold = resArr[4];\n\t// End Threshold initialization\n\n\t//====================MAKING WEBSERVICE CALL TO TIBCO ITEM AVAILABILITY SERVICE TO GET AVAILABILITY OF EACH ITEM - START==================================\n\t// added by anguemnang the 22.03.2012 reason: get updated costEa_line values from SOAP.\n\t//if there are no parts.\n\tresTiming1 = start - getcurrenttimeinmillis();\n\tresTimingString = resTimingString + \"\\nLine 786: \" + string(resTiming1);\n\tstart = getcurrenttimeinmillis();\n\tsiteNameStr = lower(_system_supplier_company_name);\n\tsoapURLRecs = bmql(\"select URL, SoapAction, RequestFileName, Category from SiteInfo where SiteName = $siteNameStr and Integration = 'TIBCO' and (Category = 'Availability' OR Category = 'Tax')\");\n\tif(lower(inputActionName) == \"submit\" OR lower(inputActionName) == \"default\" OR lower(inputActionName) == \"request approval\" OR lower(inputActionName) == \"reconfigure\" OR lower(inputActionName) == \"unlockquote\" OR (cPSOrder_quote == false AND mTR_quote == true AND _system_current_step_var == \"start_step\")){\n\t\tif(PartNumberXML == \"\"){\n\t\t\tsoapResponseXML = \"\";\n\t\t}\n\t\telse {\n\t\t\t//ItemAvailability url\n\t\t\t//TIBCO SOAP call set up\n\t\t\ttibcoURL = \"\";\n\t\t\tSOAPAction = \"\";\n\t\t\tRequestFileName = \"ItemAvailabilty_MultipleParts_input\";\n\t\t\t//20141121 - CPQS - Moving on to the top so that to remove other query which is on the same table.\n\t\t\t//siteNameStr = lower(_system_supplier_company_name);\n\t\t\t//soapURLRecs = bmql(\"select URL, SoapAction, RequestFileName from SiteInfo where SiteName = $siteNameStr and Integration = 'TIBCO' and Category = 'Availability'\");\n\t\t\tfor eachRec in soapURLRecs{\n\t\t\t\tif(get(eachRec, \"Category\") == \"Availability\"){\n\t\t\t\t\ttibcoURL =  get(eachRec, \"URL\");\n\t\t\t\t\tSOAPAction =  get(eachRec, \"SoapAction\");\n\t\t\t\t\tRequestFileName =  get(eachRec, \"RequestFileName\");\n\t\t\t\t\tbreak;\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tgetTransactionURL = \"https://\"+ SiteStr +\".bigmachines.com/bmfsweb/\"+ SiteStr +\"/image/TIBCOWS/\" + RequestFileName + \".xml\";  //XML SOAP Request file location  \n\t\t\twstime = getstrdate();\n\t\t\tstart_time = getcurrenttimeinmillis();\n\n\t\t\tgetTransactionFile = urldatabypost(getTransactionURL,\"\",\"\");  // Gets XML file.\t\n\t\t\tend_time = getcurrenttimeinmillis();\n\t\t\tvalid_record_date = minusdays(getdate(),days_to_keep);\n\t\t\tif(WS_isdebug == \"true\" AND sitename == \"DevMcNichols\"){\n\t\t\t\tret = ret +\n\t\t\t\twstime + \" Call \" + getTransactionURL + \" \\n\" + \n\t\t\t\t\"--Took: \" + string(end_time-start_time) + \"milliseconds\\n\" +\n\t\t\t\t\"--From: \" + \"Action: inputActionName Pricing function at line 802 \\n\" + \"======================\\n\";\n\t\t\t}\n\n\t\t\t//insert part XML string in the request.\n\t\t\tgetTransactionFile = replace(getTransactionFile,\"$$PART_NUMBERS$$\", PartNumberXML);\n\n\t\t\t//preparing dictionary of headers\n\t\t\theaderDict = dict(\"string\");\n\t\t\tput(headerDict, \"SOAPAction\", SOAPAction); //Every SOAP call must have a soap Action\n\n\t\t\t // sends the soap call and returns response to variable. \n\t\t\t wstime = getstrdate();\n\t\t\tstart_time = getcurrenttimeinmillis();\n\t\t\tsoapResponseXML= urldatabypost(tibcoURL, getTransactionFile ,\"FAIL\",headerdict);\n\t\t\tend_time = getcurrenttimeinmillis();\n\t\t\tvalid_record_date = minusdays(getdate(),days_to_keep);\n\t\t\tif(WS_isdebug == \"true\" AND sitename == \"DevMcNichols\"){\n\t\t\t\tret = ret +\n\t\t\t\twstime + \" Call \" + tibcoURL + \" \\n\" + \n\t\t\t\t\"--Took: \" + string(end_time-start_time) + \"milliseconds\\n\" +\n\t\t\t\t\"--From: \" + \"Action: inputActionName Tibco Type: tax Pricing function at line 825 \\n\" + \"======================\\n\";\n\t\t\t}\n\t\t\tif(soapResponseXML == \"FAIL\") {\t\t\n\t\t\t\tAvailabilityCallFail = true;\n\t\t\t}\n\t\t}\n\t}\n\t//====================MAKING WEBSERVICE CALL TO TIBCO ITEM AVAILABILITY SERVICE TO GET AVAILABILITY OF EACH ITEM - END==================================\n\n\n\t//=================PARSE RESPONSE FROM ITEM AVAILABILITY WS CALL TO GET ACTUAL AVAILABILITY INFORMATION - START=====================================\n\tfor eachSeqNumber in LineItemSequenceNumbersArray{\n\t\t//Get Shipping Branch number from line item dictionary\n\n\t\tif(containsKey(SeqNumber_PartOrderDict,eachSeqNumber)){\n\t\t\tpartOrder = get(SeqNumber_PartOrderDict,eachSeqNumber);\n\n\t\t\t/*\n\t\t\tif(inputActionName == \"default\"){\n\t\t\t\titemAvailibityFromSOAP_Script = replace(soapResponseXML,\" xmlns:ns\"+string(PartOrder)+\"=\\\"http://www.mcnichols.com/External/Item\\\"\",\"\");\n\t\t\t}else{\n\t\t\t\titemAvailibityFromSOAP_Script = replace(itemAvailibityFromSOAP,\" xmlns:ns\"+string(PartOrder)+\"=\\\"http://www.mcnichols.com/External/Item\\\"\",\"\");\n\t\t\t}\n\t\t\t*/\n\t\t\t\t\n\t\t\titemAvailibityFromSOAP_Script = replace(soapResponseXML,\" xmlns:ns\"+string(PartOrder)+\"=\\\"http://www.mcnichols.com/External/Item\\\"\",\"\");\n\t\t\t\n\t\t\tItemNodes = string[];\n\t\t\tItemNodes = util.getXMLNodesByTag(itemAvailibityFromSOAP_Script, \"ns\"+string(PartOrder)+\":ItemAvailability\", true);\n\t\t\t\n\t\t\tBranchAvailibilityNodes = string[];\n\t\t\t//Get Availability information of all nodes.\n\t\t\tif(sizeofarray(ItemNodes) > 0){\t\t\t\t\n\t\t\t\tBranchAvailibilityNodes = util.getXMLNodesByTag(ItemNodes[0], \"ns\"+string(PartOrder)+\":BranchAvailability\", true);\n\t\t\t}\t\n\n\t\t\t//Check the available quantity in the shipping branch.\n\t\t\tif(containsKey(ShippingBranchdict,eachSeqNumber)){\n\t\t\t\tshippingBranch = get(ShippingBranchdict,eachSeqNumber);\n\t\t\t\t\n\t\t\t\t//print \"BM Part: \" + get(LineItem_Numdict,eachSeqNumber);\n\t\t\t\t//print \"BM Branch: \" + shippingBranch;\n\t\t\t\t\n\t\t\t\tfor eachBranchNode in BranchAvailibilityNodes{\n\t\t\t\t\tBranchNumber = util.getXMLNodesByTag(eachBranchNode, \"ns\"+string(PartOrder)+\":BranchNumber\", true);\n\t\t\t\t\tUnitCost = util.getXMLNodesByTag(eachBranchNode, \"ns\"+string(PartOrder)+\":UnitCost\", true);\n\n\t\t\t\t\tif(sizeofarray(BranchNumber) > 0 AND BranchNumber[0] ==  shippingBranch AND sizeofarray(UnitCost) > 0 AND isnumber(UnitCost[0])){\n\t\t\t\t\t\tif(containskey(DocNumberDict,eachSeqNumber)){\n\n\t\t\t\t\t\t\t// result = result + get(DocNumberDict,eachSeqNumber) + \"~costEa_line~\" + UnitCost[0] + \"|\";\n\t\t\t\t\t//    {10=0.0, 7=0.0, 5=26.26, 4=86.4, 9=30.0, 8=0.0, 11=0.0, 12=0.0}\t\t\n\t\t\t\t\t\t\tput(costEa_lineDict, get(DocNumberDict,eachSeqNumber), round(atof(UnitCost[0]), numDecimal));\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t}\t\t\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\t//=================PARSE RESPONSE FROM ITEM AVAILABILITY WS CALL TO GET ACTUAL AVAILABILITY INFORMATION - END=====================================\n\tresTiming1 = start - getcurrenttimeinmillis();\n\tresTimingString = resTimingString + \"\\nLine 905: \" + string(resTiming1);\n\tstart = getcurrenttimeinmillis();\n\tsumOfCostEa = 0.0;\n\tsumOfnetPriceEach = 0.0;\n\tcustomGroupFreightTotal = freightGroup1_quote + freightGroup2_quote + freightGroup3_quote + freightGroup4_quote + freightGroup5_quote + freightGroup6_quote;\n\tcutLinesDocNum = keys(eachCutLineDict);\n\t//cutLineTypeArray = String[]{\"Welding Cut Requirement\",\"JDE Cut Requirement\",\"Banding Cut Requirement\",\"Trench Cut Requirement\",\"Cut Requirements\",\"Cut Requirement\",\"Supplier Part\"};\n\tavailableParentArray = String[];\n\tsaleTypeCheckDict = Dict(\"string\");\n\n\t//Iterate over each document \n\tfor eachDocNum in docNumList {\n\t\ttmp = \"\";\n\t\tdocNumType = get(docNumTypeDict, eachDocNum);\n\t\tCostEa_Line_Script = 0.0;\n\t\tif(containsKey(costEa_lineDict, eachDocNum)){\n\t\t\tCostEa_Line_Script = get(costEa_lineDict, eachDocNum);\n\t\t}\n\t\t\n\t\tlineRes = \"\";\t\t\tfamily = \"\";\n\t\tcostEa = 0.0;\t\t\textendedCost = 0.0;\n\t\tlistPrice = 0.0;\t\textendedList = 0.0;\n\t\tmaintenancePercent = 0.0;\tmaintenanceSubtotalLine = 0.0;\n\t\tdiscount = 0.0;\t\t\tdiscountType = \"\";\n\t\tdiscount2\t= 0.0;\t\textendedDiscount = 0.0;\n\t\tdiscountPercent\t= 0.0;\t\tdiscountAmt\t= 0.0;\n\t\tmaxDiscountPercent = 0.0;\tapproval = false;\n\t\tnetPriceEach = 0.0;\t\textendedNet = 0.0;\n\t\tnetMarginAmt = 0.0;\t\tnetMarginAmtEach = 0.0;\n\t\tnetMarginPercent = 0.0;\t\tcustomGroup = \"\";\n\t\tcustomGroupDiscount = 0.0;  discPercOverHead = 0.0;\n\t\tdiscountAmtOverHead = 0.0;\tWeight=0.0;\n\t\tpartNumb = \"\"; \tWidth=0.0;\tLength = 0.0;\n\t\tDoc_GroupNumber = \"\";\tItemORModelTotalWeight = 0.0;\n\t\tweightForDisplay = 0;\n\t\toldQty = 0;\n\t\tqtyChanged = false;\n\t\tmodelSQFT = 0.0;\n\t\tcurrentDocSaleType = \"\";\n\t\tsupplierProcessed = \"false\";\n\t\tcustomCutList = \"false\";\n\t\tcustomFabDrawing = \"false\";\n\t\tframed = \"false\";\n\t\tcustomProcessingType = \"\";\n\t\t//==========DETERMINE THE LINE TYPE BASED ON ITEM SALE TYPE================\n\t\tif(containsKey(itemSaleTypeDict, eachDocNum)){\n\t\t\tcurrentDocSaleType = get(itemSaleTypeDict, eachDocNum);\n\t\t\tif(find(currentDocSaleType, \"Cut Requirement\") <> -1){\n\t\t\t\ttmp = tmp + eachDocNum + \"~lineType_line~Cut Requirement\" + \"|\";\n\t\t\t}elif(startswith(currentDocSaleType, \"Processed\")){\n\t\t\t\ttmp = tmp + eachDocNum + \"~lineType_line~Processed Stock\" + \"|\";\n\t\t\t}elif(startswith(currentDocSaleType, \"Custom\")){\n\t\t\t\ttmp = tmp + eachDocNum + \"~lineType_line~Custom\" + \"|\";\n\t\t\t}else{\n\t\t\t\ttmp = tmp + eachDocNum + \"~lineType_line~\" + currentDocSaleType + \"|\";\n\t\t\t}\t\n\t\t}\t\n\t\t//=========================================================================\n\t\t\t\n\t\t//Check if any processed lines exist on the Quote\n\t\tif(startswith(currentDocSaleType, \"Processed\") OR startswith(currentDocSaleType, \"External\") OR startswith(currentDocSaleType, \"Internal\")){\n\t\t\tprocessedItemsExistOnQuote = true;\n\t\t}\n\t\t//if(containsKey(infillDict, line._document_number){\n\t\t//\tframed = true;\n\t\t//}\n        //PRINT \"FRAMED\";\n\t\t//print framed;\n\t\tgetPrice = get(grabPartPrice, eachDocNum);\t//Added by Robert Faigao per case 182193\n\n\t\t//FOR ALL ACTUAL PART LINES CALCULATE DISCOUNTS, WEIGHT ETC... \n\t\tif(docNumType == part ){\n\t\t\tqty = get(qtyDict, eachDocNum);\n\t\t\t//listPrice = get(listPriceDict, eachDocNum);\n\t\t\tlockStandardDiscount = get(lockStandardDiscountDict, eachDocNum);\n\t\t\tdiscount = get(discountDict, eachDocNum);\n\t\t\tdiscountType = get(discountTypeDict, eachDocNum);\n\t\t\tcustomGroup = get(customGroupDict, eachDocNum);\n\t\t\tnetPrice = get(netPriceDict,eachDocNum);\n\t\t\tpartNumb = get(partNumDict,eachDocNum);\n\t\t\torigNetPrice = netPrice;\t//Added by Robert Faigao per case 182193\n\t\t\tparentLengthChanged = false; // Added by Siva for \n\t\t\tparentDocNum = \"\";\n\t\t\tframed = \"false\";\n\t\t\t\n\t\t\tcurrentDocHiddenSaleType = \"\";\n\t\t\tif(containskey(docsaleTypeDict, eachDocNum)){\n\t\t\t\tcurrentDocHiddenSaleType = get(docsaleTypeDict, eachDocNum);\n\t\t\t}\n\n\t\t\t//CPS change to costEa : Supplier Cost updates for Supplier Processed FALSE - if it's CPS line\n\t\t\t//CPS change to _price_quantity: When Lock and Quote is clicked, update _price_quantity for CPS lines\n\t\t\t/*if(currentDocHiddenSaleType == \"Custom\" and currentDocsupplierProcessed == \"false\" AND inputActionName == \"lockQuote\"){\n\t\t\t\tCostEa_Line_Script = get(UnitCostValue, eachDocNum);\n\t\t\t}*/\n\t\t\t\n\t\t\tif(containsKey(PartWeightDict,partNumb)){\n\t\t\t\tWeight=get(PartWeightDict,partNumb);\n\t\t\t}\n\t\t\tif(containsKey(PartSWDict,partNumb)){\n\t\t\t\tWidth=get(PartSWDict,partNumb);\n\t\t\t}\n\t\t\tif(containsKey(PartSLDict,partNumb)){\n\t\t\t\tLength=get(PartSLDict,partNumb);\n\t\t\t}\n\t\t\tif(containsKey(parentDocNumDict, eachDocNum)){\n\t\t\t\tparentDocNum = get(parentDocNumDict, eachDocNum);\n\t\t\t\t//Added an if statement per case 183338, if the quantity of an line items changed, change the net price for each line item as necessary\n\t\t\t\tif(containskey(qtyChangParentDict, parentDocNum)){\n\t\t\t\t\tgetPrice = get(qtyChangParentDict, parentDocNum);\n\t\t\t\t}\n\t\t\t\tif(containsKey(docNum_GroupNum_dict, parentDocNum)){\n\t\t\t\t\tDoc_GroupNumber = get(docNum_GroupNum_dict, parentDocNum);\n\t\t\t\t}\n\t\t\t\tif(containskey(changeParentParametersDict, parentDocNum)){\n\t\t\t\t\tparentLengthChanged = get(changeParentParametersDict, parentDocNum);\n\t\t\t\t}\n\t\t\t\tif(containskey(supplierProcessedDict, parentDocNum)){\n\t\t\t\t\tsupplierProcessed = get(supplierProcessedDict, parentDocNum);\n\t\t\t\t}\n\t\t\t\tif(containskey(fabDrawingDict, parentDocNum)){\n\t\t\t\t\tcustomFabDrawing = get(fabDrawingDict, parentDocNum);\n\t\t\t\t}\n\t\t\t\tif(containskey(cutListDict, parentDocNum)){\n\t\t\t\t\tcustomCutList = get(cutListDict, parentDocNum);\n\t\t\t\t\tprint \"CUSTOMCUTLIST\";\n\t\t\t\t\tprint customCutList;\n\t\t\t\t}\t\n\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif(currentDocHiddenSaleType == \"Stock\" OR currentDocHiddenSaleType == \"Process\"){\n\t\t\t\tif(containsKey(saleTypeCheckDict,parentDocNum)){\n\t\t\t\t\toldSaleType = get(saleTypeCheckDict,parentDocNum);\n\t\t\t\t\tif(oldSaleType <> currentDocHiddenSaleType){\n\t\t\t\t\t\tshowValidationOnSaleType = true;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tput(saleTypeCheckDict,parentDocNum,currentDocHiddenSaleType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(containsKey(processingTypeDict,parentDocNum)){\n\t\t\t\tcustomProcessingType = get(processingTypeDict,parentDocNum);\n\t\t\t}\n\t\t\tif(containsKey(modelSQFTDict,parentDocNum)){\n\t\t\t\tmodelSQFT = get(modelSQFTDict,parentDocNum);\n\t\t\t}\n\t\t\t\n\t\t\tcurrentDocsupplierProcessed = \"false\";\n\t\t\tif(containskey(supplierProcessedDict, parentDocNum)){\n\t\t\t\tcurrentDocsupplierProcessed = get(supplierProcessedDict, parentDocNum);\n\t\t\t}\n\t\t\t\n\t\t\tisExternalProcessExists = false;\n\t\t\tif(containskey(externalProcessingExists, parentDocNum)){\n\t\t\t\tisExternalProcessExists = get(externalProcessingExists, parentDocNum);\n\t\t\t}\n\t\t\ttmp = tmp + eachDocNum + \"~externalProcessExists_Line~\" + string(isExternalProcessExists) + \"|\";\n\n\t\t\tquantityCPS = get(cpsQtyDict, eachDocNum);\n\t\t\tif(inputActionName == \"lockQuote\" AND (currentDocHiddenSaleType == \"Custom\") AND currentDocsupplierProcessed == \"true\" AND containsKey(cutLineCountDict,parentDocNum) AND atoi(get(cutLineCountDict,parentDocNum)) == 1 AND quantityCPS <> qty){\n\t\t\t\tqty = quantityCPS;\n\t\t\t\tput(qtyDict, eachDocNum, quantityCPS);\n\t\t\t\ttmp = tmp + eachDocNum + \"~_price_quantity~\" + string(quantityCPS) + \"|\";\n\t\t\t}\t\n\t\t\t\n\t\t\tif(containsKey(itemTotalWeightDict, eachDocNum)){\n\t\t\t\tItemORModelTotalWeight = get(itemTotalWeightDict, eachDocNum);\t\n\t\t\t\tweightForDisplay  = integer(get(itemTotalWeightDict, eachDocNum));\n\t\t\t\ttotalWeightQuote = totalWeightQuote + ItemORModelTotalWeight;\n\t\t\t}\n\t\t\t\n\t\t\tcutLineWidth = 0.0;\n\t\t\tif(containskey(cutLineWidthDict,eachDocNum)){\n\t\t\t\tcutLineWidth = get(cutLineWidthDict,eachDocNum);\n\t\t\t}\n\t\t\tcutLineLength = 0.0;\n\t\t\tif(containskey(cutLineLengthDict,eachDocNum)){\n\t\t\t\tcutLineLength = get(cutLineLengthDict,eachDocNum);\n\t\t\t}\n\t\t\tif(findinArray(customParentDocArray,parentDocNum) <> -1 AND ((currentDocHiddenSaleType == \"Supplier Part\" AND supplierProcessed == \"true\" AND customCutList == \"false\") OR (currentDocHiddenSaleType == \"Cut Dimension\" AND supplierProcessed == \"false\"))){\n\t\t\t\tif(containsKey(cutLineWidthDict,parentDocNum) AND containsKey(cutLineLengthDict,parentDocNum)){\n\t\t\t\t\tput(cutLineWidthDict,parentDocNum,get(cutLineWidthDict,parentDocNum)+cutLineWidth);\n\t\t\t\t\tput(cutLineLengthDict,parentDocNum,get(cutLineLengthDict,parentDocNum)+cutLineLength);\n\t\t\t\t}else{\n\t\t\t\t\tput(cutLineWidthDict,parentDocNum,cutLineWidth);\n\t\t\t\t\tput(cutLineLengthDict,parentDocNum,cutLineLength);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Update Cost for Custom & Cut Lines while Lock & Unlock the quote. \n\t\t\tif(inputActionName == \"lockQuote\"){\n\t\t\t\tif((currentDocHiddenSaleType == \"Custom\" OR (cPSOrder_quote == false AND mTR_quote == true AND (currentDocHiddenSaleType == \"Process\" OR currentDocHiddenSaleType == \"Stock\"))) AND containskey(CustomTotalCostDict, parentDocNum)){\n\t\t\t\t\t//CostEa_Line_Script = round(get(CustomTotalCostDict, parentDocNum)/qty,2);\n\t\t\t\t\tCostEa_Line_Script = get(CustomTotalCostDict, parentDocNum)/qty;\n\t\t\t\t}elif(findinArray(cutLinesDocNum,eachDocNum) <> -1 AND containskey(CustomUnitCostDict, parentDocNum) AND containskey(CustomUOMDict,parentDocNum) AND /*supplierProcessed == \"true\" AND customCutList == \"false\" AND findinArray(cutLineTypeArray,currentDocSaleType) <> -1*/ currentDocSaleType == \"Supplier Part\"){\n\t\t\t\t\ttempModelTotalWeight = get(model_Weight_dict, parentDocNum);\n\t\t\t\t\tfactor = util.getNumberOfUnits(get(CustomUOMDict,parentDocNum), cutLineWidth, cutLineLength, tempModelTotalWeight, String(qty), modelSQFT);\n\t\t\t\t\tCostEa_Line_Script = get(CustomUnitCostDict, parentDocNum) * factor;\n\t\t\t\t}\n\t\t\t}elif((currentDocHiddenSaleType == \"Custom\" OR /*findinArray(cutLineTypeArray,currentDocSaleType) <> -1*/ currentDocSaleType == \"Supplier Part\") AND (inputActionName == \"unLockQuote\" OR _system_current_step_var == \"pending_process_bmClone_1\" OR _system_current_step_var == \"pending_process\" OR _system_current_step_var == \"start_step\")){\n\t\t\t\tCostEa_Line_Script = 0.0;\n\t\t\t}\n\t\t\t//Update Unit Cost for Custom Cut Lines \n\t\t\tif(containskey(eachCutLineDict,eachDocNum) AND containskey(modelCutDataDict,parentDocNum)){\n\t\t\t\ttempCutComment = get(eachCutLineDict,eachDocNum)+ \"$$UNIT_COST::\" + String(round(CostEa_Line_Script,2));\n\t\t\t\trowDel = \"$$\";\n\t\t\t\tif(findinArray(availableParentArray,parentDocNum) <> -1){\n\t\t\t\t\trowDel = \"##\";\n\t\t\t\t}\n\t\t\t\t//print \"modelCutDataDict\";\n\t\t\t\t//print modelCutDataDict;\n\t\t\t\tput(modelCutDataDict,parentDocNum,get(modelCutDataDict,parentDocNum)+ rowDel +tempCutComment);\n\t\t\t\tappend(availableParentArray,parentDocNum);\n\t\t\t}\n\t\t\t//==================DETERMINE THE VOLUME BASED PRICING FOR EACH ITEM FROM RECORDS RETRIEVED FROM DATA TABLE - START========================\n\t\t\tif(find(currentDocSaleType, \"Stock Only\") <> -1 OR find(currentDocSaleType, \"Accsy\") <> -1){\t //Volume based pricing need to be turned off for processed items as partial stock pricing is applied in configuration. Case #00112347.\n\t\t\t//if(find(currentDocSaleType, \"Stock Only\") <> -1 OR find(currentDocSaleType, \"Accsy\") <> -1 OR startswith(currentDocSaleType, \"Processed\"))\n\t\t\t\t\n\t\t\t\tcount = 0;\n\t\t\t\tpercentage = 0;\n\t\t\t\tpercentageMultiplier = 0.0;\n\t\t\t\tbracket = 0;\n\t\t\t\tbracketStr = \"\";\n\t\t\t\tpriceGpResultSet = bmql(\"SELECT Bracket, Percentage FROM BracketologyPriceGrp WHERE Group=$pricingGroup_quote\");\n\t\t\t\tfor each in priceGpResultSet{\n\t\t\t\t\tcount = 1;\n\t\t\t\t}\n\t\t\t\tif(count == 0){// If no data for that pricingGroup the \"Standard\" data is used\n\t\t\t\t\tpriceGpResultSet = bmql(\"SELECT Bracket, Percentage FROM BracketologyPriceGrp WHERE Group='List Price'\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor eachRecord in priceGpResultSet{\n\t\t\t\t\tpercentage = atoi(get(eachRecord,\"Percentage\"));\n\t\t\t\t\tif(isnumber(get(eachRecord,\"Bracket\"))){\n\t\t\t\t\t\tbracket = atoi(get(eachRecord,\"Bracket\"));\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbracketStr = get(eachRecord,\"Bracket\");\n\t\t\t\t\t}\t\t\n\t\t\t\t}\n\t\t\t\tpercentageMultiplier = 1-(percentage/100.0);\n\t\t\t\t\n\t\t\t\tfor each in listPriceRecSet{\n\t\t\t\t\titem = get(each,\"ITEM\");\n\t\t\t\t\tif(partNumb == item){\n\t\t\t\t\t\tqty1 = atoi(get(each,\"Qtybrk_1\"));\n\t\t\t\t\t\tqty2 = atoi(get(each,\"Qtybrk_2\"));\n\t\t\t\t\t\tqty3 = atoi(get(each,\"Qtybrk_3\"));\n\t\t\t\t\t\tqty4 = atoi(get(each,\"Qtybrk_4\"));\n\t\t\t\t\t\tqty5 = atoi(get(each,\"Qtybrk_5\"));\n\t\t\t\t\t\tqty6 = atoi(get(each,\"Qtybrk_6\"));\n\t\t\t\t\t\tqty7 = atoi(get(each,\"Qtybrk_7\"));\n\t\t\t\t\t\tqty8 = atoi(get(each,\"Qtybrk_8\"));\n\t\t\t\t\t\tqty9 = atoi(get(each,\"Qtybrk_9\"));\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\tPricebrkDict = dict(\"string\");\n\t\t\t\t\t\tplatinumBracket = 0;\n\t\t\t\t\t\tqtyBracketCount = 0;\n\t\t\t\t\t\tpriceBrkCount = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tPricebrk_1\t \t= get(each,\"Pricebrk_1\");\n\t\t\t\t\t\tPricebrk_2 \t\t= get(each,\"Pricebrk_2\");\n\t\t\t\t\t\tPricebrk_3 \t\t= get(each,\"Pricebrk_3\");\n\t\t\t\t\t\tPricebrk_4 \t\t= get(each,\"Pricebrk_4\");\n\t\t\t\t\t\tPricebrk_5 \t\t= get(each,\"Pricebrk_5\");\n\t\t\t\t\t\tPricebrk_6 \t\t= get(each,\"Pricebrk_6\");\n\t\t\t\t\t\tPricebrk_7 \t\t= get(each,\"Pricebrk_7\");\n\t\t\t\t\t\tPricebrk_8 \t\t= get(each,\"Pricebrk_8\");\n\t\t\t\t\t\tPricebrk_9 \t\t= get(each,\"Pricebrk_9\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tput(PricebrkDict, \"Pricebrk_1\", Pricebrk_1);\n\t\t\t\t\t\tput(PricebrkDict, \"Pricebrk_2\", Pricebrk_2);\n\t\t\t\t\t\tput(PricebrkDict, \"Pricebrk_3\", Pricebrk_3);\n\t\t\t\t\t\tput(PricebrkDict, \"Pricebrk_4\", Pricebrk_4);\n\t\t\t\t\t\tput(PricebrkDict, \"Pricebrk_5\", Pricebrk_5);\n\t\t\t\t\t\tput(PricebrkDict, \"Pricebrk_6\", Pricebrk_6);\n\t\t\t\t\t\tput(PricebrkDict, \"Pricebrk_7\", Pricebrk_7);\n\t\t\t\t\t\tput(PricebrkDict, \"Pricebrk_8\", Pricebrk_8);\n\t\t\t\t\t\tput(PricebrkDict, \"Pricebrk_9\", Pricebrk_9);\n\t\t\t\t\t\t\n\t\t\t\t\t\tprice = 0.0;\n\t\t\t\n\t\t\t\t\t\t//To find platinum bucket\n\t\t\t\t\t\tif(qty1 == 999999){\n\t\t\t\t\t\t\tplatinumBracket = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(qty2 == 999999){\n\t\t\t\t\t\t\tplatinumBracket = 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(qty3 == 999999){\n\t\t\t\t\t\t\tplatinumBracket = 3;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\tif(qty4 == 999999){\n\t\t\t\t\t\t\tplatinumBracket = 4;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\tif(qty5 == 999999){\n\t\t\t\t\t\t\tplatinumBracket = 5;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\tif(qty6 == 999999){\n\t\t\t\t\t\t\tplatinumBracket = 6;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\tif(qty7 == 999999){\n\t\t\t\t\t\t\tplatinumBracket = 7;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\tif(qty8 == 999999){\n\t\t\t\t\t\t\tplatinumBracket = 8;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(qty9 == 999999){\n\t\t\t\t\t\t\tplatinumBracket = 9;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbrkStart = 0;\n\t\t\t\t\t\tif(qty <= qty1){\n\t\t\t\t\t\t\tbrkStart = 1;\t\n\t\t\t\t\t\t}elif(qty <= qty2){\n\t\t\t\t\t\t\tbrkStart = 2;\t\t\t\n\t\t\t\t\t\t}elif(qty <= qty3){\n\t\t\t\t\t\t\tbrkStart = 3;\t\t\t\t\n\t\t\t\t\t\t}elif(qty <= qty4){\n\t\t\t\t\t\t\tbrkStart = 4;\t\t\t\t\n\t\t\t\t\t\t}elif(qty <= qty5){\n\t\t\t\t\t\t\tbrkStart = 5;\t\t\t\t\n\t\t\t\t\t\t}elif(qty <= qty6){\n\t\t\t\t\t\t\tbrkStart = 6;\t\t\t\t\n\t\t\t\t\t\t}elif(qty <= qty7){\n\t\t\t\t\t\t\tbrkStart = 7;\t\t\t\t\n\t\t\t\t\t\t}elif(qty <= qty8){\n\t\t\t\t\t\t\tbrkStart = 8;\t\t\t\t\n\t\t\t\t\t\t}elif(qty <= qty9){\n\t\t\t\t\t\t\tbrkStart = 9;\t\t\t\t\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//To get the correct price break based on bracket logic\n\t\t\t\t\t\tif(find(bracketStr,\"Max\") <> -1){//****** Platinum group: Max (maximum) refers to the top qty break values.\n\t\t\t\t\t\t\tbracketArr = split(bracketStr,\"-\");\n\t\t\t\t\t\t\tbracketCount = 0;\n\t\t\t\t\t\t\tif(isnumber(trim(bracketArr[1]))){\n\t\t\t\t\t\t\t\tbracketCount = atoi(trim(bracketArr[1]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbrkStart = platinumBracket - bracketCount;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tbrkStart = brkStart + bracket;\n\t\t\t\t\t\t}\t\n\n\t\t\t\t\t\tPricebrk_val = \"0\";\n\t\t\t\t\t\tloopArray = range(brkStart);\n\n\t\t\t\t\t\tfor eachPrcieBrk in loopArray{\n\t\t\t\t\t\t\tkey = \"Pricebrk_\"+string(brkStart);\n\t\t\t\t\t\t\tif(containsKey(PricebrkDict, key)){\n\t\t\t\t\t\t\t\tPricebrk_val = get(PricebrkDict, key);\n\t\t\t\t\t\t\t\tif(atof(Pricebrk_val) <> 0){\n\t\t\t\t\t\t\t\t\tPricebrk_val = string(round(atof(get(PricebrkDict, key)) * percentageMultiplier,2));\n\t\t\t\t\t\t\t\t\t//To get two decimal places for the price \n\t\t\t\t\t\t\t\t\ttempArray = split(Pricebrk_val,\".\");\n\t\t\t\t\t\t\t\t\tif(sizeofarray(tempArray) > 1){\n\t\t\t\t\t\t\t\t\t\tif(len(tempArray[1]) < 2){\n\t\t\t\t\t\t\t\t\t\t\tPricebrk_val = Pricebrk_val + \"0\";\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tbrkStart = brkStart-1;\n\t\t\t\t\t\t\t\t}\t\t\t\t\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tbrkStart = brkStart-1;\n\t\t\t\t\t\t\t}\t\t\t\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\tput(listPriceDict,eachDocNum,atof(Pricebrk_val));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//==================DETERMINE THE VOLUME BASED PRICING FOR EACH ITEM FROM RECORDS RETRIEVED FROM DATA TABLE - END========================\n\t\t\tlistPrice = get(listPriceDict, eachDocNum);\n\t\t\t\n\t\t\ttempDisc = 0.0;\n\t\t\ttempListPrice = 0.0;\n\t\t\t//Checking for approval\n\t\t\t\n\t\t\t//==========DETERMINE APPROVAL FLAG IF LINE HAS MORE THAN 5 PERCENT DISCOUNT===============\n\t\t\tif((find(userGroup, \"css\") <> -1)){\n\t\t\t\ttempDisc = listPrice *(5.0 / hundredPercent);\n\t\t\t\ttempListPrice = listPrice - tempDisc;\n\t\t\t\tif(netPrice < tempListPrice ){\n\t\t\t\t\tapprovalFlag = true;\n\t\t\t\t}\n\t\t\t}\t\n\t\t\t//=========================================================================================\t\t\n\t\t\t\n\t\t\t//======CALCULATE EXTENDED LIST PRICE, DISCOUNT TYPE, DISCOUNT, NET PRICE, EXTENDED NET PRICE, MARGIN ETC.. FOR THE LINE - START===================================\n\t\t\t// Get the discount from custom group \n\t\t\tif(customGroup <> \"\" ){\n\t\t\t\tcustomGroupDiscount = get(customGroupDiscountDict, customGroup);\n\t\t\t} \n\n\t\t\tif(customGroupDiscount > 0 ){\n\t\t\t\tdiscount = customGroupDiscount;\n\t\t\t\tdiscountType = \"%\";\n\t\t\t}\n\t\t\t\n\t\t\tdiscount2Type = \" \" + documentCurrencyPref; \n\t\t\tif (discountType == \"Amt\"){\n\t\t\t\tdiscount2Type = \" %\";\n\t\t\t}\n\t\t\t\n\t\t\tfamily = get(familyDict, eachDocNum);\n\t\t\t\n\t\t\t// Get the max discount from the parts information \n\t\t\tmaxDiscountPercent = get(maxDiscountDict, eachDocNum);\n\t\t\t\n\t\t\t// Ext. Cost \n\t\t\textendedCost = CostEa_Line_Script * qty;\n\t\t\t/*if(findinArray(cutLineTypeArray,currentDocSaleType) == -1){*/\n\t\t\tif(currentDocSaleType <> \"Supplier Part\"){\n\t\t\t\ttotalCost = totalCost + extendedCost;\n\t\t\t\t//print \"totalCost1\";\n\t\t\t\t//print totalCost;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate Extended list\n\t\t\textendedList = qty * listPrice;\n\t\t\ttotalListPrice = totalListPrice + extendedList;\n\t\t\t// put(netPriceDict,eachDocNum,extendedList);\n\t\t\t\n\t\t\t// field4: Maintenance Percent : used to calculate maintenance fee for the whole quote \n\t\t\tmaintenancePercent = get(maintenancePercentDict, eachDocNum);\n\t\t\tput(maintenancePercentDict, eachDocNum, maintenancePercent);\n\n\t\t\tmaintenanceSubtotalLine = extendedList * maintenancePercent / hundredPercent;\n\t\t\tmaintenanceSubtotalLine = round(maintenanceSubtotalLine, numDecimal);\n\t\t\t\n\t\t\tmaintenanceSubtotalQuote = maintenanceSubtotalQuote + maintenanceSubtotalLine;\n\t\t\t\n\t\t\t// Revert to list price on reconfigure\n\t\t\t\n\t\t\t// Set Net Price Ea on qty change\n\t\t\tif(containskey(qtyChangDict,eachDocNum)){\t\t\t\n\t\t\t\tif(get(qtyChangDict,eachDocNum)){\n\t\t\t\t\tnetPrice = listPrice;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Set Net Price EA to list Price, if list price got changed in re-configuration - Case #00125529\n\t\t\tif(containsKey(currentListPriceDict,eachDocNum)){\t\t\t\n\t\t\t\tif(get(currentListPriceDict,eachDocNum) <> round(listPrice,2)){\n\t\t\t\t\tnetPrice = listPrice;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Set Net Price EA to list Price, if list price got changed in re-configuration - Case: Bracketology\n\t\t\tif(inputActionName == \"reconfigure\" AND qtyChanged == true){\n\t\t\t\tnetPrice = listPrice;\n\t\t\t\t//qtyChanged = true;\n\t\t\t}\n\n\t\t\tif (find(qtyChangedDocs,\"~\"+ eachDocNum + \"~\") <> -1) {  qtyChanged = true;\t}\n\t\t\t\n\t\t\t//For shipdrop changes on reconfigure -Ticket 3687 --START\n\t\t\t/*if(inputActionName == \"reconfigure\"){\n       \t\t\tnetPrice = listPrice;\n\t\t\t}*/\n\t\t\t//For shipdrop changes on reconfigure -Ticket 3687 --END\n\t\t\t\n\t\t\tif(inputActionName <> \"default\"){\n\t\t\t\tif(listPrice <> 0.0 AND netPrice <> 0.0){\t//Added check for 0 net price to avoid 100% discount. SR 3-10956574031\n\t\t\t\t\tdiscountPercent = ((listPrice - netPrice) * 100)/(listPrice);\n\t\t\t\t}else{\n\t\t\t\t\tdiscountPercent = discount;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(netPrice == 0){\n\t\t\t\t\t netPrice = listPrice;\n\t\t\t\t}\t \n\t\t\t}\n\t\t\t\t\n\t\t\t//discount = round(discount, numDecimal);\n\t\t\t//discountPercent = round(discountPercent, numDecimal);\n\t\t\t\n\t\t\t// Calculate the Discount2 & Ext Discount values.\tIf user selects / enters \"%\" it should calculate $, if user enters amt, it will calculate %\n\t\t\t/*\n\t\t\tif (discountType == \"%\"){\n\t\t\t\tdiscount2 = listPrice * (discountPercent / hundredPercent);\n\t\t\t\tdiscountAmt = discount2; \n\t\t\t\t//discountPercent = discount;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif\t(listPrice <> 0){\n\t\t\t\t\tdiscount2 = (discount / listPrice) * hundredPercent;\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t\t\n\t\t\t/*\n\t\t\tAdded by Robert Faigao per case 182193\n\t\t\tFirst determines if the net price needs to be updated. This only happens when the Qty is changed.\n\t\t\tTo determine this, it checks the original net price, and the currently calculated net price.\n\t\t\tIf they are the same, then we use the original net price, otherwise we update it.\n\t\t\t*/\n\t\t\t\n\t\t\tif(containskey(qtyChangDict, eachDocNum) AND not(getPrice)){\n\t\t\t\tif(get(qtyChangDict, eachDocNum)){\n\t\t\t\t\tgetPrice = true;\n\t\t\t\t}else{\n\t\t\t\tgetPrice = false;\n\t\t\t\t}\n\t\t\t} \n\t\t\tif(getPrice){\n\t\t\t\tnetPriceEach = netPrice;\n\t\t\t\tgetPrice = false;\n\t\t\t}else{\n\t\t\t\tnetPriceEach = origNetPrice;\n\t\t\t}\n\t\t\t\n\t\t\t//If extNetPrice is changed calculate netPriceEach based off of that change\n\t\t\tif((get(extNetPriceDict, eachDocNum) OR get(extNetPriceChangedDict,eachDocNum)) AND (inputActionName <> \"default\")){\n\t\t\t\tnetPriceEach = get(extNetPriceValue, eachDocNum)/qty;\n\t\t\t}\n\t\t\t\n\t\t\tprodType = get(lineCustomField8, eachDocNum);\n\t\t\t\n\t\t\t//On reconfigure, reset netPrice Each\n\t\t\t if(prodType == \"Accessories\" AND qtyChanged){\n\t\t\t\t\tnetPriceEach = origNetPrice;\n\t\t\t}\n\t\t\t\n\t\t\tif(inputActionName == \"reconfigure\"){\n\t\t\t\tif(origNetPrice == listPrice OR qtyChanged OR parentLengthChanged OR containsKey(shipDropChangeDict,parentDocNum) OR (containsKey(currentListPriceDict,eachDocNum) AND get(currentListPriceDict,eachDocNum) <> round(listPrice,2))){\n\t\t\t\t\tnetPriceEach = listPrice;//original\n\t\t\t\t}else{\n\t\t\t\t\tnetPriceEach = origNetPrice;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Update Freight cost for External processing items.\n\t\t\tif(containsKey(customFreightDataDict,parentDocNum+partNumb+\"listPrice\")){\n\t\t\t\tePInboundFreight = 0.0;\n\t\t\t\tif(isNumber(get(customFreightDataDict,parentDocNum+partNumb+\"freightIn\"))){\n\t\t\t\t\tePInboundFreight = atof(get(customFreightDataDict,parentDocNum+partNumb+\"freightIn\"));\n\t\t\t\t}\n\t\t\t\tePOutboundFreight = 0.0;\n\t\t\t\tif(isNumber(get(customFreightDataDict,parentDocNum+partNumb+\"freightOut\"))){\n\t\t\t\t\tePOutboundFreight = atof(get(customFreightDataDict,parentDocNum+partNumb+\"freightOut\"));\n\t\t\t\t}\n\t\t\t\tlistPrice = 0.0;\n\t\t\t\tif(isNumber(get(customFreightDataDict,parentDocNum+partNumb+\"listPrice\"))){\n\t\t\t\t\tlistPrice = atof(get(customFreightDataDict,parentDocNum+partNumb+\"listPrice\"));\n\t\t\t\t}\n\t\t\t\tnetPriceEach = listPrice;\n\t\t\t\tlineRes = lineRes + eachDocNum + \"~EPInboundFreight_line~\" + string(ePInboundFreight) + \"|\"\n\t\t\t\t+ eachDocNum + \"~EPOutboundFreight_line~\" + string(round(ePOutboundFreight, 2)) + \"|\"\n\t\t\t\t+ eachDocNum + \"~freight_line~\" + string(ePInboundFreight + ePOutboundFreight) + \"|\";\n\t\t\t}\n\t\t\t\n\t\t\t//When Lock and Quote is clicked, update line item prices for CPS lines\n\t\t\tif((currentDocHiddenSaleType == \"Custom\")){\n\t\t\t\tif(inputActionName == \"lockQuote\" AND containskey(CustomTotalCostDict, parentDocNum)){\n\t\t\t\t\tlistPrice = round(round(get(CustomTotalCostDict, parentDocNum)/qty,2) / (1 - (gP_quote/100)),2);\n\t\t\t\t\tnetPriceEach = listPrice;\n\t\t\t\t}elif(inputActionName == \"unLockQuote\" OR _system_current_step_var == \"pending_process_bmClone_1\" OR _system_current_step_var == \"pending_process\" OR _system_current_step_var == \"start_step\"){\n\t\t\t\t\tlistPrice = 0.0;\n\t\t\t\t\tnetPriceEach = 0.0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Only calculate price for non-stock line items after \"Lock and Quote\": use '0's before that.\n\t\t\t//if(inputActionName <> \"lockQuote\" AND find(currentDocSaleType, \"Non-Stock Process\") <> -1)\n\t\t\t/*if(locknQuoteCheck == false AND find(currentDocSaleType, \"Non-Stock Process\") <> -1){ \n\t\t\t\tnetPriceEach = 0.0;\n\t\t\t}*/\n\t\t\t/*if((_system_current_step_var == \"pending_process\" OR _system_current_step_var == \"start_step\") AND find(currentDocSaleType, \"Non-Stock Process\") <> -1 AND inputActionName <> \"lockQuote\"){\n\t\t\t\tnetPriceEach = 0.0;\n\t\t\t}*/\n\t\t\t\n\t\t\textendedNet = netPriceEach * qty;\n\t\t\ttotalNetPrice = totalNetPrice + extendedNet; \n\t\t\t\n\t\t\tif(currentDocHiddenSaleType == \"Labor\"){\n\t\t\t\ttotalLaborPrice = totalLaborPrice + extendedNet;\n\t\t\t}elif(currentDocHiddenSaleType == \"External\"){\n\t\t\t\ttotalExternalProcessPrice = totalExternalProcessPrice + extendedNet;\n\t\t\t}\n\t\t\t\n\t\t\t//McNichols Sales users always enter the discount as a dollar amount - Case 00106214\n\t\t\t//Edited the discount calculation per case 00182193\n\t\t\tif(containskey(qtyChangDict,eachDocNum)){\n\t\t\t\tif(get(qtyChangDict,eachDocNum)){\n\t\t\t\t\tdiscountAmt = 0;\n\t\t\t\t}else{\t\t\t\t\n\t\t\t\t\tdiscountAmt = listPrice - netPriceEach;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tdiscount2 = discountPercent;\n\t\t\textendedDiscount = discountAmt * qty;\n\t\t\textendedDiscount = round(extendedDiscount, numDecimal);\n\t\t\tdiscountPercent = round(discountPercent, numDecimal);\n\t\t\tput(discountPercentDict, eachDocNum, discountPercent);\n\t\t\t\n\t\t\ttotalLineItemDiscounts = totalLineItemDiscounts + extendedDiscount;\n\t\t\t\n\t\t\t\n\t\t\t// Calculate Margins\n\t\t\tnetMarginAmtEach = netPriceEach - CostEa_Line_Script;\n\t\t\tnetMarginAmt = netMarginAmtEach * qty;\n\t\t\tnetMarginAmt = round(netMarginAmt, numDecimal);\n\t\t\t\n\t\t\t/*[changed by anguemnang the 13.06.2012 Reason: case 00098238*/\n\t\t\t/* Original script --> */\n\t\t\t// if\t(netPriceEach == 0){ netMarginPercent = ( (netPriceEach - costEa) / netPriceEach) * hundredPercent;\n\t\t\t// netMarginPercent = round(netMarginPercent, numDecimal);}\n\t\t\t//print \"netPriceEach1\";\n\t\t\t//print netPriceEach;\n\t\t\t//print \"CostEa_Line_Script\";\n\t\t\t//print CostEa_Line_Script;\n\t\t\t//print \"netMarginAmtEach\";\n\t\t\t//print netMarginAmtEach;\n\t\t\t//print \"qty\";\n\t\t\t//print qty;\n\t\t\tif\t((netPriceEach == 0 and CostEa_Line_Script > 0) or netPriceEach < CostEa_Line_Script){netMarginPercent = 0.0;}\n\t\t\telif(netPriceEach == 0 and CostEa_Line_Script <= 0){netMarginPercent = hundredPercent;}\n\t\t\telse{\n\t\t\t\tnetMarginPercent = (1 - ( CostEa_Line_Script / netPriceEach)) * hundredPercent;\n\t\t\t\tnetMarginPercent = round(netMarginPercent, numDecimal);\t\n\t\t\t}\n\t\t\t//Only calculate price for non-stock line items after \"Lock and Quote\": use '0's before that.\n\t\t\t/*if(inputActionName <> \"lockQuote\" AND find(currentDocSaleType, \"Non-Stock Process\") <> -1){\n\t\t\t\tnetMarginPercent = 0.0;\n\t\t\t}*/\n\t\t\t// print netMarginPercent;\n\t\t\t/* End of anguemnang modifications] */\n\t\t\t//======CALCULATE EXTENDED LIST PRICE, DISCOUNT TYPE, DISCOUNT, NET PRICE, EXTENDED NET PRICE , MARGIN ETC... FOR THE LINE - END===================================\n\t\t\t//======CALCATE TOTAL PRICE OF EACH CUSTOM GROUP=================================\n\t\t\tif(customGroup <> \"\" ){\n\t\t\t\tcustomGroupSubtotal = get(customGroupSubtotalDict, customGroup);\n\t\t\t\tcustomGroupSubtotal = customGroupSubtotal + extendedNet;\n\t\t\t\tput(customGroupSubtotalDict, customGroup, customGroupSubtotal);\n\t\t\t} \n\t\t\telse {\n\t\t\t\tungroupSubtotal = ungroupSubtotal + extendedNet;\n\t\t\t}\n\t\t\t//===============================================================================\n\t\t\t\n\t\t\t//=============CALCULATE TOTAL PRICE FOR EVERY INVENTORY TYPE EXIST ON THE QUOTE================\n\t\t\tinventoryPartParentDoc = \"\";\n\t\t\tif(containsKey(parentDocNumDict, eachDocNum)){\n\t\t\t\tinventoryPartParentDoc = get(parentDocNumDict, eachDocNum);\n\t\t\t\tprint \"INVENTORY PARENT_PART\";\n\t\t\t\tprint inventoryPartParentDoc;\n\t\t\t\tprint \"PARENTDOCNUMDICT\";\n\t\t\t\tprint parentDocNumDict;\n\t\t\t\tprint \"EACHDOCNUM\";\n\t\t\t\tprint eachDocNum;\n\t\t\t}\n\t\t\tinventoryType = \"\";\n\t\t\tinternalProcessPrice = 0.0;\n\t\t\tcustomProcessPrice = 0.0;\t\t\t\n\t\t\tif(containskey(customField26Dict,eachDocNum)){\n\t\t\t\tinventoryType = get(customField26Dict,eachDocNum);\n\t\t\t}\t\t\n\t\t\tif(inventoryType == \"Sample\" OR inventoryType == \"Custom\" or inventoryType == \"Workflow\") {\n\t\t\t\tmodelLOTParts = modelLOTParts + \"~\" + inventoryPartParentDoc + \"-\" + eachDocNum + \"~\";\n\t\t\t\tinternalProcessPrice = internalProcessPrice + extendedNet;\n\t\t\t\tcustomProcessPrice = customProcessPrice + extendedNet;\n\t\t\t}\n\t\t\thasSpecialOrderPart = \"\";\n\t\t\tif(inventoryType == \"Special Order\" OR inventoryType == \"Custom\") {\n\t\t\t\thasSpecialOrderPart = \"true\";\n\t\t\t\tput(inventoryType_Dict,hasSpecialOrderPart,\"true\");\n\t\t\t}\t\t\n\t\t\t//=================================================================================================\n\t\t\t\n\t\t\t//================CALCULATE TOTALS FOR EVERY TYPE OF PROCESSING EXIST ON THE QUOTE======================\n\t\t\tif (currentDocSaleType == \"Custom Product\") {\t\t\t\t\n\t\t\t\tif(find(modelLOTParts, \"~\" + inventoryPartParentDoc + \"-\" + eachDocNum + \"~\") == -1) {\t\t\t\t\t\n\t\t\t\t\tcustomProcessPrice = customProcessPrice + extendedNet;\n\t\t\t\t//PRINT \"CUSTOM PROCESSPRICE\";\n\t\t\t\t\t//print customProcessPrice;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\telif (currentDocSaleType == \"Internal Processing\" OR currentDocSaleType == \"Processed Closest to Customer\" OR currentDocSaleType == \"Processed Optimal\" OR currentDocSaleType == \"Processed Specific Branch\" OR currentDocSaleType == \"Processed Best Available\" or currentDocSaleType == \"External Processing\" or  currentDocSaleType == \"Processed Stock\" or currentDocSaleType == \"Accsy\") {\t//hasInternalProcessing_line includes external processing as well\n\t\t\t\tif(find(modelLOTParts, \"~\" + inventoryPartParentDoc + \"-\" + eachDocNum + \"~\") == -1) {\t\t\t\t\n\t\t\t\t\tinternalProcessPrice = internalProcessPrice + extendedNet;\n\t\t\t\t\tPRINT \"INTERNALPROCESSPRICE\";\n\t\t\t\t\tprint internalProcessPrice;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\tif(inventoryPartParentDoc <> \"\"){\t\t\n\t\t\t\t// customProcessingModels\n\t\t\t\tif(find(customProcessingModels, \"~\" + inventoryPartParentDoc + \"~\") <> -1) {\t\t\t\t\n\t\t\t\t\tif(containskey(modelLOTCustomPriceDict, inventoryPartParentDoc)) {\n\t\t\t\t\t\ttmpLOTPrice = get(modelLOTCustomPriceDict, inventoryPartParentDoc);\n\t\t\t\t\t\tput(modelLOTCustomPriceDict, inventoryPartParentDoc, tmpLOTPrice + customProcessPrice);\t\n\t\t\t\t\t\tprint \"tmpLOTPrice Loop 1\";\n\t\t\t\t\t\tprint tmpLOTPrice;\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tput(modelLOTCustomPriceDict, inventoryPartParentDoc, customProcessPrice);\t\n\t\t\t\t\t}\t\n\t\t\t\t}\t\t\n\t\t\t\t//internalProcessingModels\t\n\t\t\t\telif(find(internalProcessingModels, \"~\" + inventoryPartParentDoc + \"~\") <> -1) {\n\t\t\t\t\tif(containskey(modelLOTPriceDict, inventoryPartParentDoc)) {\n\t\t\t\t\t\ttmpLOTPrice = get(modelLOTPriceDict, inventoryPartParentDoc);\n\t\t\t\t\t\tput(modelLOTPriceDict, inventoryPartParentDoc, tmpLOTPrice + internalProcessPrice);\n\t\t\t\t\t\tprint \"tmpLOTPrice Loop 2\";\n\t\t\t\t\t\tprint tmpLOTPrice;\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tput(modelLOTPriceDict, inventoryPartParentDoc, internalProcessPrice);\t\n\t\t\t\t\t}\t\n\t\t\t\t}\t\t\t\n\t\t\t}\t\t\n\t\t\t//=======================================================================================================================\n\n\t\t/*\n\t\t** Model Level items - Calculation\n\t\t*/\n\t\t}else {\t\t\n\t\t\tqty = get(qtyDict, eachDocNum);\n\t\t\tlistPrice = get(modelListPriceDict, eachDocNum);\n\t\t\tlockStandardDiscount = get(lockStandardDiscountDict, eachDocNum);\n\t\t\tdiscount = get(discountDict, eachDocNum);\n\t\t\tdiscountType = get(discountTypeDict, eachDocNum);\n\t\t\tcustomGroup = get(customGroupDict, eachDocNum);\n\t\t\t//==============CALCULATING DISCOUNT,LIST PRICE, EXTENDED LIST PRICE, NET PRICE, EXTENDED NET PRICE FOR ALL MODELS - START===========\n\t\t\t// Get the discount from custom group \n\t\t\t\n\t\t\t//Set supplierProcessed for models too - RFQ output of opsinstructions require this...\n\t\t\tif(containskey(supplierProcessedDict, eachDocNum)){\n\t\t\t\tsupplierProcessed = get(supplierProcessedDict, eachDocNum);\n\t\t\t}\n\t\t\t\n\t\t\tif(customGroup <> \"\" ){\n\t\t\t\tcustomGroupDiscount = get(customGroupDiscountDict, customGroup);\n\t\t\t} \n\n\t\t\tif(customGroupDiscount > 0 ){\n\t\t\t\tdiscount = customGroupDiscount;\n\t\t\t\tdiscountType = \"%\";\n\t\t\t}\n\t\t\t\n\t\t\tdiscount2Type = \" \" + documentCurrencyPref; \n\t\t\tif (discountType == \"Amt\"){\n\t\t\t\tdiscount2Type = \" %\";\n\t\t\t}\n\t\t\t\n\t\t\tif(containsKey(docNum_GroupNum_dict, eachDocNum)){\n\t\t\t\tDoc_GroupNumber = get(docNum_GroupNum_dict, eachDocNum);\n\t\t\t}\n\n\t\t\t\n\t\t\t// clear family for parts\n\t\t\tfamily = \"\";\n\t\t\t\n\t\t\t// Set Max Discount\n\t\t\tmaxDiscountPercent = 100.0;\n\t\t\t\n\t\t\t// Model costEa is equal to listPrice\n\t\t\tcostEa = listPrice;\n\t\t\t\n\t\t\t// Ext. Cost \n\t\t\textendedCost = CostEa_Line_Script * qty;\n\t\t\ttotalCost = totalCost + extendedCost;\n\t\t\t\n\t\t\t// Calculate Extended list\n\t\t\textendedList = qty * listPrice;\n\t\t\ttotalListPrice = totalListPrice + extendedList;\n\t\t\t\n\t\t\t\n\t\t\ttempDisc = 0.0;\n\t\t\ttempListPrice = 0.0;\n\t\t\tif((find(userGroup, \"css\") <> -1 ) AND (find(userGroup, \"manager\") <> -1)){\n\t\t\t\ttempDisc = listPrice *(5/100);\n\t\t\t\ttempListPrice = listPrice - tempDisc;\n\t\t\t\tnetPrice = get(netPriceDict,eachDocNum);\n\t\t\t\tif(netPrice < tempListPrice ){\n\t\t\t\t\tput(netPriceDict,eachDocNum,tempListPrice);\n\t\t\t\t}else{\n\t\t\t\t\tput(netPriceDict,eachDocNum,netPrice);\n\t\t\t\t}\n\t\t\t\tdiscountAmt = tempDisc;\n\t\t\t}\t\n\t\t\t// Calculate the Discount values.\tDetermine if the values are overriden or if the value should be looked up in a table\n\t\t\tif (not( lockStandardDiscount ) ){\n\t\t\t\tdiscount = 0.0; // replace 0.0 with a look up from a std discount table if it is a requirement\n\t\t\t} \n\n\t\t\t// Calculate the Discount2 & Ext Discount values.\tIf user selects / enters \"%\" it should calculate $, if user enters amt, it will calculate %\n\t\t\tif (discountType == \"%\"){\n\t\t\t\tdiscount2 = listPrice * (5 / 100);\n\t\t\t\tdiscountAmt = discount2; \n\t\t\t\tdiscountPercent = 5;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(listPrice <> 0){\n\t\t\t\t\tdiscount2 = (5 / listPrice) * hundredPercent;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*discountAmt = discount; \n\t\t\tdiscountPercent = discount2; */\n\t\t\t\n\t\t\tdiscount2 = round(discount2, numDecimal);\n\t\t\t//discountAmt = round(discountAmt, numDecimal);\n\t\t\tdiscount = round(discount, numDecimal);\n\t\t\tdiscountPercent = round(discountPercent, numDecimal);\n\n\t\t\t// Ext. Discount Amount \n\t\t\textendedDiscount = discountAmt * qty;\n\t\t\textendedDiscount = round(extendedDiscount, numDecimal);\n\t\t\tput(discountPercentDict, eachDocNum, discountPercent);\n\t\t\t\n\t\t\ttotalLineItemDiscounts = totalLineItemDiscounts + extendedDiscount;\n\n\t\t\t//\tCalculate Net Price\t// \n\n\t\t\tnetPriceEach = listPrice - discountAmt;\n\n\t\t\t//If extNetPrice is changed calculate netPriceEach based off of that change\n\t\t\tif((get(extNetPriceDict, eachDocNum) OR get(extNetPriceChangedDict,eachDocNum)) AND (inputActionName <> \"default\")){\n\t\t\t\tnetPriceEach = get(extNetPriceValue, eachDocNum)/qty;\n\t\t\t}\n\t\t\t\n\t\t\t// Revert to list price on reconfigure\n\t\t\tif(inputActionName == \"reconfigure\"){\n\t\t\t\tnetPriceEach = listPrice;\n\t\t\t}\n\t\t\t\n\t\t\textendedNet = netPriceEach * qty;\n\n\t\t\ttotalNetPrice = totalNetPrice + extendedNet;\n\t\t\t//print totalNetPrice;\n\t\t\t// Calculate Margins\n\t\t\tnetMarginAmtEach = netPriceEach - CostEa_Line_Script;\n\t\t\tnetMarginAmt = netMarginAmtEach * qty;\n\t\t\tnetMarginAmt = round(netMarginAmt, numDecimal);\n\t\t\t\n\t\t\t/*[changed by anguemnang the 13.06.2012 Reason: case 00098238*/\n\t\t\t/* Original script --> */\n\t\t\t// if\t(netPriceEach == 0){ netMarginPercent = ( (netPriceEach - costEa) / netPriceEach) * hundredPercent;\n\t\t\t// netMarginPercent = round(netMarginPercent, numDecimal);}\n\t\t\tif\t((netPriceEach == 0 and CostEa_Line_Script > 0) or netPriceEach < CostEa_Line_Script){netMarginPercent = 0.0;}\n\t\t\telif(netPriceEach == 0 and CostEa_Line_Script <= 0){netMarginPercent = hundredPercent;}\n\t\t\telse{\n\t\t\t\tnetMarginPercent = (1 - ( CostEa_Line_Script / netPriceEach)) * hundredPercent;\n\t\t\t\tnetMarginPercent = round(netMarginPercent, numDecimal);\t\n\t\t\t}\n\t\t\t//print netMarginPercent;\n\t\t\t/* End of anguemnang modifications] */\n\n\t\t\tif(customGroup <> \"\" ){\n\t\t\t\tcustomGroupSubtotal = get(customGroupSubtotalDict, customGroup);\n\t\t\t\tcustomGroupSubtotal = customGroupSubtotal + extendedNet;\n\t\t\t\tput(customGroupSubtotalDict, customGroup, customGroupSubtotal);\n\t\t\t} \n\t\t\telse {\n\t\t\t\tungroupSubtotal = ungroupSubtotal + extendedNet;\n\t\t\t} \n\t\t\tcustomGroupFreight = freight_quote;\n\t\t\tif(Doc_GroupNumber == \"1\") {\n\t\t\t\tif(customGroupFreightTotal <> 0) {\tcustomGroupFreight = freightGroup1_quote;\t }\n\t\t\t}\n\t\t\telif(Doc_GroupNumber == \"2\") {\n\t\t\t\tif(customGroupFreightTotal <> 0) {\tcustomGroupFreight = freightGroup2_quote;\t }\n\t\t\t}\t\n\t\t\telif(Doc_GroupNumber == \"3\") {\n\t\t\t\tif(customGroupFreightTotal <> 0) {\tcustomGroupFreight = freightGroup3_quote;\t }\n\t\t\t}\t\n\t\t\telif(Doc_GroupNumber == \"4\") {\n\t\t\t\tif(customGroupFreightTotal <> 0) {\tcustomGroupFreight = freightGroup4_quote;\t }\n\t\t\t}\t\n\t\t\telif(Doc_GroupNumber == \"5\") {\n\t\t\t\tif(customGroupFreightTotal <> 0) {\tcustomGroupFreight = freightGroup5_quote;\t }\n\t\t\t}\t\n\t\t\telif(Doc_GroupNumber == \"6\") {\n\t\t\t\tif(customGroupFreightTotal <> 0) {\tcustomGroupFreight = freightGroup6_quote;\t }\n\t\t\t}\n\t\t\tif (customGroups == 1) {\t\n\t\t\t\tcustomGroupFreight = freight_quote; \n\t\t\t}\t\n\t\t\tput(customGroupFreightDict, eachDocNum, customGroupFreight);\n\t\t\t\n\t\t\tif(containsKey(model_Weight_dict, eachDocNum)){\n\t\t\t\tItemORModelTotalWeight = get(model_Weight_dict, eachDocNum); \n\t\t\t}\t\n\t\t}\n\t\t\n\t\t// Alast 2012-06-14 calculating group prices\n\t\tif (customGroup == \"1\") {\n\t\t\tgroup1Pricing = group1Pricing + extendedNet;\n\t\t}\n\t\telif (customGroup == \"2\") {\n\t\t\tgroup2Pricing = group2Pricing + extendedNet;\n\t\t}\n\t\telif (customGroup == \"3\") {\n\t\t\tgroup3Pricing = group3Pricing + extendedNet;\n\t\t}\n\t\telif (customGroup == \"4\") {\n\t\t\tgroup4Pricing = group4Pricing + extendedNet;\n\t\t}\n\t\telif (customGroup == \"5\") {\n\t\t\tgroup5Pricing = group5Pricing + extendedNet;\n\t\t}\n\t\telif (customGroup == \"6\") {\n\t\t\tgroup6Pricing = group6Pricing + extendedNet;\n\t\t}\n\t\t//==============CALCULATING DISCOUNT,LIST PRICE, EXTENDED LIST PRICE, NET PRICE, EXTENDED NET PRICE FOR ALL MODELS - END===========\n\t\t//Old Quantity\n\t\tif(containskey(qtyDict, eachDocNum)){\n\t\t\toldQty = get(qtyDict, eachDocNum);\n\t\t}\n\n\t\t/*\n\t\t** Build resultults String\n\t\t**\tfamily \n\t\t**\tCost \n\t\t**\tList Price\n\t\t**\tMaintenance \n\t\t**\tDiscount\n\t\t**\tmax discount & Approval \n\t\t**\tNet Price\n\t\t**\tMargins\n\t\t*/\n\t\t/*\n\t\t** This will minimize the size of the compiled script\n\t\t*/\n\t\t\n\t\t//print \"------------netPriceDict-----------\";\n\t\t//print netPriceDict;\n\t//\ttempOldExtNetPrice = getoldvalue(\"extendedNetPrice_line\",atoi(eachDocNum));\n\t\t//print \"tempOldExtNetPrice...............\";\n\t//\tprint tempOldExtNetPrice;\n\t\t//print \"End..............\";\n\t\t\n\t\t\n\t\tif(cPSOrder_quote == false){\n\t\t\tCostEa_Line_Script = round(CostEa_Line_Script, 2);\n\t\t}\n\t\tlineRes = lineRes\t+ eachDocNum + \"~family_line~\" + family + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~costEa_line~\" + string(CostEa_Line_Script) + \"|\"\n\t\t\t\t\t//+ eachDocNum + \"~costEa_line~\" + string(123456) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~extendedCost_line~\" + string(round(extendedCost, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~listPrice_line~\" + string(round(listPrice, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~extendedList_line~\" + string(round(extendedList, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~maintenancePercent_line~\" + string(round(maintenancePercent, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~maintenanceSubtotal_line~\" + string(round(maintenanceSubtotalLine, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~discount_line~\" + string(round(discount, numDecimal)) + \"|\" \n\t\t\t\t\t+ eachDocNum + \"~discountType_line~\" + discountType + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~discount2_line~\" + string(round(discount2, numDecimal))+ discount2Type + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~extendedDiscount_line~\" + string(round(extendedDiscount, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~discountPercent_line~\" + string(round(discountPercent, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~discountAmt_line~\" + string(round(discountAmt, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~maxDiscountPercent_line~\" + string(round(maxDiscountPercent, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~netPriceEach_line~\" + string(netPriceEach) + \"|\"\n\t\t\t\t\t//+ eachDocNum + \"~netPriceEach_line~\" + string(get(netPriceDict,eachDocNum)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~extendedNetPrice_line~\" + string(round(extendedNet, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~netMarginAmt_line~\" + string(round(netMarginAmt, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~netMarginAmtEach_line~\" + string(round(netMarginAmtEach, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~netMarginPercent_line~\" + string(round(netMarginPercent, 2)) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~swo_line~\" + string(Width) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~lwo_line~\" + string(Length) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~oldQuantity_line~\" + string(oldQty) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~weight_line~\" + string(Weight) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~qtyDiffFromConfig_line~\" + string(qtyChanged) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~totalWeight_line~\" + string(ItemORModelTotalWeight) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~weightForLineItem_line~\" + string(weightForDisplay) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~previousNetPriceEach_line~\" + string(netPriceEach) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~previousExtendedNetPrice_line~\" + string(extendedNet) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~supplierProcessed_line~\" + supplierProcessed + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~cutList_line~\" + customCutList + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~fabricationDrawingsAttached_line~\" + customFabDrawing + \"|\"\t\t\t\t\n\t\t\t\t\t+ eachDocNum + \"~modelSQFT_line~\" + String(modelSQFT) + \"|\"\n\t\t\t\t\t+ eachDocNum + \"~customProcessType_line~\" + customProcessingType + \"|\";\n\t\t\t\t\t//print \"eachDocNum\";\n\t\t\t\t\t//print eachDocNum;\n\t\t\t\t\tif(inputActionName <> \"default\"){ //In Line default, Group Numbers for line items are already calculate. Hence they shouldn't be overridden.\n\t\t\t\t\t\tlineRes = lineRes + eachDocNum + \"~customGroup_line~\" + Doc_GroupNumber + \"|\";\n\t\t\t\t\t}\n\t\t\t\t\t//print \"lineRes\";\n\t\t\t\t\t//print lineRes;\n\t\tlineRes = lineRes + eachDocNum + \"~grabPriceTablePrice~\" + string(getPrice) + \"|\";\t//Added by Robert Faigao per case 182193\n\t\ttmp = tmp + lineRes;\n\t\t\t\n\t\t//Prepares Part Information nodes for Tax Call.\n\t\t//==================PREPARE LINE ITEM XML TO BE INCLUDED IN THE TAX WEBSERICE REQUEST CALL===========================================\n\t\tif(docNumType == part AND containsKey(ShippingOriginBranchDict,eachDocNum) AND isnumber(get(ShippingOriginBranchDict,eachDocNum))){\n\t\t\tLineItemXMLTemplate=getItemInfoxmlFile;\n\t\t\tLineItemXMLTemplate=replace(LineItemXMLTemplate,\"ITEM_QTY\",string(qty));\n\t\t\tLineItemXMLTemplate=replace(LineItemXMLTemplate,\"PRODUCT_CLASS\",\"ITEM\");\n\t\t\tLineItemXMLTemplate=replace(LineItemXMLTemplate,\"PRODUCT_NUM\",partNumb);\n\t\t\t//Commenting this line. Using Extended Net Price instead of NetPriceEach.\n\t\t\t//LineItemXMLTemplate=replace(LineItemXMLTemplate,\"ITEM_PRICE\",string(netPriceEach));\n\t\t\tLineItemXMLTemplate=replace(LineItemXMLTemplate,\"ITEM_PRICE\",string(extendedNet));\n\t\t\tLineItemXMLTemplate=replace(LineItemXMLTemplate,\"ITEM_BRANCHCODE\",fobPointBranchCode);\n\t\t\tLineItemXMLTemplate = replace(LineItemXMLTemplate,\"EXEMPT_OVERRIDE\",taxExemptOverride);\n\t\t\tLineItemXMLTemplate = replace(LineItemXMLTemplate,\"FREIGHT_ROLLUP\",rollupFreight);\t\t\t\n\t\t\tLineItemInfoXML=LineItemInfoXML+LineItemXMLTemplate;\n\t\t\t//print \"LineItemInfoXMLTemplate\";\n\t\t\t//print LineItemInfoXML;\n\t\t}\n\t\t//=====================================================================================================================================\n\t\t// Approval Thresholds\n\t\tif((docNumType == \"part\") AND (not(marginThresholdReached)) AND (netMarginPercent < marginThreshold) AND (routeCode_quote <> \"S\")) {\n\t\t\tmarginThresholdReached = true;\n\t\t}\n\t\tif((docNumType == \"part\") AND (not(lowerDiscThresholdReached)) AND (discountPercent < lowerDiscThreshold) AND (routeCode_quote <> \"S\")) {\n\t\t\tlowerDiscThresholdReached = true;\n\t\t}\n\t\tif((docNumType == \"part\") AND (not(upperDiscThresholdReached)) AND (discountPercent > upperDiscThreshold) AND (routeCode_quote <> \"S\")) {\n\t\t\tupperDiscThresholdReached = true;\n\t\t}\n\t\t// Setting approval_line Flag -- //\n\t\tapprovalFlagVal = false;\n\t\tcustomfield26Val = \"\";\n\t\tif(containskey(customField26Dict,eachDocNum)){\n\t\t\tcustomfield26Val = get(customField26Dict,eachDocNum);\n\t\t\t//print customField26Dict;\n\t\t}\t\n\t\tif((docNumType == \"part\") AND ((netMarginPercent < marginThreshold) OR (discountPercent < lowerDiscThreshold) OR (discountPercent > upperDiscThreshold) OR (customfield26Val == \"Custom\")) AND routeCode_quote <> \"S\"){\n\t\t\tapprovalFlagVal = true;\n\t\t}\t\n\t\tput(lineItemApprovalDict, eachDocNum, approvalFlagVal);\t//Added the put statement per case 182628. Puts the approval flag into a dictionary to be used later. by Robert Faigao\n\t\t//tmp = tmp + eachDocNum + \"~approval_line~\" + string(approvalFlagVal) +\"|\";\n\t\t// Setting approval_line Flag - End -- //\n\t\t// end Approval Thresholds\n\t\t//print \"Discount Percent: \" + string(discountPercent);\n\t\t//print tmp;\n\t\t//=================PUT RETURN STRING INTO RETURN ARRAY ====================================================================================================\n\t\tif(counter >= 1000){\n\t\t\ttemp = join(returnarray,\"\");\n\t\t\treturnarray = returnemptyarray;\n\t\t\treturnarray[0] = temp;\n\t\t\tcounter = 1;\n\t\t}\n\t\tif(tmp <> \"\"){\n\t\t\treturnarray[counter] = tmp;\n\t\t\tcounter = counter + 1;\n\t\t}\n\t}\n\n\t//Also set the threshold reached variables to false\n\tif(totalNetPrice <= MinimumThreshold){\n\t\tmarginThresholdReached = false;\t//Set all threshold variables to false\n\t\tlowerDiscThresholdReached = false;\n\t\tupperDiscThresholdReached = false;\n\t\tapprovalFlagVal = false;\n\t}\n\n\tresTiming1 = start - getcurrenttimeinmillis();\n\tresTimingString = resTimingString + \"\\nLine 1507: \" + string(resTiming1);\n\tstart = getcurrenttimeinmillis();\n\n\t//Loop through each document again, if the totalNetPrice exceeds the minimum threshold, then line items needing approval retain their value. (Added by Robert Faigao per case 182628)\n\t//=========CALCULATE LOT PRICES FOR EACH CONFIGURATION ON THE QUOTE=========================================\n\t// Setting VP Approval Flag\n\n\tvpApproval = false;\n\tif((totalNetPrice > vpNetThreshold_quote) AND (sendToVP_quote) AND (routeCode_quote <> \"S\")){\n\t\tvpApproval = true;\n\t}\n\tLOTPriceRet =  \"\";\n\tfor eachDocNum in docNumList {\n\t\ttmp = \"\";\n\t\tif(vpApproval){\n\t\t\ttmp = tmp + eachDocNum + \"~approval_line~true|\";\n\t\t}else{\n\t\t\tif(containskey(lineItemApprovalDict, eachDocNum) AND totalNetPrice > MinimumThreshold){\n\t\t\t\ttmp = tmp + eachDocNum + \"~approval_line~\" + string(get(lineItemApprovalDict, eachDocNum)) + \"|\";\t//If the totalNetPrice exceeds the minimum threshold, set each line items approval status\n\t\t\t}else{\n\t\t\t\ttmp = tmp + eachDocNum + \"~approval_line~false|\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tLOTPrice = 0.0;\n\t\tdocNumType = get(docNumTypeDict, eachDocNum);\n\t\t/**print \"docNumType\";\n\t\tprint docNumType;\n\t\tprint \"part\";\n\t\tprint part;**/\n\t\tif(docNumType <> part ){\n\t\t\tif(find(customModel, \"~\" + eachDocNum + \"~\") <> -1 and find(customProcessingModels, \"~\" + eachDocNum + \"~\") <> -1 \tand containskey(modelLOTCustomPriceDict, eachDocNum)) {\t\t\t\n\t\t\t\tLOTPrice = round(get(modelLOTCustomPriceDict, eachDocNum), 2);\t\n\t\t\t\t//print \"set 1 for \" + eachDocNum + \" \" + string(LOTPrice);\n\t\t\t}\n\t\t\telif(find(customModel, \"~\" + eachDocNum + \"~\") == -1 and find(internalProcessingModels, \"~\" + eachDocNum + \"~\") <> -1 and containskey(modelLOTPriceDict, eachDocNum)) {\t\t\t\n\t\t\t\tLOTPrice = round(get(modelLOTPriceDict, eachDocNum), 2);\n\t\t\t\t//print \"set HERE for \" + eachDocNum + \" \" + string(LOTPrice);\n\t\t\t}\n\t\t\tLOTPriceRet = LOTPriceRet + eachDocNum + \"~lOT_NO_FREIGHT~\" + string(LOTPrice) + \"|\";\n\t\t\t//PRINT \"LOTPRICERET1\";\n\t\t\t//print LOTPriceRet;\n\t\t\t//If there are stock onlys, freight is not on LOT\n\t\t\tif(includeFreightPriceInItem_quote AND freightIndicator_quote == \"Pre-Paid\" AND find(stockonlyOnModel, \"~\" + eachDocNum + \"~\") == -1) {\t\t\t\n\t\t\t\tif(containskey(customGroupFreightDict, eachDocNum)) {\n\t\t\t\t\tLOTPrice = LOTPrice + round(get(customGroupFreightDict, eachDocNum), 2);\t\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\tLOTPriceRet = LOTPriceRet+eachDocNum+\"~LOT_line~\"+ string(LOTPrice) + \"|\";\n\t\t//print \"LOTPRICERET2\";\n\t\t//print LOTPriceRet;\n\t\t//=================PUT RETURN STRING INTO RETURN ARRAY ====================================================================================================\n\t\tif(counter >= 1000){\n\t\t\ttemp = join(returnarray,\"\");\n\t\t\treturnarray = returnemptyarray;\n\t\t\treturnarray[0] = temp;\n\t\t\tcounter = 1;\n\t\t}\n\t\tif(tmp <> \"\"){\n\t\t\treturnarray[counter] = tmp;\n\t\t\tcounter = counter + 1;\n\t\t}\n\t}\n\t// Setting VP Approval Flag -- END //\n\t//================================================================================================================\n\tresult = result + LOTPriceRet;\n\n\t// Approval Thresholds\n\tif((not(netThresholdReached)) AND (totalNetPrice > netThreshold) AND (totalNetPrice > MinimumThreshold) AND (routeCode_quote <> \"S\")) {\n\t\tnetThresholdReached = true;\n\t\t//print totalNetPrice;\n\t\t//print MinimumThreshold;\n\t\t//print netThresholdReached;\n\t}\n\n\t//print marginThresholdReached;\n\t//print lowerDiscThresholdReached;\n\t//print upperDiscThresholdReached;\n\t//print netThresholdReached;\n\t//concat issue\n\tresult = result + \"1~marginThresholdReached_quote~\" + string(marginThresholdReached) + \"|\"\n\t+ \"1~lowerDiscountThresholdReached_quote~\" + string(lowerDiscThresholdReached) + \"|\"\n\t+ \"1~upperDiscountThresholdReached_quote~\" + string(upperDiscThresholdReached) + \"|\"\n\t+ \"1~netThresholdReached_quote~\" + string(netThresholdReached) + \"|\";\n\n\t// Miscellaneous Ad-hoc Charges\n\n\t// Calculates the discount percent\n\tdiscMiscCharge1 = miscChargeDiscount1_quote;\t\tdiscMiscCharge2 = miscChargeDiscount2_quote;\n\tdiscMiscCharge3 = miscChargeDiscount3_quote;\t\tdiscMiscCharge4 = miscChargeDiscount4_quote;\n\tdiscMiscCharge5 = miscChargeDiscount5_quote;\t\tdiscMiscCharge6 = miscChargeDiscount6_quote;\n\n\tif(miscChargeDiscountType1_quote == \"Amt\"){ discMiscCharge1 = (miscChargeDiscount1_quote / miscChargeList1_quote) * hundredPercent;}\n\tif(miscChargeDiscountType2_quote == \"Amt\"){ discMiscCharge2 = (miscChargeDiscount2_quote / miscChargeList2_quote) * hundredPercent;}\n\tif(miscChargeDiscountType3_quote == \"Amt\"){ discMiscCharge3 = (miscChargeDiscount3_quote / miscChargeList3_quote) * hundredPercent;}\n\tif(miscChargeDiscountType4_quote == \"Amt\"){ discMiscCharge4 = (miscChargeDiscount4_quote / miscChargeList4_quote) * hundredPercent;}\n\tif(miscChargeDiscountType5_quote == \"Amt\"){ discMiscCharge5 = (miscChargeDiscount5_quote / miscChargeList5_quote) * hundredPercent;}\n\tif(miscChargeDiscountType6_quote == \"Amt\"){ discMiscCharge6 = (miscChargeDiscount6_quote / miscChargeList6_quote) * hundredPercent;}\n\n\tdiscMiscCharge1 = round(discMiscCharge1, numDecimal);\n\tdiscMiscCharge2 = round(discMiscCharge2, numDecimal);\n\tdiscMiscCharge3 = round(discMiscCharge3, numDecimal);\n\tdiscMiscCharge4 = round(discMiscCharge4, numDecimal);\n\tdiscMiscCharge5 = round(discMiscCharge5, numDecimal);\n\tdiscMiscCharge6 = round(discMiscCharge6, numDecimal);\n\n\n\t// Net Misc Charges.  Net Charges are calculated by taking\n\tnetMiscCharge1 = miscChargeList1_quote - (miscChargeList1_quote * round((discMiscCharge1 / hundredPercent), numDecimal));\n\tnetMiscCharge2 = miscChargeList2_quote - (miscChargeList2_quote * round((discMiscCharge2 / hundredPercent), numDecimal));\n\tnetMiscCharge3 = miscChargeList3_quote - (miscChargeList3_quote * round((discMiscCharge3 / hundredPercent), numDecimal));\n\tnetMiscCharge4 = miscChargeList4_quote - (miscChargeList4_quote * round((discMiscCharge4 / hundredPercent), numDecimal));\n\tnetMiscCharge5 = miscChargeList5_quote - (miscChargeList5_quote * round((discMiscCharge5 / hundredPercent), numDecimal));\n\tnetMiscCharge6 = miscChargeList6_quote - (miscChargeList6_quote * round((discMiscCharge6 / hundredPercent), numDecimal));\n\n\n\t// Extended Misc Charges.  Extended Charges are calculated by taking Net Charge * Quantity\n\textMiscCharge1 = netMiscCharge1 * miscChargeQty1_quote;\n\textMiscCharge2 = netMiscCharge2 * miscChargeQty2_quote;\n\textMiscCharge3 = netMiscCharge3 * miscChargeQty3_quote;\n\textMiscCharge4 = netMiscCharge4 * miscChargeQty4_quote;\n\textMiscCharge5 = netMiscCharge5 * miscChargeQty5_quote;\n\textMiscCharge6 = netMiscCharge6 * miscChargeQty6_quote;\n\n\t// Total Misc Charges.\n\ttotalMiscCharges = totalMiscCharges + extMiscCharge1 + extMiscCharge2 + extMiscCharge3 + extMiscCharge4 + extMiscCharge5 + extMiscCharge6;\n\n\tsubtotalPreQuoteDiscounts = totalNetPrice + totalMiscCharges;\n\n\n\t// Adds Misc Items to Custom Group Subtotals\n\tif(miscChargeGroup1_quote <> \"\" ){\n\t\tcustomGroupSubtotal = get(customGroupSubtotalDict, miscChargeGroup1_quote);\n\t\tcustomGroupSubtotal = customGroupSubtotal + extMiscCharge1;\n\t\tput(customGroupSubtotalDict, miscChargeGroup1_quote, customGroupSubtotal);\n\t} \n\telse {\n\t\tungroupSubtotal = ungroupSubtotal + extMiscCharge1;\n\t} \n\n\tif(miscChargeGroup2_quote <> \"\" ){\n\t\tcustomGroupSubtotal = get(customGroupSubtotalDict, miscChargeGroup2_quote);\n\t\tcustomGroupSubtotal = customGroupSubtotal + extMiscCharge2;\n\t\tput(customGroupSubtotalDict, miscChargeGroup2_quote, customGroupSubtotal);\n\t} \n\telse {\n\t\tungroupSubtotal = ungroupSubtotal + extMiscCharge2;\n\t} \n\n\tif(miscChargeGroup3_quote <> \"\" ){\n\t\tcustomGroupSubtotal = get(customGroupSubtotalDict, miscChargeGroup3_quote);\n\t\tcustomGroupSubtotal = customGroupSubtotal + extMiscCharge3;\n\t\tput(customGroupSubtotalDict, miscChargeGroup3_quote, customGroupSubtotal);\n\t} \n\telse {\n\t\tungroupSubtotal = ungroupSubtotal + extMiscCharge3;\n\t} \n\n\tif(miscChargeGroup4_quote <> \"\" ){\n\t\tcustomGroupSubtotal = get(customGroupSubtotalDict, miscChargeGroup4_quote);\n\t\tcustomGroupSubtotal = customGroupSubtotal + extMiscCharge4;\n\t\tput(customGroupSubtotalDict, miscChargeGroup4_quote, customGroupSubtotal);\n\t} \n\telse {\n\t\tungroupSubtotal = ungroupSubtotal + extMiscCharge4;\n\t} \n\n\tif(miscChargeGroup5_quote <> \"\" ){\n\t\tcustomGroupSubtotal = get(customGroupSubtotalDict, miscChargeGroup5_quote);\n\t\tcustomGroupSubtotal = customGroupSubtotal + extMiscCharge5;\n\t\tput(customGroupSubtotalDict, miscChargeGroup5_quote, customGroupSubtotal);\n\t} \n\telse {\n\t\tungroupSubtotal = ungroupSubtotal + extMiscCharge5;\n\t} \n\n\tif(miscChargeGroup6_quote <> \"\" ){\n\t\tcustomGroupSubtotal = get(customGroupSubtotalDict, miscChargeGroup6_quote);\n\t\tcustomGroupSubtotal = customGroupSubtotal + extMiscCharge6;\n\t\tput(customGroupSubtotalDict, miscChargeGroup6_quote, customGroupSubtotal);\n\t} \n\telse {\n\t\tungroupSubtotal = ungroupSubtotal + extMiscCharge6;\n\t} \n\n\t// Proposal Grouping Subtotals\n\tfor eachGroup in groups {\n\t\ttmp = \"\";\n\t\tgroupNum = eachGroup + 1;\n\t\tcustomGroupSubtotal = get(customGroupSubtotalDict, string(groupNum));\n\t\ttmp = tmp + \"1~customGroup\" + string(groupNum) + \"Subtotal_quote~\" + string(customGroupSubtotal) + \"|\";\n\t\t//=================PUT RETURN STRING INTO RETURN ARRAY ====================================================================================================\n\t\tif(counter >= 1000){\n\t\t\ttemp = join(returnarray,\"\");\n\t\t\treturnarray = returnemptyarray;\n\t\t\treturnarray[0] = temp;\n\t\t\tcounter = 1;\n\t\t}\n\t\tif(tmp <> \"\"){\n\t\t\treturnarray[counter] = tmp;\n\t\t\tcounter = counter + 1;\n\t\t}\n\t} \n\n\t// Proposal Ungroup Subtotal \n\tresult = result + \"1~ungroupSubtotal_quote~\" + string(round(ungroupSubtotal, 2)) + \"|\";\n\n\t// Bottom Line Discounts\n\tif (bottomLineDiscountType_quote == \"%\"){\n\t\tbottomLineDiscount2 = subtotalPreQuoteDiscounts *\t(bottomLineDiscount_quote / hundredPercent);\n\t\tbottomLinediscountAmt = bottomLineDiscount2; \n\t\tbottomLineDiscountPercent = bottomLineDiscount_quote;\n\t}\n\telse{\n\t\tbottomLineDiscount2 = (bottomLineDiscount_quote / subtotalPreQuoteDiscounts) * hundredPercent;\n\t\tbottomLineDiscountAmt = bottomLineDiscount_quote; \n\t\tbottomLineDiscountPercent = bottomLineDiscount2;\n\t}\n\tbottomLineDiscount2 = round(bottomLineDiscount2, numDecimal);\n\tbottomLineDiscountAmt = round(bottomLineDiscountAmt, numDecimal);\n\tbottomLineDiscountPercent = round(bottomLineDiscountPercent, numDecimal);\n\n\n\t// Total Discount\t\t\n\ttotalDiscount = bottomLineDiscountAmt + totalLineItemDiscounts;\t\n\ttotalDiscount = round(totalDiscount, numDecimal);\n\n\t//\tSubtotal after Bottom line Discounts // \n\tsubtotalPostQuoteDiscounts = subtotalPreQuoteDiscounts - bottomLineDiscountAmt;\n\tsubtotalPostQuoteDiscounts = round(subtotalPostQuoteDiscounts, numDecimal);\n\n\t//\tTotal\t// \n\ttotal = subtotalPostQuoteDiscounts + miscChargePostDiscount1_quote + miscChargePostDiscount2_quote + miscChargePostDiscount3_quote + maintenanceSubtotalQuote;\n\ttotal = round(total, numDecimal);\n\n\t//\tTotal Margins\t \n\tif\t(subtotalPostQuoteDiscounts > 0.0){\n\t\ttotalMarginPercent = ((subtotalPostQuoteDiscounts-totalCost) / subtotalPostQuoteDiscounts) * hundredPercent;\n\t\ttotalMarginPercent = round(totalMarginPercent, numDecimal);\n\t}\n\n\ttotalMarginDollar = subtotalPostQuoteDiscounts - totalCost;\n\ttotalMarginDollar = round(totalMarginDollar, numDecimal);\n\tresult = result + commerce.updateApprovalsData(inputActionName,\"\");\n\n\t//\tBuild resultults String\t// \n\t/*\n\t\tThis will miniimize the size of the script \n\t*/\n\n\t//Case: 00101459\n\t/*\n\tbranchZipSet = bmql(\"SELECT Branch_Street,Branch_City,Branch_State,Branch_Country,Branch_Zip FROM BranchNum_Name WHERE Branch_Name LIKE $fOBPoint_quote\");\n\n\tfor each in branchZipSet{\n\t\tfobStreet = get(each, \"Branch_Street\");\n\t\tfobCity = get(each, \"Branch_City\");\n\t\tfobState = get(each, \"Branch_State\");\n\t\tfobCountry = get(each, \"Branch_Country\");\n\t\tfobZip = get(each, \"Branch_Zip\");\n\t\tbreak;\n\t} */\n\n\t//Perform Tax call to calculate the tax\n\t//====================GET THE SOAP REQUEST FORMAT FROM FILE MANAGER FOR THE TAX CALCULATION WEBSERVICE CALL=========================\n\tTotalTaxOnQuote = tax_quote;\n\n\t//===========PREPARE TAX CALCULATION REQUEST FOR LINES INFORMATION AND DO THE WEBSERVICE CALL AND PARSE THE RESPONSE - START =================================\n\tif(customerNumber_quote <> \"\" AND LineItemInfoXML <> \"\" AND (inputActionName) == \"submit\"){ //If Customer Number is empty or if there are no line items tax will not be called\t\n\t\treturnTaxStr = commerce.getTotalTax(LineItemInfoXML,fobPointBranchCode,\"\");\n\t\ttaxDataArray = Split(returnTaxStr,\"##\");\n\t\tif(taxDataArray[0] == \"true\"){\n\t\t\tTaxCallFail = true;\n\t\t}\n\t\tTotalTaxOnQuote = atof(taxDataArray[1]);\n\t\tret = ret + taxDataArray[2];\n\t}\n\n\t//===========PREPARE TAX CALCULATION REQUEST FOR LINES INFORMATION AND DO THE WEBSERVICE CALL AND PARSE THE RESPONSE - END =================================\n\tresTiming1 = start - getcurrenttimeinmillis();\n\tresTimingString = resTimingString + \"\\nLine 1923: \" + string(resTiming1);\n\tstart = getcurrenttimeinmillis();\n\n\t// Alast 2012-06-14 after having calculated the subtotals for each group, based on those values the taxes for each group can be calculated using the totalNetPrice and the total taxes\n\n\t//=============DIVIDE THE TOTAL TAX FOR EACH GROUP BASED ON NET PRICE============================\n\tif (totalNetPrice <> 0) {\n\t\tgroup1Tax = round(TotalTaxOnQuote * (group1Pricing / totalNetPrice), 2);\n\t\tgroup2Tax = round(TotalTaxOnQuote * (group2Pricing / totalNetPrice), 2);\n\t\tgroup3Tax = round(TotalTaxOnQuote * (group3Pricing / totalNetPrice), 2);\n\t\tgroup4Tax = round(TotalTaxOnQuote * (group4Pricing / totalNetPrice), 2);\n\t\tgroup5Tax = round(TotalTaxOnQuote * (group5Pricing / totalNetPrice), 2);\n\t\tgroup6Tax = round(TotalTaxOnQuote * (group6Pricing / totalNetPrice), 2);\n\t}\n\t//=============================================================================================\n\n\t//===========DETERMINE THE CARRIER SELECTED BY THE USER AND PULL THAT CARRIER INFORMATION IN TO ANOTHER FIELDS======================\n\tcarrierDataDict = commerce.getCarrierData();\n\tif(containsKey(carrierDataDict,\"freight_price\")){\n\t\tfreightPrice = atof(get(carrierDataDict,\"freight_price\"));\n\t}\n\tif(containsKey(carrierDataDict,\"carrier_name\")){\n\t\tfreightCarrierName = get(carrierDataDict,\"carrier_name\");\n\t}\n\tif(containsKey(carrierDataDict,\"carrier_id\")){\n\t\tcarrierid = get(carrierDataDict,\"carrier_id\");\n\t}\n\tshipVia = shipVia_quote;\n\tif(containsKey(carrierDataDict,\"shipVia\")){\n\t\tshipVia = get(carrierDataDict,\"shipVia\");\n\t}\n\tfreightSpecialInstructions = freightSpecialInstructions_quote;\n\tif(containsKey(carrierDataDict,\"freightInstructions\")){\n\t\tfreightSpecialInstructions = get(carrierDataDict,\"freightInstructions\");\n\t}\n\tif(containsKey(carrierDataDict,\"freightIndicator\")){\n\t\tfreightIndicator = get(carrierDataDict,\"freightIndicator\");\n\t}\n\tincludeFreightPriceinItem = \"false\";\n\tif(containsKey(carrierDataDict,\"includeFreightPriceinItem\")){\n\t\tincludeFreightPriceinItem = get(carrierDataDict,\"includeFreightPriceinItem\");\n\t}\n\toverrideFreightFlag = \"false\";\n\tif(containsKey(carrierDataDict,\"overrideFreightFlag\")){\n\t\toverrideFreightFlag = get(carrierDataDict,\"overrideFreightFlag\");\n\t}\n\t\n\t//Moved this quote to util function\n\tmodeltotalsStrng = commerce.setModelTotal(docNumList, extNetPriceValue, itemSaleTypeDict, lineDocSeqNumDict, parentDocNumDict, model_Weight_dict, model_eachQuantity_Dict, model_Quantity_Dict, model_Tolerance_Dict, model_EndPlates_Dict, model_Price_Dict, cutLineLengthDict, cutLineWidthDict, includeFreightPriceinItem);\n\t//====================================================================================================================\n\n\t//If RouteCode is Pick-Up or Walk-in, then clear shipping address fields as well as freight results.\n\t// Case  00109325 \n\t//==================CLEAR CARRIER ROWS IN FREIGHT TAB WHEN FREIGHT IS NOT APPLICABLE=====================\n\tif(routeCode_quote == \"P\" OR routeCode_quote == \"W\" OR freightIndicator <> \"Pre-Paid\"){ \t\n\t\tloopArray = range(20);\n\t\tfreightRowIndex = 1;\n\t\t//Clear Freight Rows\n\t\tfor each in loopArray{\n\t\t\t//concat issue\n\t\t\ttmp = \"\";\n\t\t\ttmp = tmp + \"1~freightGridSelect\" + string(freightRowIndex) + \"_quote~\" + string(false) + \"|\"\n\t\t\t+ \"1~freightGridCarrier\" + string(freightRowIndex) + \"_quote~\" + \"\" + \"|\"\n\t\t\t+ \"1~freightGridMode\" + string(freightRowIndex) + \"_quote~\" + \"\" + \"|\"\n\t\t\t+ \"1~freightGridDays\" + string(freightRowIndex) + \"_quote~\" + string(0) + \"|\"\n\t\t\t+ \"1~freightGridPrice\" + string(freightRowIndex) + \"_quote~\" + string(0) + \"|\";\n\t\t\tfreightRowIndex = freightRowIndex + 1;\n\t\t\t//=================PUT RETURN STRING INTO RETURN ARRAY ====================================================================================================\n\t\t\tif(counter >= 1000){\n\t\t\t\ttemp = join(returnarray,\"\");\n\t\t\t\treturnarray = returnemptyarray;\n\t\t\t\treturnarray[0] = temp;\n\t\t\t\tcounter = 1;\n\t\t\t}\n\t\t\tif(tmp <> \"\"){\n\t\t\t\treturnarray[counter] = tmp;\n\t\t\t\tcounter = counter + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Set Freight Calculated Flags and Number of carriers\n\t\t//concat issue\n\t\tresult = result + \"1~freightCalculated_quote~\" + string(false)+\"|\"\n\t\t+ \"1~numberOfCarriers_quote~\"+ string(0) + \"|\"\n\t\t+ \"1~pickupDate_quote~\" + \"|\"\n\t\t+ \"1~dropDate_quote~\" +\"|\"\n\t\t+ \"1~freightCalculatedShipToZipCode_quote~\" + \"\" +\"|\"\n\t\t+ \"1~freightCalculatedFOBPoint_quote~\" + \"\" +\"|\"\n\t\t+ \"1~carrierIdString_quote~\"+ \"|\";\n\t\t\n\t\tif(routeCode_quote == \"P\" OR routeCode_quote == \"W\"){ \n\t\t\t//concat issue\n\t\t\tresult = result + \"1~_quote_process_shipTo_company_name~|\"\n\t\t\t+ \"1~_quote_process_shipTo_company_name_2~|\"\n\t\t\t+ \"1~_quote_process_shipTo_first_name~|\"\n\t\t\t+ \"1~_quote_process_shipTo_last_name~|\"\n\t\t\t+ \"1~_quote_process_shipTo_company_name_2~|\"\n\t\t\t+ \"1~_quote_process_shipTo_address~|\"\n\t\t\t+ \"1~_quote_process_shipTo_address_2~|\"\n\t\t\t+ \"1~_quote_process_shipTo_city~|\"\n\t\t\t+ \"1~_quote_process_shipTo_state~|\"\n\t\t\t+ \"1~_quote_process_shipTo_country~|\"\n\t\t\t+ \"1~_quote_process_shipTo_zip~|\"\n\t\t\t+ \"1~shippingAddressID_quote~|\";\t\n\t\t}\n\t}\t\n\t//==================Prepare Dimensions table data=====================\n\tinfoForCutLinesArr = String[];\n\tcutLinesParentDocArray = keys(modelCutDataDict);\n\tfor eachParentDoc in cutLinesParentDocArray{\n\t\tif(findinArray(availableParentArray,eachParentDoc) <> -1){\n\t\t\tappend(infoForCutLinesArr,get(modelCutDataDict,eachParentDoc));\n\t\t}\n\t}\n\t//=================END============================\n\n\t//Adding Freight Price to Quote Total\n\ttotal = total + freightPrice + TotalTaxOnQuote;\n\nif(freightIndicator == \"Collect\"){\n\tburiedFreightSubtotal = totalNetPrice;\n}else{\n\tburiedFreightSubtotal = totalNetPrice + round(freightPrice, 2);\n}\n\nuniqueInfillData = keys(infillDict);\n\ninfillQuote = false;\nif(isempty(uniqueInfillData)){\n\tinfillQuote = false;\n}else{\n\tinfillQuote = true;\n}\n\nresult = result\t+ \"1~totalCost_quote~\" + string(totalCost) + \"|\"\n\t\t+ \"1~buriedFreightSubtotal_quote~\" + string(buriedFreightSubtotal) + \"|\"\n\t\t+ \"1~totalListPrice_quote~\" + string(totalListPrice) + \"|\"\n\t\t+ \"1~totalLineItemDiscounts_quote~\" + string(totalLineItemDiscounts) + \"|\"\n\t\t+ \"1~totalNetPrice_quote~\" + string(totalNetPrice) + \"|\"\n\t\t+ \"1~subtotalPreQuoteDiscounts_quote~\" + string(subtotalPreQuoteDiscounts) + \"|\"\n\t\t+ \"1~bottomLineDiscount2_quote~\" + string(bottomLineDiscount2) + bottomLineDiscount2Type + \"|\"\n\t\t+ \"1~bottomLineDiscountPercent_quote~\" + string(bottomLineDiscountPercent) + \"|\"\n\t\t+ \"1~totalDiscount_quote~\" + string(totalDiscount) + \"|\"\n\t\t+ \"1~totalMiscCharges_quote~\" + string(totalMiscCharges) + \"|\"\n\t\t+ \"1~subtotalPostQuoteDiscounts_quote~\" + string(subtotalPostQuoteDiscounts) + \"|\"\n\t\t+ \"1~maintenanceSubtotal_quote~\" + string(round(maintenanceSubtotalQuote, 2)) + \"|\"\n\t\t+ \"1~total_quote~\" + string(total) + \"|\"\n\t\t+ \"1~totalMarginPercent_quote~\" + string(totalMarginPercent) + \"|\"\n\t\t+ \"1~totalMarginDollar_quote~\" + string(totalMarginDollar) + \"|\"\n\t\t+ \"1~miscExtCharge1_quote~\" + string(round(extMiscCharge1, 2)) + \"|\"\n\t\t+ \"1~miscExtCharge2_quote~\" + string(round(extMiscCharge2, 2)) + \"|\"\n\t\t+ \"1~miscExtCharge3_quote~\" + string(round(extMiscCharge3, 2)) + \"|\"\n\t\t+ \"1~miscExtCharge4_quote~\" + string(round(extMiscCharge4, 2)) + \"|\"\n\t\t+ \"1~miscExtCharge5_quote~\" + string(round(extMiscCharge5, 2)) + \"|\"\n\t\t+ \"1~miscExtCharge6_quote~\" + string(round(extMiscCharge6, 2)) + \"|\"\n\t\t+ \"1~miscCharge1_quote~\" + string(netMiscCharge1) + \"|\"\t\t\n\t\t+ \"1~miscCharge2_quote~\" + string(netMiscCharge2) + \"|\"\t\t\n\t\t+ \"1~miscCharge3_quote~\" + string(netMiscCharge3) + \"|\"\n\t\t+ \"1~miscCharge4_quote~\" + string(netMiscCharge4) + \"|\"\t\t\n\t\t+ \"1~miscCharge5_quote~\" + string(netMiscCharge5) + \"|\"\t\t\n\t\t+ \"1~miscCharge6_quote~\" + string(netMiscCharge6) + \"|\"\t\t\n\t\t+ \"1~miscChargeDiscountPercent1_quote~\" + string(discMiscCharge1) + \"|\"\t\t\n\t\t+ \"1~miscChargeDiscountPercent2_quote~\" + string(discMiscCharge2) + \"|\"\t\t\n\t\t+ \"1~miscChargeDiscountPercent3_quote~\" + string(discMiscCharge3) + \"|\"\t\t\n\t\t+ \"1~miscChargeDiscountPercent4_quote~\" + string(discMiscCharge4) + \"|\"\t\t\n\t\t+ \"1~miscChargeDiscountPercent5_quote~\" + string(discMiscCharge5) + \"|\"\t\t\n\t\t+ \"1~miscChargeDiscountPercent6_quote~\" + string(discMiscCharge6) + \"|\"\n\t\t+ \"1~approvalRequired_quote~\" + string(approvalFlag) + \"|\"\n\t\t+ \"1~tax_quote~\" + string(round(TotalTaxOnQuote, 2)) + \"|\"\n\t\t+ \"1~manualEstimateAppRqd_quote~\"+string(manualEstimateModelFlag) + \"|\"\n\t\t+ \"1~customGroup1Subtotal_quote~\" + string(group1Pricing) + \"|\"\n\t\t+ \"1~customGroup2Subtotal_quote~\" + string(group2Pricing) + \"|\"\n\t\t+ \"1~customGroup3Subtotal_quote~\" + string(group3Pricing) + \"|\"\n\t\t+ \"1~customGroup4Subtotal_quote~\" + string(group4Pricing) + \"|\"\n\t\t+ \"1~customGroup5Subtotal_quote~\" + string(group5Pricing) + \"|\"\n\t\t+ \"1~customGroup6Subtotal_quote~\" + string(group6Pricing) + \"|\"\n\t\t+ \"1~taxGroup1_quote~\" + string(round(group1Tax, 2)) + \"|\"\n\t\t+ \"1~taxGroup2_quote~\" + string(round(group2Tax, 2)) + \"|\"\n\t\t+ \"1~taxGroup3_quote~\" + string(round(group3Tax, 2)) + \"|\"\n\t\t+ \"1~taxGroup4_quote~\" + string(round(group4Tax, 2)) + \"|\"\n\t\t+ \"1~taxGroup5_quote~\" + string(round(group5Tax, 2)) + \"|\"\n\t\t+ \"1~taxGroup6_quote~\" + string(round(group6Tax, 2)) + \"|\"\t \n\t\t+ \"1~freight_quote~\" + string(round(freightPrice, 2)) + \"|\"\n\t\t+ \"1~freightValue_quote~\" + string(round(freightPrice, 2)) + \"|\"\n\t\t+ \"1~carrierName_quote~\" + freightCarrierName + \"|\"\n\t\t+ \"1~carrierId_quote~\" + carrierid + \"|\"\n\t\t+ \"1~freightIndicator_quote~\" + freightIndicator + \"|\"\n\t\t+ \"1~shipVia_quote~\" + shipVia + \"|\"\t\t\n\t\t+ \"1~overrideFreight_quote~\" + overrideFreightFlag + \"|\"\n\t\t+ \"1~includeFreightPriceInItem_quote~\" + includeFreightPriceinItem + \"|\"\n\t\t+ \"1~freightSpecialInstructions_quote~\" + freightSpecialInstructions + \"|\"\n\t\t+ \"1~conversionRequired_quote~false\" + \"|\"\n\t\t// + 1~shipVia_quote~\" + freightShipVia + \"|\"\n\t\t+ \"1~fOBPoint_quote~\" + fobPointBranchCode + \"|\" \n\t\t+ \"1~branchNameAndZip_quote~\" + fobPointBranchName_Zip + \"|\" \n\t\t+ \"1~branchName_quote~\" + fobPointBranch_Name + \"|\" \n\t\t+ \"1~branchStreet_quote~\" + fobPointBranch_Street + \"|\"\n\t\t+ \"1~branchCity_quote~\" + fobPointBranch_City + \"|\"\n\t\t+ \"1~branchState_quote~\" + fobPointBranch_State + \"|\"\t\t\n\t\t+ \"1~branchZip_quote~\" + fobPointBranch_Zip + \"|\"\n\t\t+ \"1~branchCountry_quote~\" + fobPointBranch_Country + \"|\"\n\t\t+ \"1~quoteStausForCopyAction~\" + status_quote + \"|\"\n\t\t+\"1~quoteDescription_quote~\" + quoteDescription + \"|\"\n\t\t+\"1~currentQuoteStep_quote~\" + _system_current_step_var + \"|\"\n\t\t+\"1~availabilityCallFailed_quote~\" + string(AvailabilityCallFail) + \"|\"\n\t\t+\"1~taxCallFailed_quote~\" + string(TaxCallFail) + \"|\"\n\t\t+\"1~processedItemsExist_quote~\" + string(processedItemsExistOnQuote) + \"|\"\n\t\t+\"1~infillPanel_quote~\" + string(infillQuote) + \"|\"\n\t\t+\"1~partsForPricingTable_quote~\" + join(partsForPricingTableArr, \"$$\")  + \"|\"\n\t\t+\"1~informationForCutLinesTable_quote~\" + join(infoForCutLinesArr, \"##\")  + \"|\"\n\t\t+\"1~totalQuoteWeight_quote~\" + string(integer(totalWeightQuote)) + \"|\"\n\t\t+\"1~multipieceConstruction~\" + string(multipieceConstructionFlag) + \"|\"\n\t\t+\"1~showValidationOnSaleType_quote~\" + string(showValidationOnSaleType) + \"|\";\n\t\t\n\t\tif(NOT(processedItemsExistOnQuote)){\n\t\t\tresult = result\t+ \"1~processStartDate~|\";\n\t\t}\n//Get Conversion Rate\t\t\nresult = result+ commerce.getConversionRate(\"\");\n\nif(containsKey(inventoryType_Dict,\"true\")){\n\tresult = result + \"1~specialOrderPart~true|\";\n}else{\n\tresult = result + \"1~specialOrderPart~false|\";\n}\n\nresult = result + \"1~addingModelFlag~false|\";\n// Check any Custom part exists in a quote.\nallSaleTypeString = join(values(itemSaleTypeDict),\"\");isCPSOrderQuote = false;\nif(find(allSaleTypeString,\"Custom Product\") <> -1){\n\tisCPSOrderQuote = true;\n\tresult = result + \"1~enterAsBackOrder_quote~\"+string(isCPSOrderQuote)+ \"|\";\n}else{\n\tresult = result + \"1~mTR_quote~\"+string(isCPSOrderQuote)+ \"|\";\n}\n//If CPS Quote is TRUE and Total Price >= $10,000, require CPS Manager Approval\ncPSManagerApprovalRequired = false;\nif(isCPSOrderQuote == true AND total >= 10000){\n\tcPSManagerApprovalRequired = true;\n}\n\nif(cPSOrder_quote == false AND isCPSOrderQuote == true){\n\tresult = result + commerce.changeQuoteOwnerForCPSQuote();\n}\nresult = result + \"1~cPSManagerApprovalRequired_quote~\"+string(cPSManagerApprovalRequired)+ \"|\";\nresult = result + \"1~cPSOrder_quote~\"+string(isCPSOrderQuote)+ \"|\";\n\n/*\nisEmailSent = cPSEmailSent_quote;\nif(isCPSOrderQuote == false){\n\tisEmailSent = 0;\n}elif(inputActionName == \"update\" AND isCPSOrderQuote == true AND cPSEmailSent_quote <> 2 AND _system_current_step_var <> \"start_step\"){\n\tisEmailSent = isEmailSent + 1;\n}\nresult = result + \"1~cPSEmailSent_quote~\"+ String(isEmailSent) +\"|\";*/\n\ncutLineKeyArray = keys(cutLineCountDict);\ncutLineValueArray = values(cutLineCountDict);\nresult = result + \"1~cutListCountString_quote~\" + join(cutLineKeyArray,\"##\")+\"$$\"+join(cutLineValueArray,\"##\") + \"|\";\nresult = result + \"1~cutListCountString_quote~\" + join(cutLineKeyArray,\"##\")+\"$$\"+join(cutLineValueArray,\"##\") + \"|\";\nresult = result + \"1~fabDrawingCountString_quote~\" + \"|\";\nresult = result + \"1~requireProcess_quote~\" + string(requireProcess) + \"|\";\nresult = result + \"1~totalCustomWeight_quote~\" + String(totalCustomWeight) + \"|\";\n//print \"Result\";\n//print result;\nif(rfqViewDefaultDataString <> \"\"){\n\trfqViewDefaultDataString = substring(rfqViewDefaultDataString,0,len(rfqViewDefaultDataString)-3);\n}\nresult = result + \"1~rFQResponseViewData_quote~\" + rfqViewDefaultDataString + \"|\";\nresult = result + \"1~requiredCutList_quote~\" + String(requiredCutList) + \"|\";\nresult = result + \"1~requiredFabDrawing_quote~\" + String(requiredFabDrawing) + \"|\";\nresult = result + \"1~standardMillTolerance~\" + String(requiredUpdateTolerance) + \"|\";\nresult = result + \"1~totalLaborPrice_quote~\" + String(totalLaborPrice) + \"|\";\nresult = result + \"1~totalExternalProcessPrice_quote~\" + String(totalExternalProcessPrice) + \"|\";\n\nif(isCPSOrderQuote AND inputActionName == \"reconfigure\"){\n\t\n\tisCustomQtyChanged = false;\n\tif(containsKey(customInputDataDict,\"isCustomQtyChanged\")){\n\t\tisCustomQtyChanged = get(customInputDataDict,\"isCustomQtyChanged\",\"boolean\");\n\t}\n\tcutlistVal = \"false\";\n\tif(containsKey(customInputDataDict,\"cutlistVal\")){\n\t\tcutlistVal = get(customInputDataDict,\"cutlistVal\",\"string\");\n\t}\n\toldModelCPSWidth = 0.0;\n\toldModelCPSLength = 0.0;\n\tif(containsKey(customInputDataDict,\"oldModelWidth\")){\n\t\toldModelCPSWidth = get(customInputDataDict,\"oldModelWidth\",\"float\");\n\t}\n\tif(containsKey(customInputDataDict,\"oldModelLength\")){\n\t\toldModelCPSLength = get(customInputDataDict,\"oldModelLength\",\"float\");\n\t}\n\tmodelRFQQty = 1;\n\tif(containsKey(customInputDataDict,\"supplierQty\")){\n\t\tmodelRFQQty = get(customInputDataDict,\"supplierQty\",\"integer\");\n\t}\n\tcpsModelParentDocNum = \"1\";\n\tif(containsKey(customInputDataDict,\"parentDocNumber\")){\n\t\tcpsModelParentDocNum = get(customInputDataDict,\"parentDocNumber\",\"string\");\n\t}\n\tnewModelCPSWidth = 0.0;\n\tnewModelCPSLength = 0.0;\n\tif(containsKey(cutLineLengthDict,cpsModelParentDocNum)){\n\t\tnewModelCPSLength = get(cutLineLengthDict,cpsModelParentDocNum);\n\t}\n\tif(containsKey(cutLineWidthDict,cpsModelParentDocNum)){\n\t\tnewModelCPSWidth = get(cutLineWidthDict,cpsModelParentDocNum);\n\t}\n\trunCPSPricing = false;\n\tif(isCustomQtyChanged == true OR oldModelCPSWidth <> newModelCPSWidth OR oldModelCPSLength <> newModelCPSLength){\n\t\trunCPSPricing = true;\n\t}\n\t\n\tif(runCPSPricing == true){\n\t\t\n\t\tcustomCutLineString = \"\";\n\t\tif(containsKey(customInputDataDict,\"customCutLineString\")){\n\t\t\tcustomCutLineString = get(customInputDataDict,\"customCutLineString\",\"string\");\n\t\t}\n\t\t\n\t\tcutLineArray = String[];\n\t\tif(cutlistVal == \"false\"){\n\t\t\tcutLineArray = split(customCutLineString,\"##\");\n\t\t}\n\t\t\n\t\tlFFactor = 1.0;\n\t\tif(cutlistVal == \"true\"){\n\t\t\tlFFactor = modelRFQQty * newModelCPSLength/12;\n\t\t}elif(sizeofarray(cutLineArray) > 4){\n\t\t\tlFFactor = atof(cutLineArray[4]);\n\t\t}\n\t\tput(customInputDataDict,\"LF\",lFFactor);\n\n\t\tsQFactor = 1.0;\n\t\tif(cutlistVal == \"true\"){\n\t\t\tsQFactor = modelRFQQty * (newModelCPSLength/12)*(newModelCPSWidth/12);\n\t\t}elif(sizeofarray(cutLineArray) > 4){\n\t\t\tsQFactor = atof(cutLineArray[3]);\n\t\t}\n\t\tput(customInputDataDict,\"SF\",sQFactor);\n\t\t\n\t\tvendorDataString = util.updateRFQViewPricesOnReconfigure(vendorDataStringLine_quote,selectedVendor_quote,customInputDataDict);\n\t\tresult = result + \"1~vendorDataStringLine_quote~\" + vendorDataString + \"|\";\n\t\tvendorInputDict = dict(\"string\");\n\t\tput(vendorInputDict,\"rFQResponseViewData_quote\",rfqViewDefaultDataString);\n\t\tput(vendorInputDict,\"inputActionName\",inputActionName);\n\t\tresult = result + util.setRFQResponseVideData(vendorDataString,selectedVendor_quote,vendorInputDict,vendorDataString_quote)+ \"|\";\n\t}\n\t\n}\n\nresTiming1 = start - getcurrenttimeinmillis();\nresTimingString = resTimingString + \"\\nLine 2257: \" + string(resTiming1);\nstart = getcurrenttimeinmillis();\nif(WS_isdebug == \"true\" AND sitename == \"DevMcNichols\" AND urldatabypostLog <> \"\"){\n\tlogarr = split(urldatabypostLog,\"======================\");\n\tif(NOT(isempty(logarr))){\n\t\tfor logs in logarr{\n\t\t\trecord_date = strtodate(substring(logs,0,16),\"%m/%d/%Y %H:%M\");\n\t\t\tif(record_date > valid_record_date){\n\t\t\t\tappend(newlogs,logs+\"\\n\");\n\t\t\t}\n\t\t}\n\t\tappend(newlogs,\"\");\n\t\tret = join(newlogs,\"======================\\n\") + ret;\n\t}\n}\nresTiming1 = start - getcurrenttimeinmillis();\nresTimingString = resTimingString + \"\\nEnd: \" + string(resTiming1);\n//start = getcurrenttimeinmillis();\nreturn result + join(returnarray,\"\") + modeltotalsStrng + \"1~urldatabypostLog~\" + ret + \"|\" + \"1~timingLog~\" + resTimingString + \"|\";",
